{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"D-FAST Bank Erosion","text":"<p>This is one of the Deltares Fluvial Assessment Tools to be used in conjunction with D-Flow FM. The purpose of this particular tool is * to compute local bank erosion sensitivity, and * to give an estimate of the amount of bank material that will be eroded     * during the first year, and     * until equilibrium.</p> <p>The user should carry out a number of steady state hydrodynamic simulations for different discharges using D-Flow FM. The results of these simulations will be combined with some basic morphological characteristics to estimate the bank erosion. For more details see the documentation section.</p>"},{"location":"index.html#license","title":"License","text":"<p>This software is distributed under the terms of the GNU Lesser General Public License Version 2.1. See the license file for details.</p>"},{"location":"change-log.html","title":"Release Notes","text":""},{"location":"change-log.html#231-2025-01-","title":"2.3.1 (2025-01-**)","text":""},{"location":"change-log.html#initial-design","title":"Initial Design","text":"<ul> <li>Initial design of the core library</li> </ul>"},{"location":"license.html","title":"License","text":""},{"location":"license.html#gnu-lesser-general-public-license","title":"GNU LESSER GENERAL PUBLIC LICENSE","text":"<p>Version 2.1, February 1999</p> <pre><code>Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n</code></pre>"},{"location":"license.html#preamble","title":"Preamble","text":"<p>The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.</p> <p>This license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.</p> <p>When we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.</p> <p>For example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.</p> <p>We protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.</p> <p>To protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.</p> <p>Finally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.</p> <p>Most GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.</p> <p>When a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.</p> <p>We call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.</p> <p>For example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.</p> <p>In other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.</p> <p>Although the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.</p> <p>The precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.</p>"},{"location":"license.html#terms-and-conditions-for-copying-distribution-and-modification","title":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","text":"<p>0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".</p> <p>A \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.</p> <p>The \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)</p> <p>\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.</p> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.</p> <p>1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.</p> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <p>2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <ul> <li>a) The modified work must itself be a software library.</li> <li>b) You must cause the files modified to carry prominent     notices stating that you changed the files and the date of     any change.</li> <li>c) You must cause the whole of the work to be licensed at no     charge to all third parties under the terms of this License.</li> <li> <p>d) If a facility in the modified Library refers to a function     or a table of data to be supplied by an application program that     uses the facility, other than as an argument passed when the     facility is invoked, then you must make a good faith effort to     ensure that, in the event an application does not supply such     function or table, the facility still operates, and performs     whatever part of its purpose remains meaningful.</p> <p>(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)</p> </li> </ul> <p>These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.</p> <p>In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <p>3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.</p> <p>Once this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.</p> <p>This option is useful when you wish to copy part of the code of the Library into a program that is not a library.</p> <p>4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.</p> <p>If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.</p> <p>5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.</p> <p>However, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.</p> <p>When a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.</p> <p>If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)</p> <p>Otherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.</p> <p>6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.</p> <p>You must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:</p> <ul> <li>a) Accompany the work with the complete corresponding     machine-readable source code for the Library including whatever     changes were used in the work (which must be distributed under     Sections 1 and 2 above); and, if the work is an executable linked     with the Library, with the complete machine-readable \"work that     uses the Library\", as object code and/or source code, so that the     user can modify the Library and then relink to produce a modified     executable containing the modified Library. (It is understood that     the user who changes the contents of definitions files in the     Library will not necessarily be able to recompile the application     to use the modified definitions.)</li> <li>b) Use a suitable shared library mechanism for linking with     the Library. A suitable mechanism is one that (1) uses at run time     a copy of the library already present on the user's computer     system, rather than copying library functions into the executable,     and (2) will operate properly with a modified version of the     library, if the user installs one, as long as the modified version     is interface-compatible with the version that the work was     made with.</li> <li>c) Accompany the work with a written offer, valid for at least     three years, to give the same user the materials specified in     Subsection 6a, above, for a charge no more than the cost of     performing this distribution.</li> <li>d) If distribution of the work is made by offering access to     copy from a designated place, offer equivalent access to copy the     above specified materials from the same place.</li> <li>e) Verify that the user has already received a copy of these     materials or that you have already sent this user a copy.</li> </ul> <p>For an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.</p> <p>7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:</p> <ul> <li>a) Accompany the combined library with a copy of the same work     based on the Library, uncombined with any other     library facilities. This must be distributed under the terms of     the Sections above.</li> <li>b) Give prominent notice with the combined library of the fact     that part of it is a work based on the Library, and explaining     where to find the accompanying uncombined form of the same work.</li> </ul> <p>8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> <p>9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.</p> <p>10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.</p> <p>11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.</p> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <p>12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.</p> <p>13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.</p> <p>14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p> <p>NO WARRANTY</p> <p>15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <p>16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license.html#end-of-terms-and-conditions","title":"END OF TERMS AND CONDITIONS","text":""},{"location":"license.html#how-to-apply-these-terms-to-your-new-libraries","title":"How to Apply These Terms to Your New Libraries","text":"<p>If you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).</p> <p>To apply these terms, attach the following notices to the library. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>one line to give the library's name and an idea of what it does.\nCopyright (C) year  name of author\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary. Here is a sample; alter the names:</p> <pre><code>Yoyodyne, Inc., hereby disclaims all copyright interest in\nthe library `Frob' (a library for tweaking knobs) written\nby James Random Hacker.\n\nsignature of Ty Coon, 1 April 1990\nTy Coon, President of Vice\n</code></pre> <p>That's all there is to it!</p>"},{"location":"api/bank_erosion.html","title":"bank_erosion","text":""},{"location":"api/bank_erosion.html#bank-erosion","title":"Bank Erosion","text":""},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion","title":"<code>dfastbe.bank_erosion.bank_erosion</code>","text":"<p>Copyright (C) 2020 Stichting Deltares.</p> <p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation version 2.1.</p> <p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.</p> <p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, see http://www.gnu.org/licenses/.</p> <p>contact: delft3d.support@deltares.nl Stichting Deltares P.O. Box 177 2600 MH Delft, The Netherlands</p> <p>All indications and logos of, and references to, \"Delft3D\" and \"Deltares\" are registered trademarks of Stichting Deltares, and remain the property of Stichting Deltares. All rights reserved.</p> <p>INFORMATION This file is part of D-FAST Bank Erosion: https://github.com/Deltares/D-FAST_Bank_Erosion</p>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.Erosion","title":"<code>Erosion</code>","text":"<p>Class to handle the bank erosion calculations.</p> Source code in <code>src/dfastbe/bank_erosion/bank_erosion.py</code> <pre><code>class Erosion:\n    \"\"\"Class to handle the bank erosion calculations.\"\"\"\n\n    def __init__(self, config_file: ConfigFile, gui: bool = False):\n        \"\"\"Initialize the Erosion class.\"\"\"\n        self.root_dir = config_file.root_dir\n        self._config_file = config_file\n        self.gui = gui\n\n        self.river_data = ErosionRiverData(config_file)\n        self.river_center_line_arr = self.river_data.river_center_line.as_array()\n        self.simulation_data = self.river_data.simulation_data()\n        self.sim_files, self.p_discharge = self.river_data.get_erosion_sim_data(\n            self.river_data.num_discharge_levels\n        )\n        self.bl_processor = BankLinesProcessor(self.river_data)\n        self.debugger = Debugger(config_file.crs, self.river_data.output_dir)\n\n    @property\n    def config_file(self) -&gt; ConfigFile:\n        \"\"\"Configuration file object.\"\"\"\n        return self._config_file\n\n    def get_ship_parameters(\n        self, num_stations_per_bank: List[int]\n    ) -&gt; Dict[str, List[np.ndarray]]:\n        \"\"\"Get ship parameters from the configuration file.\"\"\"\n        ship_relative_velocity = self.config_file.get_parameter(\n            \"Erosion\", \"VShip\", num_stations_per_bank, positive=True, onefile=True\n        )\n        num_ships_year = self.config_file.get_parameter(\n            \"Erosion\", \"NShip\", num_stations_per_bank, positive=True, onefile=True\n        )\n        num_waves_p_ship = self.config_file.get_parameter(\n            \"Erosion\",\n            \"NWave\",\n            num_stations_per_bank,\n            default=5,\n            positive=True,\n            onefile=True,\n        )\n        ship_draught = self.config_file.get_parameter(\n            \"Erosion\", \"Draught\", num_stations_per_bank, positive=True, onefile=True\n        )\n        ship_type = self.config_file.get_parameter(\n            \"Erosion\", \"ShipType\", num_stations_per_bank, valid=[1, 2, 3], onefile=True\n        )\n        parslope0 = self.config_file.get_parameter(\n            \"Erosion\",\n            \"Slope\",\n            num_stations_per_bank,\n            default=20,\n            positive=True,\n            ext=\"slp\",\n        )\n        reed_wave_damping_coeff = self.config_file.get_parameter(\n            \"Erosion\",\n            \"Reed\",\n            num_stations_per_bank,\n            default=0,\n            positive=True,\n            ext=\"rdd\",\n        )\n\n        ship_data = {\n            \"vship0\": ship_relative_velocity,\n            \"Nship0\": num_ships_year,\n            \"nwave0\": num_waves_p_ship,\n            \"Tship0\": ship_draught,\n            \"ship0\": ship_type,\n            \"parslope0\": parslope0,\n            \"parreed0\": reed_wave_damping_coeff,\n        }\n        return ship_data\n\n    def _process_river_axis_by_center_line(self) -&gt; LineGeometry:\n        \"\"\"Process the river axis by the center line.\n\n        Intersect the river center line with the river axis to map the stations from the first to the latter\n        then clip the river axis by the first and last station of the centerline.\n        \"\"\"\n        river_axis = LineGeometry(self.river_data.river_axis, crs=self.config_file.crs)\n        river_axis_numpy = river_axis.as_array()\n        # optional sorting --&gt; see 04_Waal_D3D example\n        # check: sum all distances and determine maximum distance ...\n        # if maximum &gt; alpha * sum then perform sort\n        # Waal OK: 0.0082 ratio max/sum, Waal NotOK: 0.13 - Waal: 2500 points,\n        # so even when OK still some 21 times more than 1/2500 = 0.0004\n        dist2 = (np.diff(river_axis_numpy, axis=0) ** 2).sum(axis=1)\n        alpha = dist2.max() / dist2.sum()\n        if alpha &gt; 0.03:\n            print(\"The river axis needs sorting!!\")\n\n        # map km to axis points, further using axis\n        log_text(\"chainage_to_axis\")\n        river_axis_km = river_axis.intersect_with_line(self.river_center_line_arr)\n\n        # clip river axis to reach of interest (get the closest point to the first and last station)\n        i1 = np.argmin(\n            ((self.river_center_line_arr[0, :2] - river_axis_numpy) ** 2).sum(axis=1)\n        )\n        i2 = np.argmin(\n            ((self.river_center_line_arr[-1, :2] - river_axis_numpy) ** 2).sum(axis=1)\n        )\n        if i1 &lt; i2:\n            river_axis_km = river_axis_km[i1 : i2 + 1]\n            river_axis_numpy = river_axis_numpy[i1 : i2 + 1]\n        else:\n            # reverse river axis\n            river_axis_km = river_axis_km[i2 : i1 + 1][::-1]\n            river_axis_numpy = river_axis_numpy[i2 : i1 + 1][::-1]\n\n        # river_axis = LineString(river_axis_numpy)\n        river_axis = LineGeometry(river_axis_numpy, crs=self.config_file.crs)\n        river_axis.add_data(data={\"stations\": river_axis_km})\n        return river_axis\n\n    def _get_fairway_data(\n        self,\n        river_axis: LineGeometry,\n        mesh_data: MeshData,\n    ):\n        # map km to fairway points, further using axis\n        log_text(\"chainage_to_fairway\")\n        # intersect fairway and mesh\n        # log_text(\"intersect_fairway_mesh\", data={\"n\": len(fairway_numpy)})\n        fairway_intersection_coords, fairway_face_indices = intersect_line_mesh(\n            river_axis.as_array(), mesh_data\n        )\n        if self.river_data.debug:\n            arr = (\n                fairway_intersection_coords[:-1] + fairway_intersection_coords[1:]\n            ) / 2\n            line_geom = LineGeometry(arr, crs=self.config_file.crs)\n            line_geom.to_file(\n                file_name=f\"{str(self.river_data.output_dir)}{os.sep}fairway_face_indices.shp\",\n                data={\"iface\": fairway_face_indices},\n            )\n\n        return FairwayData(fairway_face_indices, fairway_intersection_coords)\n\n    def calculate_fairway_bank_line_distance(\n        self,\n        bank_data: BankData,\n        fairway_data: FairwayData,\n        simulation_data: ErosionSimulationData,\n    ):\n        \"\"\"Map bank data to fairway data.\n\n        Args:\n            bank_data (BankData):\n            fairway_data (FairwayData):\n            simulation_data (ErosionSimulationData):\n\n        Returns:\n            The method updates the following attributes in the `bank_data` instance\n                - fairway_face_indices\n                - fairway_distances\n            and the following attributes in the `fairway_data` instance\n                - fairway_initial_water_levels\n        \"\"\"\n        # distance fairway-bankline (bank-fairway)\n        log_text(\"bank_distance_fairway\")\n\n        num_fairway_face_ind = len(fairway_data.fairway_face_indices)\n\n        for bank_i, single_bank in enumerate(bank_data):\n            bank_coords = single_bank.bank_line_coords\n            coords_mid = (bank_coords[:-1] + bank_coords[1:]) / 2\n            bank_fairway_dist = np.zeros(len(coords_mid))\n            bp_fw_face_idx = np.zeros(len(coords_mid), dtype=int)\n\n            for ind, coord_i in enumerate(coords_mid):\n                # find closest fairway support node\n                closest_ind = np.argmin(\n                    ((coord_i - fairway_data.intersection_coords) ** 2).sum(axis=1)\n                )\n                fairway_coord = fairway_data.intersection_coords[closest_ind]\n                fairway_bank_distance = ((coord_i - fairway_coord) ** 2).sum() ** 0.5\n                # If fairway support node is also the closest projected fairway point, then it likely\n                # that that point is one of the original support points (a corner) of the fairway path\n                # and located inside a grid cell. The segments before and after that point will then\n                # both be located inside that same grid cell, so let's pick the segment before the point.\n                # If the point happens to coincide with a grid edge and the two segments are located\n                # in different grid cells, then we could either simply choose one or add complexity to\n                # average the values of the two grid cells. Let's go for the simplest approach ...\n                iseg = max(closest_ind - 1, 0)\n                if closest_ind &gt; 0:\n                    alpha = calculate_alpha(\n                        fairway_data.intersection_coords,\n                        closest_ind,\n                        closest_ind - 1,\n                        coord_i,\n                    )\n                    if 0 &lt; alpha &lt; 1:\n                        fwp1 = fairway_data.intersection_coords[\n                            closest_ind - 1\n                        ] + alpha * (\n                            fairway_data.intersection_coords[closest_ind]\n                            - fairway_data.intersection_coords[closest_ind - 1]\n                        )\n                        d1 = ((coord_i - fwp1) ** 2).sum() ** 0.5\n                        if d1 &lt; fairway_bank_distance:\n                            fairway_bank_distance = d1\n                            # projected point located on segment before, which corresponds to initial choice: iseg = ifw - 1\n                if closest_ind &lt; num_fairway_face_ind:\n                    alpha = calculate_alpha(\n                        fairway_data.intersection_coords,\n                        closest_ind + 1,\n                        closest_ind,\n                        coord_i,\n                    )\n                    if 0 &lt; alpha &lt; 1:\n                        fwp1 = fairway_data.intersection_coords[closest_ind] + alpha * (\n                            fairway_data.intersection_coords[closest_ind + 1]\n                            - fairway_data.intersection_coords[closest_ind]\n                        )\n                        d1 = ((coord_i - fwp1) ** 2).sum() ** 0.5\n                        if d1 &lt; fairway_bank_distance:\n                            fairway_bank_distance = d1\n                            iseg = closest_ind\n\n                bp_fw_face_idx[ind] = fairway_data.fairway_face_indices[iseg]\n                bank_fairway_dist[ind] = fairway_bank_distance\n\n            if self.river_data.debug:\n                line_geom = LineGeometry(coords_mid, crs=self.config_file.crs)\n                line_geom.to_file(\n                    file_name=f\"{self.river_data.output_dir}/bank_{bank_i + 1}_chainage_and_fairway_face_idx.shp\",\n                    data={\n                        \"chainage\": single_bank.bank_chainage_midpoints,\n                        \"iface_fw\": bp_fw_face_idx[bank_i],\n                    },\n                )\n\n            single_bank.fairway_face_indices = bp_fw_face_idx\n            single_bank.fairway_distances = bank_fairway_dist\n\n        # water level at fairway\n        water_level_fairway_ref = []\n        for single_bank in bank_data:\n            ii = single_bank.fairway_face_indices\n            water_level_fairway_ref.append(simulation_data.water_level_face[ii])\n        fairway_data.fairway_initial_water_levels = water_level_fairway_ref\n\n    def _prepare_initial_conditions(\n        self,\n        config_file: ConfigFile,\n        num_stations_per_bank: List[int],\n        fairway_data: FairwayData,\n    ) -&gt; ErosionInputs:\n        # wave reduction s0, s1\n        wave_fairway_distance_0 = config_file.get_parameter(\n            \"Erosion\",\n            \"Wave0\",\n            num_stations_per_bank,\n            default=200,\n            positive=True,\n            onefile=True,\n        )\n        wave_fairway_distance_1 = config_file.get_parameter(\n            \"Erosion\",\n            \"Wave1\",\n            num_stations_per_bank,\n            default=150,\n            positive=True,\n            onefile=True,\n        )\n\n        # save 1_banklines\n        # read vship, nship, nwave, draught (tship), shiptype ... independent of level number\n        shipping_data = self.get_ship_parameters(num_stations_per_bank)\n\n        # read classes flag (yes: banktype = taucp, no: banktype = tauc) and banktype (taucp: 0-4 ... or ... tauc = critical shear value)\n        classes = config_file.get_bool(\"Erosion\", \"Classes\")\n        if classes:\n            bank_type = config_file.get_parameter(\n                \"Erosion\",\n                \"BankType\",\n                num_stations_per_bank,\n                default=0,\n                ext=\".btp\",\n            )\n            tauc = []\n            for bank in bank_type:\n                tauc.append(ErosionInputs.taucls[bank])\n        else:\n            tauc = config_file.get_parameter(\n                \"Erosion\",\n                \"BankType\",\n                num_stations_per_bank,\n                default=0,\n                ext=\".btp\",\n            )\n            thr = (ErosionInputs.taucls[:-1] + ErosionInputs.taucls[1:]) / 2\n            bank_type = [None] * len(thr)\n            for ib, shear_stress in enumerate(tauc):\n                bt = np.zeros(shear_stress.size)\n                for thr_i in thr:\n                    bt[shear_stress &lt; thr_i] += 1\n                bank_type[ib] = bt\n\n        # read bank protection level dike_height\n        zss_miss = -1000\n        dike_height = config_file.get_parameter(\n            \"Erosion\",\n            \"ProtectionLevel\",\n            num_stations_per_bank,\n            default=zss_miss,\n            ext=\".bpl\",\n        )\n        # if dike_height undefined, set dike_height equal to water_level_fairway_ref - 1\n        for ib, one_zss in enumerate(dike_height):\n            mask = one_zss == zss_miss\n            one_zss[mask] = fairway_data.fairway_initial_water_levels[ib][mask] - 1\n\n        data = dict(\n            wave_fairway_distance_0=wave_fairway_distance_0,\n            wave_fairway_distance_1=wave_fairway_distance_1,\n            bank_protection_level=dike_height,\n            tauc=tauc,\n        )\n        return ErosionInputs.from_column_arrays(\n            data, SingleErosion, shipping_data=shipping_data, bank_type=bank_type\n        )\n\n    def _process_discharge_levels(\n        self,\n        km_mid,\n        km_bin,\n        config_file: ConfigFile,\n        erosion_inputs: ErosionInputs,\n        bank_data: BankData,\n        fairway_data: FairwayData,\n    ) -&gt; Tuple[WaterLevelData, ErosionResults]:\n\n        num_levels = self.river_data.num_discharge_levels\n        num_km = len(km_mid)\n\n        # initialize arrays for erosion loop over all discharges\n        discharge_levels, bank_height = [], []\n\n        log_text(\"total_time\", data={\"t\": self.river_data.erosion_time})\n\n        for level_i in range(num_levels):\n            log_text(\n                \"discharge_header\",\n                data={\n                    \"i\": level_i + 1,\n                    \"p\": self.p_discharge[level_i],\n                    \"t\": self.p_discharge[level_i] * self.river_data.erosion_time,\n                },\n            )\n\n            log_text(\"read_q_params\", indent=\"  \")\n            # 1) read level-specific parameters\n            # read ship_velocity, num_ship, nwave, draught, ship_type, slope, reed, fairway_depth, ... (level specific values)\n            discharge_level_pars = self._read_discharge_parameters(\n                level_i, erosion_inputs.shipping_data, bank_data.num_stations_per_bank\n            )\n\n            # 2) load FM result\n            log_text(\"-\", indent=\"  \")\n            log_text(\n                \"read_simdata\", data={\"file\": self.sim_files[level_i]}, indent=\"  \"\n            )\n            simulation_data = ErosionSimulationData.read(\n                self.sim_files[level_i], indent=\"  \"\n            )\n            log_text(\"bank_erosion\", indent=\"  \")\n\n            level_calculation, dvol_bank = self.compute_erosion_per_level(\n                level_i,\n                bank_data,\n                simulation_data,\n                fairway_data,\n                discharge_level_pars,\n                erosion_inputs,\n                km_bin,\n                num_km,\n                bank_height,\n            )\n\n            discharge_levels.append(level_calculation)\n\n            error_vol_file = config_file.get_str(\n                \"Erosion\", f\"EroVol{level_i + 1}\", default=f\"erovolQ{level_i + 1}.evo\"\n            )\n            log_text(\"save_error_vol\", data={\"file\": error_vol_file}, indent=\"  \")\n            write_km_eroded_volumes(\n                km_mid, dvol_bank, f\"{self.river_data.output_dir}/{error_vol_file}\"\n            )\n\n        # shape is (num_levels, 2, (num_stations_per_bank))\n        # if num_levels = 13 and the num_stations_per_bank = [10, 15]\n        # then shape = (13, 2, (10, 15)) list of 13 elements, each element is a list of 2 elements\n        # first an array of 10 elements, and the second is array of 15 elements\n        discharge_levels = DischargeLevels(discharge_levels)\n        flow_erosion_dist = discharge_levels.accumulate(\"erosion_distance_flow\")\n        ship_erosion_dist = discharge_levels.accumulate(\"erosion_distance_shipping\")\n        total_erosion_dist = discharge_levels.accumulate(\"erosion_distance_tot\")\n        total_eroded_vol = discharge_levels.accumulate(\"erosion_volume_tot\")\n\n        erosion_results = ErosionResults(\n            erosion_time=self.river_data.erosion_time,\n            flow_erosion_dist=flow_erosion_dist,\n            ship_erosion_dist=ship_erosion_dist,\n            total_erosion_dist=total_erosion_dist,\n            total_eroded_vol=total_eroded_vol,\n            eq_erosion_dist=discharge_levels._get_attr_both_sides_level(\n                \"erosion_distance_eq\", num_levels - 1\n            ),\n            eq_eroded_vol=discharge_levels._get_attr_both_sides_level(\n                \"erosion_volume_eq\", num_levels - 1\n            ),\n        )\n        water_level_data = discharge_levels.get_water_level_data(bank_height)\n\n        bank_data.left.bank_line_size, bank_data.right.bank_line_size = (\n            bank_data.left.segment_length,\n            bank_data.right.segment_length,\n        )\n\n        return water_level_data, erosion_results\n\n    def _postprocess_erosion_results(\n        self,\n        km_bin: Tuple[float, float, float],\n        km_mid,\n        bank_data: BankData,\n        erosion_results: ErosionResults,\n    ) -&gt; Tuple[List[LineString], List[LineString], List[LineString]]:\n        \"\"\"Postprocess the erosion results to get the new bank lines and volumes.\"\"\"\n        log_text(\"=\")\n        avg_erosion_rate = np.zeros(bank_data.n_bank_lines)\n        dn_max = np.zeros(bank_data.n_bank_lines)\n        d_nav_flow = np.zeros(bank_data.n_bank_lines)\n        d_nav_ship = np.zeros(bank_data.n_bank_lines)\n        d_nav_eq = np.zeros(bank_data.n_bank_lines)\n        dn_max_eq = np.zeros(bank_data.n_bank_lines)\n        eq_eroded_vol_per_km = np.zeros((len(km_mid), bank_data.n_bank_lines))\n        total_eroded_vol_per_km = np.zeros((len(km_mid), bank_data.n_bank_lines))\n        xy_line_new_list = []\n        bankline_new_list = []\n        xy_line_eq_list = []\n        bankline_eq_list = []\n        for ib, single_bank in enumerate(bank_data):\n            bank_coords = single_bank.bank_line_coords\n            avg_erosion_rate[ib] = (\n                erosion_results.total_erosion_dist[ib] * single_bank.bank_line_size\n            ).sum() / single_bank.bank_line_size.sum()\n            dn_max[ib] = erosion_results.total_erosion_dist[ib].max()\n            d_nav_flow[ib] = (\n                erosion_results.flow_erosion_dist[ib] * single_bank.bank_line_size\n            ).sum() / single_bank.bank_line_size.sum()\n            d_nav_ship[ib] = (\n                erosion_results.ship_erosion_dist[ib] * single_bank.bank_line_size\n            ).sum() / single_bank.bank_line_size.sum()\n            d_nav_eq[ib] = (\n                erosion_results.eq_erosion_dist[ib] * single_bank.bank_line_size\n            ).sum() / single_bank.bank_line_size.sum()\n            dn_max_eq[ib] = erosion_results.eq_erosion_dist[ib].max()\n            log_text(\"bank_dnav\", data={\"ib\": ib + 1, \"v\": avg_erosion_rate[ib]})\n            log_text(\"bank_dnavflow\", data={\"v\": d_nav_flow[ib]})\n            log_text(\"bank_dnavship\", data={\"v\": d_nav_ship[ib]})\n            log_text(\"bank_dnmax\", data={\"v\": dn_max[ib]})\n            log_text(\"bank_dnaveq\", data={\"v\": d_nav_eq[ib]})\n            log_text(\"bank_dnmaxeq\", data={\"v\": dn_max_eq[ib]})\n\n            xy_line_new = move_line(\n                bank_coords,\n                erosion_results.total_erosion_dist[ib],\n                single_bank.is_right_bank,\n            )\n            xy_line_new_list.append(xy_line_new)\n            bankline_new_list.append(LineString(xy_line_new))\n\n            xy_line_eq = move_line(\n                bank_coords,\n                erosion_results.eq_erosion_dist[ib],\n                single_bank.is_right_bank,\n            )\n            xy_line_eq_list.append(xy_line_eq)\n            bankline_eq_list.append(LineString(xy_line_eq))\n\n            dvol_eq = get_km_eroded_volume(\n                single_bank.bank_chainage_midpoints,\n                erosion_results.eq_eroded_vol[ib],\n                km_bin,\n            )\n            eq_eroded_vol_per_km[:, ib] = dvol_eq\n            dvol_tot = get_km_eroded_volume(\n                single_bank.bank_chainage_midpoints,\n                erosion_results.total_eroded_vol[ib],\n                km_bin,\n            )\n            total_eroded_vol_per_km[:, ib] = dvol_tot\n            if ib &lt; bank_data.n_bank_lines - 1:\n                log_text(\"-\")\n\n        erosion_results.avg_erosion_rate = avg_erosion_rate\n        erosion_results.eq_eroded_vol_per_km = eq_eroded_vol_per_km\n        erosion_results.total_eroded_vol_per_km = total_eroded_vol_per_km\n\n        return bankline_new_list, bankline_eq_list, xy_line_eq_list\n\n    def _get_param(\n        self, name: str, default_val, iq_str, num_stations_per_bank, **kwargs\n    ):\n        return self.config_file.get_parameter(\n            \"Erosion\",\n            f\"{name}{iq_str}\",\n            num_stations_per_bank,\n            default=default_val,\n            **kwargs,\n        )\n\n    def _read_discharge_parameters(\n        self,\n        level_i: int,\n        shipping_data: Dict[str, List[np.ndarray]],\n        num_stations_per_bank: List[int],\n    ) -&gt; DischargeLevelParameters:\n        \"\"\"Read Discharge level parameters.\n\n        Read all discharge-specific input arrays for level *iq*.\n        Returns a dict with keys: vship, num_ship, n_wave, t_ship, ship_type,\n        mu_slope, mu_reed, par_slope, par_reed.\n        \"\"\"\n        iq_str = f\"{level_i + 1}\"\n\n        ship_velocity = self._get_param(\n            \"VShip\",\n            shipping_data[\"vship0\"],\n            iq_str,\n            num_stations_per_bank,\n        )\n        num_ship = self._get_param(\n            \"NShip\",\n            shipping_data[\"Nship0\"],\n            iq_str,\n            num_stations_per_bank,\n        )\n        num_waves_per_ship = self._get_param(\n            \"NWave\",\n            shipping_data[\"nwave0\"],\n            iq_str,\n            num_stations_per_bank,\n        )\n        ship_draught = self._get_param(\n            \"Draught\",\n            shipping_data[\"Tship0\"],\n            iq_str,\n            num_stations_per_bank,\n        )\n        ship_type = self._get_param(\n            \"ShipType\",\n            shipping_data[\"ship0\"],\n            iq_str,\n            num_stations_per_bank,\n            valid=[1, 2, 3],\n            onefile=True,\n        )\n        par_slope = self._get_param(\n            \"Slope\",\n            shipping_data[\"parslope0\"],\n            iq_str,\n            num_stations_per_bank,\n            positive=True,\n            ext=\"slp\",\n        )\n        par_reed = self._get_param(\n            \"Reed\",\n            shipping_data[\"parreed0\"],\n            iq_str,\n            num_stations_per_bank,\n            positive=True,\n            ext=\"rdd\",\n        )\n\n        mu_slope, mu_reed = [], []\n        for ps, pr in zip(par_slope, par_reed):\n            mus = ps.copy()\n            mus[mus &gt; 0] = 1.0 / mus[mus &gt; 0]  # 1/slope for non-zero values\n            mu_slope.append(mus)\n            mu_reed.append(8.5e-4 * pr**0.8)  # empirical damping coefficient\n\n        return DischargeLevelParameters.from_column_arrays(\n            {\n                \"id\": level_i,\n                \"ship_velocity\": ship_velocity,\n                \"num_ship\": num_ship,\n                \"num_waves_per_ship\": num_waves_per_ship,\n                \"ship_draught\": ship_draught,\n                \"ship_type\": ship_type,\n                \"par_slope\": par_slope,\n                \"par_reed\": par_reed,\n                \"mu_slope\": mu_slope,\n                \"mu_reed\": mu_reed,\n            },\n            ParametersPerBank,\n        )\n\n    def compute_erosion_per_level(\n        self,\n        level_i,\n        bank_data,\n        simulation_data,\n        fairway_data,\n        discharge_level_pars,\n        erosion_inputs,\n        km_bin,\n        num_km,\n        bank_height,\n    ):\n        \"\"\"Compute the bank erosion for a given level.\"\"\"\n        num_levels = self.river_data.num_discharge_levels\n        dvol_bank = np.zeros((num_km, 2))\n        hfw_max_level = 0\n        par_list = []\n        for ind, bank_i in enumerate(bank_data):\n            parameter = DischargeCalculationParameters()\n            # bank_i = 0: left bank, bank_i = 1: right bank\n            # calculate velocity along banks ...\n            parameter.bank_velocity = simulation_data.calculate_bank_velocity(\n                bank_i, self.river_data.vel_dx\n            )\n\n            if level_i == 0:\n                # determine velocity and bank height along banks ...\n                # bank height = maximum bed elevation per cell\n                bank_height.append(simulation_data.calculate_bank_height(bank_i, self.river_data.zb_dx))\n\n            # get water depth along the fair-way\n            ii_face = bank_i.fairway_face_indices\n            water_depth_fairway = simulation_data.water_depth_face[ii_face]\n            hfw_max_level = max(hfw_max_level, water_depth_fairway.max())\n\n            parameter.water_level = simulation_data.water_level_face[ii_face]\n            chez_face = simulation_data.chezy_face[ii_face]\n            parameter.chezy = 0 * chez_face + chez_face.mean()\n\n            # last discharge level\n            if level_i == num_levels - 1:\n                erosion_distance_eq, erosion_volume_eq = comp_erosion_eq(\n                    bank_height[ind],\n                    bank_i.segment_length,\n                    fairway_data.fairway_initial_water_levels[ind],\n                    discharge_level_pars.get_bank(ind),\n                    bank_i.fairway_distances,\n                    water_depth_fairway,\n                    erosion_inputs.get_bank(ind),\n                )\n                parameter.erosion_distance_eq = erosion_distance_eq\n                parameter.erosion_volume_eq = erosion_volume_eq\n\n            parameter = compute_bank_erosion_dynamics(\n                parameter,\n                bank_height[ind],\n                bank_i.segment_length,\n                bank_i.fairway_distances,\n                fairway_data.fairway_initial_water_levels[ind],\n                discharge_level_pars.get_bank(ind),\n                self.river_data.erosion_time * self.p_discharge[level_i],\n                water_depth_fairway,\n                erosion_inputs.get_bank(ind),\n            )\n\n            # accumulate eroded volumes per km\n            volume_per_discharge = get_km_eroded_volume(\n                bank_i.bank_chainage_midpoints, parameter.erosion_volume_tot, km_bin\n            )\n            parameter.volume_per_discharge = volume_per_discharge\n            par_list.append(parameter)\n\n            dvol_bank[:, ind] += volume_per_discharge\n\n            if self.river_data.debug:\n                self._debug_output(\n                    level_i,\n                    ind,\n                    bank_data,\n                    fairway_data,\n                    erosion_inputs,\n                    discharge_level_pars,\n                    water_depth_fairway,\n                    bank_height,\n                    num_levels,\n                    parameter,\n                )\n\n        level_calculation = CalculationLevel(\n            left=par_list[0], right=par_list[1], hfw_max=hfw_max_level\n        )\n\n        return level_calculation, dvol_bank\n\n    def _debug_output(\n        self,\n        level_i,\n        ind,\n        bank_data,\n        fairway_data,\n        erosion_inputs,\n        discharge_level_pars,\n        water_depth_fairway,\n        bank_height,\n        num_levels: int,\n        parameter: DischargeCalculationParameters,\n    ):\n        if level_i == num_levels - 1:\n            # EQ debug\n            self.debugger.last_discharge_level(\n                ind,\n                bank_data.get_bank(ind),\n                fairway_data,\n                erosion_inputs.get_bank(ind),\n                discharge_level_pars.get_bank(ind),\n                water_depth_fairway,\n                parameter.erosion_distance_eq,\n                parameter.erosion_volume_eq,\n                bank_height,\n            )\n            # Q-specific debug\n        self.debugger.middle_levels(\n            ind,\n            level_i,\n            bank_data.get_bank(ind),\n            fairway_data,\n            erosion_inputs.get_bank(ind),\n            discharge_level_pars.get_bank(ind),\n            water_depth_fairway,\n            parameter.bank_velocity,\n            bank_height,\n            parameter,\n        )\n\n    def run(self) -&gt; None:\n        \"\"\"Run the bank erosion analysis for a specified configuration.\"\"\"\n        timed_logger(\"-- start analysis --\")\n        log_text(\n            \"header_bankerosion\",\n            data={\n                \"version\": __version__,\n                \"location\": \"https://github.com/Deltares/D-FAST_Bank_Erosion\",\n            },\n        )\n        log_text(\"-\")\n        config_file = self.config_file\n\n        log_text(\"derive_topology\")\n\n        mesh_data = self.simulation_data.compute_mesh_topology()\n        river_axis = self._process_river_axis_by_center_line()\n\n        # map to the output interval\n        km_bin = (\n            river_axis.data[\"stations\"].min(),\n            river_axis.data[\"stations\"].max(),\n            self.river_data.output_intervals,\n        )\n        km_mid = get_km_bins(km_bin, station_type=\"mid\")  # get mid-points\n\n        fairway_data = self._get_fairway_data(river_axis, mesh_data)\n\n        # map bank lines to mesh cells\n        log_text(\"intersect_bank_mesh\")\n        bank_data = self.bl_processor.intersect_with_mesh(mesh_data)\n        # map the bank data to the fairway data (the bank_data and fairway_data will be updated inside the `_map_bank_to_fairway` function)\n        self.calculate_fairway_bank_line_distance(\n            bank_data, fairway_data, self.simulation_data\n        )\n\n        num_stations_per_bank = bank_data.num_stations_per_bank\n        erosion_inputs = self._prepare_initial_conditions(\n            config_file, num_stations_per_bank, fairway_data\n        )\n\n        # initialize arrays for erosion loop over all discharges\n        water_level_data, erosion_results = self._process_discharge_levels(\n            km_mid,\n            km_bin,\n            config_file,\n            erosion_inputs,\n            bank_data,\n            fairway_data,\n        )\n\n        bankline_new_list, bankline_eq_list, xy_line_eq_list = (\n            self._postprocess_erosion_results(\n                km_bin,\n                km_mid,\n                bank_data,\n                erosion_results,\n            )\n        )\n\n        self._write_bankline_shapefiles(\n            bankline_new_list, bankline_eq_list, config_file\n        )\n        self._write_volume_outputs(erosion_results, km_mid)\n\n        # create various plots\n        erosion_plotter = ErosionPlotter(\n            self.gui,\n            self.river_data.plot_flags,\n            erosion_results,\n            bank_data,\n            water_level_data,\n            erosion_inputs,\n        )\n        erosion_plotter.plot_all(\n            river_axis.data[\"stations\"],\n            xy_line_eq_list,\n            km_mid,\n            self.river_data.output_intervals,\n            self.river_center_line_arr,\n            self.simulation_data,\n        )\n        log_text(\"end_bankerosion\")\n        timed_logger(\"-- end analysis --\")\n\n    def _write_bankline_shapefiles(\n        self, bankline_new_list, bankline_eq_list, config_file: ConfigFile\n    ):\n        bankline_new_series = GeoSeries(bankline_new_list, crs=config_file.crs)\n        bank_lines_new = GeoDataFrame(geometry=bankline_new_series)\n        bank_name = self.config_file.get_str(\"General\", \"BankFile\", \"bankfile\")\n\n        bank_file = self.river_data.output_dir / f\"{bank_name}_new.shp\"\n        log_text(\"save_banklines\", data={\"file\": str(bank_file)})\n        bank_lines_new.to_file(bank_file)\n\n        bankline_eq_series = GeoSeries(bankline_eq_list, crs=config_file.crs)\n        banklines_eq = GeoDataFrame(geometry=bankline_eq_series)\n\n        bank_file = self.river_data.output_dir / f\"{bank_name}_eq.shp\"\n        log_text(\"save_banklines\", data={\"file\": str(bank_file)})\n        banklines_eq.to_file(bank_file)\n\n    def _write_volume_outputs(self, erosion_results: ErosionResults, km_mid):\n        erosion_vol_file = self.config_file.get_str(\n            \"Erosion\", \"EroVol\", default=\"erovol.evo\"\n        )\n        log_text(\"save_tot_erovol\", data={\"file\": erosion_vol_file})\n        write_km_eroded_volumes(\n            km_mid,\n            erosion_results.total_eroded_vol_per_km,\n            str(self.river_data.output_dir / erosion_vol_file),\n        )\n\n        # write eroded volumes per km (equilibrium)\n        erosion_vol_file = self.config_file.get_str(\n            \"Erosion\", \"EroVolEqui\", default=\"erovol_eq.evo\"\n        )\n        log_text(\"save_eq_erovol\", data={\"file\": erosion_vol_file})\n        write_km_eroded_volumes(\n            km_mid,\n            erosion_results.eq_eroded_vol_per_km,\n            str(self.river_data.output_dir / erosion_vol_file),\n        )\n</code></pre>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.Erosion.config_file","title":"<code>config_file: ConfigFile</code>  <code>property</code>","text":"<p>Configuration file object.</p>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.Erosion.__init__","title":"<code>__init__(config_file: ConfigFile, gui: bool = False)</code>","text":"<p>Initialize the Erosion class.</p> Source code in <code>src/dfastbe/bank_erosion/bank_erosion.py</code> <pre><code>def __init__(self, config_file: ConfigFile, gui: bool = False):\n    \"\"\"Initialize the Erosion class.\"\"\"\n    self.root_dir = config_file.root_dir\n    self._config_file = config_file\n    self.gui = gui\n\n    self.river_data = ErosionRiverData(config_file)\n    self.river_center_line_arr = self.river_data.river_center_line.as_array()\n    self.simulation_data = self.river_data.simulation_data()\n    self.sim_files, self.p_discharge = self.river_data.get_erosion_sim_data(\n        self.river_data.num_discharge_levels\n    )\n    self.bl_processor = BankLinesProcessor(self.river_data)\n    self.debugger = Debugger(config_file.crs, self.river_data.output_dir)\n</code></pre>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.Erosion.calculate_fairway_bank_line_distance","title":"<code>calculate_fairway_bank_line_distance(bank_data: BankData, fairway_data: FairwayData, simulation_data: ErosionSimulationData)</code>","text":"<p>Map bank data to fairway data.</p> <p>Parameters:</p> Name Type Description Default <code>bank_data</code> <code>BankData</code> required <code>fairway_data</code> <code>FairwayData</code> required <code>simulation_data</code> <code>ErosionSimulationData</code> required <p>Returns:</p> Type Description <p>The method updates the following attributes in the <code>bank_data</code> instance - fairway_face_indices - fairway_distances</p> <p>and the following attributes in the <code>fairway_data</code> instance - fairway_initial_water_levels</p> Source code in <code>src/dfastbe/bank_erosion/bank_erosion.py</code> <pre><code>def calculate_fairway_bank_line_distance(\n    self,\n    bank_data: BankData,\n    fairway_data: FairwayData,\n    simulation_data: ErosionSimulationData,\n):\n    \"\"\"Map bank data to fairway data.\n\n    Args:\n        bank_data (BankData):\n        fairway_data (FairwayData):\n        simulation_data (ErosionSimulationData):\n\n    Returns:\n        The method updates the following attributes in the `bank_data` instance\n            - fairway_face_indices\n            - fairway_distances\n        and the following attributes in the `fairway_data` instance\n            - fairway_initial_water_levels\n    \"\"\"\n    # distance fairway-bankline (bank-fairway)\n    log_text(\"bank_distance_fairway\")\n\n    num_fairway_face_ind = len(fairway_data.fairway_face_indices)\n\n    for bank_i, single_bank in enumerate(bank_data):\n        bank_coords = single_bank.bank_line_coords\n        coords_mid = (bank_coords[:-1] + bank_coords[1:]) / 2\n        bank_fairway_dist = np.zeros(len(coords_mid))\n        bp_fw_face_idx = np.zeros(len(coords_mid), dtype=int)\n\n        for ind, coord_i in enumerate(coords_mid):\n            # find closest fairway support node\n            closest_ind = np.argmin(\n                ((coord_i - fairway_data.intersection_coords) ** 2).sum(axis=1)\n            )\n            fairway_coord = fairway_data.intersection_coords[closest_ind]\n            fairway_bank_distance = ((coord_i - fairway_coord) ** 2).sum() ** 0.5\n            # If fairway support node is also the closest projected fairway point, then it likely\n            # that that point is one of the original support points (a corner) of the fairway path\n            # and located inside a grid cell. The segments before and after that point will then\n            # both be located inside that same grid cell, so let's pick the segment before the point.\n            # If the point happens to coincide with a grid edge and the two segments are located\n            # in different grid cells, then we could either simply choose one or add complexity to\n            # average the values of the two grid cells. Let's go for the simplest approach ...\n            iseg = max(closest_ind - 1, 0)\n            if closest_ind &gt; 0:\n                alpha = calculate_alpha(\n                    fairway_data.intersection_coords,\n                    closest_ind,\n                    closest_ind - 1,\n                    coord_i,\n                )\n                if 0 &lt; alpha &lt; 1:\n                    fwp1 = fairway_data.intersection_coords[\n                        closest_ind - 1\n                    ] + alpha * (\n                        fairway_data.intersection_coords[closest_ind]\n                        - fairway_data.intersection_coords[closest_ind - 1]\n                    )\n                    d1 = ((coord_i - fwp1) ** 2).sum() ** 0.5\n                    if d1 &lt; fairway_bank_distance:\n                        fairway_bank_distance = d1\n                        # projected point located on segment before, which corresponds to initial choice: iseg = ifw - 1\n            if closest_ind &lt; num_fairway_face_ind:\n                alpha = calculate_alpha(\n                    fairway_data.intersection_coords,\n                    closest_ind + 1,\n                    closest_ind,\n                    coord_i,\n                )\n                if 0 &lt; alpha &lt; 1:\n                    fwp1 = fairway_data.intersection_coords[closest_ind] + alpha * (\n                        fairway_data.intersection_coords[closest_ind + 1]\n                        - fairway_data.intersection_coords[closest_ind]\n                    )\n                    d1 = ((coord_i - fwp1) ** 2).sum() ** 0.5\n                    if d1 &lt; fairway_bank_distance:\n                        fairway_bank_distance = d1\n                        iseg = closest_ind\n\n            bp_fw_face_idx[ind] = fairway_data.fairway_face_indices[iseg]\n            bank_fairway_dist[ind] = fairway_bank_distance\n\n        if self.river_data.debug:\n            line_geom = LineGeometry(coords_mid, crs=self.config_file.crs)\n            line_geom.to_file(\n                file_name=f\"{self.river_data.output_dir}/bank_{bank_i + 1}_chainage_and_fairway_face_idx.shp\",\n                data={\n                    \"chainage\": single_bank.bank_chainage_midpoints,\n                    \"iface_fw\": bp_fw_face_idx[bank_i],\n                },\n            )\n\n        single_bank.fairway_face_indices = bp_fw_face_idx\n        single_bank.fairway_distances = bank_fairway_dist\n\n    # water level at fairway\n    water_level_fairway_ref = []\n    for single_bank in bank_data:\n        ii = single_bank.fairway_face_indices\n        water_level_fairway_ref.append(simulation_data.water_level_face[ii])\n    fairway_data.fairway_initial_water_levels = water_level_fairway_ref\n</code></pre>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.Erosion.compute_erosion_per_level","title":"<code>compute_erosion_per_level(level_i, bank_data, simulation_data, fairway_data, discharge_level_pars, erosion_inputs, km_bin, num_km, bank_height)</code>","text":"<p>Compute the bank erosion for a given level.</p> Source code in <code>src/dfastbe/bank_erosion/bank_erosion.py</code> <pre><code>def compute_erosion_per_level(\n    self,\n    level_i,\n    bank_data,\n    simulation_data,\n    fairway_data,\n    discharge_level_pars,\n    erosion_inputs,\n    km_bin,\n    num_km,\n    bank_height,\n):\n    \"\"\"Compute the bank erosion for a given level.\"\"\"\n    num_levels = self.river_data.num_discharge_levels\n    dvol_bank = np.zeros((num_km, 2))\n    hfw_max_level = 0\n    par_list = []\n    for ind, bank_i in enumerate(bank_data):\n        parameter = DischargeCalculationParameters()\n        # bank_i = 0: left bank, bank_i = 1: right bank\n        # calculate velocity along banks ...\n        parameter.bank_velocity = simulation_data.calculate_bank_velocity(\n            bank_i, self.river_data.vel_dx\n        )\n\n        if level_i == 0:\n            # determine velocity and bank height along banks ...\n            # bank height = maximum bed elevation per cell\n            bank_height.append(simulation_data.calculate_bank_height(bank_i, self.river_data.zb_dx))\n\n        # get water depth along the fair-way\n        ii_face = bank_i.fairway_face_indices\n        water_depth_fairway = simulation_data.water_depth_face[ii_face]\n        hfw_max_level = max(hfw_max_level, water_depth_fairway.max())\n\n        parameter.water_level = simulation_data.water_level_face[ii_face]\n        chez_face = simulation_data.chezy_face[ii_face]\n        parameter.chezy = 0 * chez_face + chez_face.mean()\n\n        # last discharge level\n        if level_i == num_levels - 1:\n            erosion_distance_eq, erosion_volume_eq = comp_erosion_eq(\n                bank_height[ind],\n                bank_i.segment_length,\n                fairway_data.fairway_initial_water_levels[ind],\n                discharge_level_pars.get_bank(ind),\n                bank_i.fairway_distances,\n                water_depth_fairway,\n                erosion_inputs.get_bank(ind),\n            )\n            parameter.erosion_distance_eq = erosion_distance_eq\n            parameter.erosion_volume_eq = erosion_volume_eq\n\n        parameter = compute_bank_erosion_dynamics(\n            parameter,\n            bank_height[ind],\n            bank_i.segment_length,\n            bank_i.fairway_distances,\n            fairway_data.fairway_initial_water_levels[ind],\n            discharge_level_pars.get_bank(ind),\n            self.river_data.erosion_time * self.p_discharge[level_i],\n            water_depth_fairway,\n            erosion_inputs.get_bank(ind),\n        )\n\n        # accumulate eroded volumes per km\n        volume_per_discharge = get_km_eroded_volume(\n            bank_i.bank_chainage_midpoints, parameter.erosion_volume_tot, km_bin\n        )\n        parameter.volume_per_discharge = volume_per_discharge\n        par_list.append(parameter)\n\n        dvol_bank[:, ind] += volume_per_discharge\n\n        if self.river_data.debug:\n            self._debug_output(\n                level_i,\n                ind,\n                bank_data,\n                fairway_data,\n                erosion_inputs,\n                discharge_level_pars,\n                water_depth_fairway,\n                bank_height,\n                num_levels,\n                parameter,\n            )\n\n    level_calculation = CalculationLevel(\n        left=par_list[0], right=par_list[1], hfw_max=hfw_max_level\n    )\n\n    return level_calculation, dvol_bank\n</code></pre>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.Erosion.get_ship_parameters","title":"<code>get_ship_parameters(num_stations_per_bank: List[int]) -&gt; Dict[str, List[np.ndarray]]</code>","text":"<p>Get ship parameters from the configuration file.</p> Source code in <code>src/dfastbe/bank_erosion/bank_erosion.py</code> <pre><code>def get_ship_parameters(\n    self, num_stations_per_bank: List[int]\n) -&gt; Dict[str, List[np.ndarray]]:\n    \"\"\"Get ship parameters from the configuration file.\"\"\"\n    ship_relative_velocity = self.config_file.get_parameter(\n        \"Erosion\", \"VShip\", num_stations_per_bank, positive=True, onefile=True\n    )\n    num_ships_year = self.config_file.get_parameter(\n        \"Erosion\", \"NShip\", num_stations_per_bank, positive=True, onefile=True\n    )\n    num_waves_p_ship = self.config_file.get_parameter(\n        \"Erosion\",\n        \"NWave\",\n        num_stations_per_bank,\n        default=5,\n        positive=True,\n        onefile=True,\n    )\n    ship_draught = self.config_file.get_parameter(\n        \"Erosion\", \"Draught\", num_stations_per_bank, positive=True, onefile=True\n    )\n    ship_type = self.config_file.get_parameter(\n        \"Erosion\", \"ShipType\", num_stations_per_bank, valid=[1, 2, 3], onefile=True\n    )\n    parslope0 = self.config_file.get_parameter(\n        \"Erosion\",\n        \"Slope\",\n        num_stations_per_bank,\n        default=20,\n        positive=True,\n        ext=\"slp\",\n    )\n    reed_wave_damping_coeff = self.config_file.get_parameter(\n        \"Erosion\",\n        \"Reed\",\n        num_stations_per_bank,\n        default=0,\n        positive=True,\n        ext=\"rdd\",\n    )\n\n    ship_data = {\n        \"vship0\": ship_relative_velocity,\n        \"Nship0\": num_ships_year,\n        \"nwave0\": num_waves_p_ship,\n        \"Tship0\": ship_draught,\n        \"ship0\": ship_type,\n        \"parslope0\": parslope0,\n        \"parreed0\": reed_wave_damping_coeff,\n    }\n    return ship_data\n</code></pre>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.Erosion.run","title":"<code>run() -&gt; None</code>","text":"<p>Run the bank erosion analysis for a specified configuration.</p> Source code in <code>src/dfastbe/bank_erosion/bank_erosion.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the bank erosion analysis for a specified configuration.\"\"\"\n    timed_logger(\"-- start analysis --\")\n    log_text(\n        \"header_bankerosion\",\n        data={\n            \"version\": __version__,\n            \"location\": \"https://github.com/Deltares/D-FAST_Bank_Erosion\",\n        },\n    )\n    log_text(\"-\")\n    config_file = self.config_file\n\n    log_text(\"derive_topology\")\n\n    mesh_data = self.simulation_data.compute_mesh_topology()\n    river_axis = self._process_river_axis_by_center_line()\n\n    # map to the output interval\n    km_bin = (\n        river_axis.data[\"stations\"].min(),\n        river_axis.data[\"stations\"].max(),\n        self.river_data.output_intervals,\n    )\n    km_mid = get_km_bins(km_bin, station_type=\"mid\")  # get mid-points\n\n    fairway_data = self._get_fairway_data(river_axis, mesh_data)\n\n    # map bank lines to mesh cells\n    log_text(\"intersect_bank_mesh\")\n    bank_data = self.bl_processor.intersect_with_mesh(mesh_data)\n    # map the bank data to the fairway data (the bank_data and fairway_data will be updated inside the `_map_bank_to_fairway` function)\n    self.calculate_fairway_bank_line_distance(\n        bank_data, fairway_data, self.simulation_data\n    )\n\n    num_stations_per_bank = bank_data.num_stations_per_bank\n    erosion_inputs = self._prepare_initial_conditions(\n        config_file, num_stations_per_bank, fairway_data\n    )\n\n    # initialize arrays for erosion loop over all discharges\n    water_level_data, erosion_results = self._process_discharge_levels(\n        km_mid,\n        km_bin,\n        config_file,\n        erosion_inputs,\n        bank_data,\n        fairway_data,\n    )\n\n    bankline_new_list, bankline_eq_list, xy_line_eq_list = (\n        self._postprocess_erosion_results(\n            km_bin,\n            km_mid,\n            bank_data,\n            erosion_results,\n        )\n    )\n\n    self._write_bankline_shapefiles(\n        bankline_new_list, bankline_eq_list, config_file\n    )\n    self._write_volume_outputs(erosion_results, km_mid)\n\n    # create various plots\n    erosion_plotter = ErosionPlotter(\n        self.gui,\n        self.river_data.plot_flags,\n        erosion_results,\n        bank_data,\n        water_level_data,\n        erosion_inputs,\n    )\n    erosion_plotter.plot_all(\n        river_axis.data[\"stations\"],\n        xy_line_eq_list,\n        km_mid,\n        self.river_data.output_intervals,\n        self.river_center_line_arr,\n        self.simulation_data,\n    )\n    log_text(\"end_bankerosion\")\n    timed_logger(\"-- end analysis --\")\n</code></pre>"},{"location":"api/bank_erosion.html#dfastbe.bank_erosion.bank_erosion.calculate_alpha","title":"<code>calculate_alpha(coords: np.ndarray, ind_1: int, ind_2: int, bp: Tuple[int, Any])</code>","text":"<p>Calculate the alpha value for the bank erosion model.</p> Source code in <code>src/dfastbe/bank_erosion/bank_erosion.py</code> <pre><code>def calculate_alpha(coords: np.ndarray, ind_1: int, ind_2: int, bp: Tuple[int, Any]):\n    \"\"\"Calculate the alpha value for the bank erosion model.\"\"\"\n    alpha = (\n        (coords[ind_1, 0] - coords[ind_2, 0]) * (bp[0] - coords[ind_2, 0])\n        + (coords[ind_1, 1] - coords[ind_2, 1]) * (bp[1] - coords[ind_2, 1])\n    ) / (\n        (coords[ind_1, 0] - coords[ind_2, 0]) ** 2\n        + (coords[ind_1, 1] - coords[ind_2, 1]) ** 2\n    )\n\n    return alpha\n</code></pre>"},{"location":"api/bank_lines.html","title":"bank_lines","text":""},{"location":"api/bank_lines.html#bank-lines","title":"Bank Lines","text":""},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines","title":"<code>dfastbe.bank_lines.bank_lines</code>","text":"<p>Bank line detection module.</p>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines","title":"<code>BankLines</code>","text":"<p>Bank line detection class.</p> Source code in <code>src/dfastbe/bank_lines/bank_lines.py</code> <pre><code>class BankLines:\n    \"\"\"Bank line detection class.\"\"\"\n\n    def __init__(self, config_file: ConfigFile, gui: bool = False):\n        \"\"\"Bank line initializer.\n\n        Args:\n            config_file : configparser.ConfigParser\n                Analysis configuration settings.\n            gui : bool\n                Flag indicating whether this routine is called from the GUI.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; from unittest.mock import patch\n            &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n            &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n            &gt;&gt;&gt; bank_lines = BankLines(config_file)  # doctest: +ELLIPSIS\n            N...e\n            &gt;&gt;&gt; isinstance(bank_lines, BankLines)\n            True\n\n            ```\n        \"\"\"\n        # the root_dir is used to get the FigureDir in the `_get_plotting_flags`\n        self.root_dir = config_file.root_dir\n\n        self._config_file = config_file\n        self.gui = gui\n        self.bank_output_dir = config_file.get_output_dir(\"banklines\")\n\n        # set plotting flags\n        self.plot_flags = config_file.get_plotting_flags(self.root_dir)\n        self.river_data = BankLinesRiverData(config_file)\n        self.search_lines = self.river_data.search_lines\n        self.simulation_data, self.critical_water_depth = (\n            self.river_data.simulation_data()\n        )\n\n    @property\n    def config_file(self) -&gt; ConfigFile:\n        \"\"\"ConfigFile: object containing the configuration file.\"\"\"\n        return self._config_file\n\n    @property\n    def max_river_width(self) -&gt; int:\n        \"\"\"int: Maximum river width in meters.\"\"\"\n        return MAX_RIVER_WIDTH\n\n    def detect(self) -&gt; None:\n        \"\"\"Run the bank line detection analysis for a specified configuration.\n\n        This method performs bank line detection using the provided configuration file.\n        It generates shapefiles that can be opened with GeoPandas or QGIS, and also\n        creates a plot of the detected bank lines along with the simulation data.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; import matplotlib\n            &gt;&gt;&gt; matplotlib.use('Agg')\n            &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n            &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n            &gt;&gt;&gt; bank_lines = BankLines(config_file)  # doctest: +ELLIPSIS\n            N...e\n            &gt;&gt;&gt; bank_lines.detect()\n               0...-\n\n            ```\n            In the BankDir directory specified in the .cfg, the following files are created:\n            - \"raw_detected_bankline_fragments.shp\"\n            - \"bank_areas.shp\"\n            - \"bankline_fragments_per_bank_area.shp\"\n            - \"bankfile.shp\"\n            In the FigureDir directory specified in the .cfg, the following files are created:\n            - \"1_banklinedetection.png\"\n        \"\"\"\n        config_file = self.config_file\n        river_data = self.river_data\n        timed_logger(\"-- start analysis --\")\n\n        log_text(\n            \"header_banklines\",\n            data={\n                \"version\": __version__,\n                \"location\": \"https://github.com/Deltares/D-FAST_Bank_Erosion\",\n            },\n        )\n        log_text(\"-\")\n\n        # clip the chainage path to the range of chainages of interest\n        river_center_line = river_data.river_center_line\n        station_bounds = river_center_line.station_bounds\n        river_center_line_values = river_center_line.values\n        center_line_arr = river_center_line.as_array()\n        stations_coords = center_line_arr[:, :2]\n\n        bank_areas: List[Polygon] = self.search_lines.to_polygons()\n\n        to_right = [True] * self.search_lines.size\n        for ib in range(self.search_lines.size):\n            to_right[ib] = on_right_side(\n                np.array(self.search_lines.values[ib].coords), stations_coords\n            )\n\n        log_text(\"identify_banklines\")\n        banklines = self.detect_bank_lines(\n            self.simulation_data, self.critical_water_depth, config_file\n        )\n\n        # clip the set of detected bank lines to the bank areas\n        log_text(\"simplify_banklines\")\n        bank = [None] * self.search_lines.size\n        masked_bank_lines = [None] * self.search_lines.size\n        for ib, bank_area in enumerate(bank_areas):\n            log_text(\"bank_lines\", data={\"ib\": ib + 1})\n            masked_bank_lines[ib] = self.mask(banklines, bank_area)\n            bank[ib] = sort_connect_bank_lines(\n                masked_bank_lines[ib], river_center_line_values, to_right[ib]\n            )\n\n        self.save(bank, banklines, masked_bank_lines, bank_areas, config_file)\n\n        if self.plot_flags[\"plot_data\"]:\n            bank_lines_plotter = BankLinesPlotter(\n                self.gui, self.plot_flags, config_file, self.simulation_data\n            )\n            bank_lines_plotter.plot(\n                center_line_arr,\n                self.search_lines.size,\n                bank,\n                station_bounds,\n                bank_areas,\n            )\n\n        log_text(\"end_banklines\")\n        timed_logger(\"-- stop analysis --\")\n\n    @staticmethod\n    def mask(banklines: GeoSeries, bank_area: Polygon) -&gt; MultiLineString:\n        \"\"\"\n        Clip the bank line segments to the area of interest.\n\n        Args:\n            banklines (GeoSeries):\n                Unordered set of bank line segments.\n            bank_area (Polygon):\n                A search area corresponding to one of the bank search lines.\n\n        Returns:\n            MultiLineString: Un-ordered set of bank line segments, clipped to bank area.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n            &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n            &gt;&gt;&gt; river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\n            N...e\n            &gt;&gt;&gt; bank_lines = BankLines(config_file)\n            N...e\n            &gt;&gt;&gt; simulation_data, critical_water_depth = river_data.simulation_data()\n            N...e\n            &gt;&gt;&gt; banklines = bank_lines.detect_bank_lines(simulation_data, critical_water_depth, config_file)\n            P...)\n            &gt;&gt;&gt; bank_area = bank_lines.search_lines.to_polygons()[0]\n            &gt;&gt;&gt; bank_lines.mask(banklines, bank_area)\n            &lt;MULTILINESTRING ((207830.389 392063.658, 2078...&gt;\n\n            ```\n        \"\"\"\n        # intersection returns one MultiLineString object\n        masked_bank_lines = banklines.intersection(bank_area)[0]\n\n        return masked_bank_lines\n\n    def save(\n        self,\n        bank: List[LineString],\n        banklines: GeoSeries,\n        masked_bank_lines: List[MultiLineString],\n        bank_areas: List[Polygon],\n        config_file: ConfigFile,\n    ):\n        \"\"\"Save results to files.\n\n        Args:\n            bank (List[LineString]):\n                List of bank lines.\n            banklines (GeoSeries):\n                Un-ordered set of bank line segments.\n            masked_bank_lines (List[MultiLineString]):\n                Un-ordered set of bank line segments, clipped to bank area.\n            bank_areas (List[Polygon]):\n                A search area corresponding to one of the bank search lines.\n            config_file (ConfigFile):\n                Configuration file object.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n            &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")  # doctest: +ELLIPSIS\n            &gt;&gt;&gt; bank_lines = BankLines(config_file)\n            N...e\n            &gt;&gt;&gt; bank = [LineString([(0, 0), (1, 1)])]\n            &gt;&gt;&gt; banklines = gpd.GeoSeries([LineString([(0, 0), (1, 1)])])\n            &gt;&gt;&gt; masked_bank_lines = [MultiLineString([LineString([(0, 0), (1, 1)])])]\n            &gt;&gt;&gt; bank_areas = [Polygon([(0, 0), (1, 1), (1, 0)])]\n            &gt;&gt;&gt; bank_lines.save(bank, banklines, masked_bank_lines, bank_areas, config_file)\n            No message found for save_banklines\n\n            ```\n        \"\"\"\n        bank_name = self.config_file.get_str(\"General\", \"BankFile\", \"bankfile\")\n        bank_file = self.bank_output_dir / f\"{bank_name}.shp\"\n        log_text(\"save_banklines\", data={\"file\": bank_file})\n        gpd.GeoSeries(bank, crs=config_file.crs).to_file(bank_file)\n\n        gpd.GeoSeries(masked_bank_lines, crs=config_file.crs).to_file(\n            self.bank_output_dir / f\"{BANKLINE_FRAGMENTS_PER_BANK_AREA_FILE}{EXTENSION}\"\n        )\n        banklines.to_file(\n            self.bank_output_dir / f\"{RAW_DETECTED_BANKLINE_FRAGMENTS_FILE}{EXTENSION}\"\n        )\n        gpd.GeoSeries(bank_areas, crs=config_file.crs).to_file(\n            self.bank_output_dir / f\"{BANK_AREAS_FILE}{EXTENSION}\"\n        )\n\n    @staticmethod\n    def detect_bank_lines(\n        simulation_data: BaseSimulationData,\n        critical_water_depth: float,\n        config_file: ConfigFile,\n    ) -&gt; gpd.GeoSeries:\n        \"\"\"Detect all possible bank line segments based on simulation data.\n\n        Use a critical water depth critical_water_depth as a water depth threshold for dry/wet boundary.\n\n        Args:\n            simulation_data (BaseSimulationData):\n                Simulation data: mesh, bed levels, water levels, velocities, etc.\n            critical_water_depth (float):\n                Critical water depth for determining the banks.\n\n        Returns:\n            geopandas.GeoSeries:\n                The collection of all detected bank segments in the remaining model area.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n            &gt;&gt;&gt; river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\n            N...e\n            &gt;&gt;&gt; simulation_data, critical_water_depth = river_data.simulation_data()\n            N...e\n            &gt;&gt;&gt; BankLines.detect_bank_lines(simulation_data, critical_water_depth, config_file)\n            P...\n            0    MULTILINESTRING ((207927.151 391960.747, 20792...\n            dtype: geometry\n\n            ```\n        \"\"\"\n        h_node = BankLines._calculate_water_depth(simulation_data)\n\n        wet_node = h_node &gt; critical_water_depth\n        num_wet_arr = wet_node.sum(axis=1)\n\n        lines = BankLines._generate_bank_lines(\n            simulation_data, wet_node, num_wet_arr, h_node, critical_water_depth\n        )\n        multi_line = union_all(lines)\n        merged_line = line_merge(multi_line)\n\n        return gpd.GeoSeries(merged_line, crs=config_file.crs)\n\n    @staticmethod\n    def _calculate_water_depth(\n        simulation_data: BaseSimulationData,\n    ) -&gt; Tuple[np.ndarray, np.ndarray]:\n        \"\"\"Calculate the water depth at each node in the simulation data.\n\n        This method computes the water depth for each node by considering the\n        water levels at the faces and the bed elevation values.\n\n        Args:\n            simulation_data (BaseSimulationData):\n                Simulation data containing face-node relationships, water levels,\n                and bed elevation values.\n\n        Returns:\n            np.ndarray:\n                An array representing the water depth at each node.\n        \"\"\"\n        face_node = simulation_data.face_node\n        max_num_nodes = simulation_data.face_node.shape[1]\n        num_nodes_total = len(simulation_data.x_node)\n\n        if hasattr(face_node, \"mask\"):\n            mask = ~face_node.mask\n            non_masked = sum(mask.reshape(face_node.size))\n            f_nc_m = face_node[mask]\n            zwm = np.repeat(simulation_data.water_level_face, max_num_nodes)[\n                mask.flatten()\n            ]\n        else:\n            mask = np.repeat(True, face_node.size)\n            non_masked = face_node.size\n            f_nc_m = face_node.reshape(non_masked)\n            zwm = np.repeat(simulation_data.water_level_face, max_num_nodes).reshape(\n                non_masked\n            )\n\n        zw_node = np.bincount(f_nc_m, weights=zwm, minlength=num_nodes_total)\n        num_val = np.bincount(\n            f_nc_m, weights=np.ones(non_masked), minlength=num_nodes_total\n        )\n        zw_node = zw_node / np.maximum(num_val, 1)\n        zw_node[num_val == 0] = simulation_data.bed_elevation_values[num_val == 0]\n        h_node = zw_node[face_node] - simulation_data.bed_elevation_values[face_node]\n        return h_node\n\n    @staticmethod\n    def _generate_bank_lines(\n        simulation_data: BaseSimulationData,\n        wet_node: np.ndarray,\n        num_wet_arr: np.ndarray,\n        h_node: np.ndarray,\n        critical_water_depth: float,\n    ) -&gt; List[LineString]:\n        \"\"\"Detect bank lines based on wet/dry nodes.\n\n        Args:\n            simulation_data (BaseSimulationData):\n                Simulation data: mesh, bed levels, water levels, velocities, etc.\n            wet_node (np.ndarray):\n                Wet/dry boolean array for each face node.\n            num_wet_arr (np.ndarray):\n                Number of wet nodes for each face.\n            h_node (np.ndarray):\n                Water depth at each node.\n            critical_water_depth (float):\n                Critical water depth for determining the banks.\n\n        Returns:\n            List[LineString or MultiLineString]:\n                List of detected bank lines.\n        \"\"\"\n        num_faces = len(simulation_data.face_node)\n        x_node = simulation_data.x_node[simulation_data.face_node]\n        y_node = simulation_data.y_node[simulation_data.face_node]\n        mask = num_wet_arr.mask.size &gt; 1\n        lines = []\n\n        for i in range(num_faces):\n            BankLines._progress_bar(i, num_faces)\n\n            n_wet = num_wet_arr[i]\n            n_node = simulation_data.n_nodes[i]\n            if (mask and n_wet.mask) or n_wet == 0 or n_wet == n_node:\n                continue\n\n            if n_node == 3:\n                line = tri_to_line(\n                    x_node[i], y_node[i], wet_node[i], h_node[i], critical_water_depth\n                )\n            else:\n                line = poly_to_line(\n                    n_node,\n                    x_node[i],\n                    y_node[i],\n                    wet_node[i],\n                    h_node[i],\n                    critical_water_depth,\n                )\n\n            if line is not None:\n                lines.append(line)\n\n        return lines\n\n    @staticmethod\n    def _progress_bar(current: int, total: int) -&gt; None:\n        \"\"\"Print progress bar.\n\n        Args:\n            current (int): Current iteration.\n            total (int): Total iterations.\n        \"\"\"\n        if current % 100 == 0:\n            percent = (current / total) * 100\n            print(f\"Progress: {percent:.2f}% ({current}/{total})\", end=\"\\r\")\n        if current == total - 1:\n            print(\"Progress: 100.00% (100%)\")\n</code></pre>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines.config_file","title":"<code>config_file: ConfigFile</code>  <code>property</code>","text":"<p>ConfigFile: object containing the configuration file.</p>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines.max_river_width","title":"<code>max_river_width: int</code>  <code>property</code>","text":"<p>int: Maximum river width in meters.</p>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines.__init__","title":"<code>__init__(config_file: ConfigFile, gui: bool = False)</code>","text":"<p>Bank line initializer.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <p>configparser.ConfigParser Analysis configuration settings.</p> required <code>gui</code> <p>bool Flag indicating whether this routine is called from the GUI.</p> <code>False</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from unittest.mock import patch\n&gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n&gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n&gt;&gt;&gt; bank_lines = BankLines(config_file)  # doctest: +ELLIPSIS\nN...e\n&gt;&gt;&gt; isinstance(bank_lines, BankLines)\nTrue\n</code></pre> Source code in <code>src/dfastbe/bank_lines/bank_lines.py</code> <pre><code>def __init__(self, config_file: ConfigFile, gui: bool = False):\n    \"\"\"Bank line initializer.\n\n    Args:\n        config_file : configparser.ConfigParser\n            Analysis configuration settings.\n        gui : bool\n            Flag indicating whether this routine is called from the GUI.\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; from unittest.mock import patch\n        &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n        &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n        &gt;&gt;&gt; bank_lines = BankLines(config_file)  # doctest: +ELLIPSIS\n        N...e\n        &gt;&gt;&gt; isinstance(bank_lines, BankLines)\n        True\n\n        ```\n    \"\"\"\n    # the root_dir is used to get the FigureDir in the `_get_plotting_flags`\n    self.root_dir = config_file.root_dir\n\n    self._config_file = config_file\n    self.gui = gui\n    self.bank_output_dir = config_file.get_output_dir(\"banklines\")\n\n    # set plotting flags\n    self.plot_flags = config_file.get_plotting_flags(self.root_dir)\n    self.river_data = BankLinesRiverData(config_file)\n    self.search_lines = self.river_data.search_lines\n    self.simulation_data, self.critical_water_depth = (\n        self.river_data.simulation_data()\n    )\n</code></pre>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines.detect","title":"<code>detect() -&gt; None</code>","text":"<p>Run the bank line detection analysis for a specified configuration.</p> <p>This method performs bank line detection using the provided configuration file. It generates shapefiles that can be opened with GeoPandas or QGIS, and also creates a plot of the detected bank lines along with the simulation data.</p> <p>Examples:</p> <p><pre><code>&gt;&gt;&gt; import matplotlib\n&gt;&gt;&gt; matplotlib.use('Agg')\n&gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n&gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n&gt;&gt;&gt; bank_lines = BankLines(config_file)  # doctest: +ELLIPSIS\nN...e\n&gt;&gt;&gt; bank_lines.detect()\n   0...-\n</code></pre> In the BankDir directory specified in the .cfg, the following files are created: - \"raw_detected_bankline_fragments.shp\" - \"bank_areas.shp\" - \"bankline_fragments_per_bank_area.shp\" - \"bankfile.shp\" In the FigureDir directory specified in the .cfg, the following files are created: - \"1_banklinedetection.png\"</p> Source code in <code>src/dfastbe/bank_lines/bank_lines.py</code> <pre><code>def detect(self) -&gt; None:\n    \"\"\"Run the bank line detection analysis for a specified configuration.\n\n    This method performs bank line detection using the provided configuration file.\n    It generates shapefiles that can be opened with GeoPandas or QGIS, and also\n    creates a plot of the detected bank lines along with the simulation data.\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; import matplotlib\n        &gt;&gt;&gt; matplotlib.use('Agg')\n        &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n        &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n        &gt;&gt;&gt; bank_lines = BankLines(config_file)  # doctest: +ELLIPSIS\n        N...e\n        &gt;&gt;&gt; bank_lines.detect()\n           0...-\n\n        ```\n        In the BankDir directory specified in the .cfg, the following files are created:\n        - \"raw_detected_bankline_fragments.shp\"\n        - \"bank_areas.shp\"\n        - \"bankline_fragments_per_bank_area.shp\"\n        - \"bankfile.shp\"\n        In the FigureDir directory specified in the .cfg, the following files are created:\n        - \"1_banklinedetection.png\"\n    \"\"\"\n    config_file = self.config_file\n    river_data = self.river_data\n    timed_logger(\"-- start analysis --\")\n\n    log_text(\n        \"header_banklines\",\n        data={\n            \"version\": __version__,\n            \"location\": \"https://github.com/Deltares/D-FAST_Bank_Erosion\",\n        },\n    )\n    log_text(\"-\")\n\n    # clip the chainage path to the range of chainages of interest\n    river_center_line = river_data.river_center_line\n    station_bounds = river_center_line.station_bounds\n    river_center_line_values = river_center_line.values\n    center_line_arr = river_center_line.as_array()\n    stations_coords = center_line_arr[:, :2]\n\n    bank_areas: List[Polygon] = self.search_lines.to_polygons()\n\n    to_right = [True] * self.search_lines.size\n    for ib in range(self.search_lines.size):\n        to_right[ib] = on_right_side(\n            np.array(self.search_lines.values[ib].coords), stations_coords\n        )\n\n    log_text(\"identify_banklines\")\n    banklines = self.detect_bank_lines(\n        self.simulation_data, self.critical_water_depth, config_file\n    )\n\n    # clip the set of detected bank lines to the bank areas\n    log_text(\"simplify_banklines\")\n    bank = [None] * self.search_lines.size\n    masked_bank_lines = [None] * self.search_lines.size\n    for ib, bank_area in enumerate(bank_areas):\n        log_text(\"bank_lines\", data={\"ib\": ib + 1})\n        masked_bank_lines[ib] = self.mask(banklines, bank_area)\n        bank[ib] = sort_connect_bank_lines(\n            masked_bank_lines[ib], river_center_line_values, to_right[ib]\n        )\n\n    self.save(bank, banklines, masked_bank_lines, bank_areas, config_file)\n\n    if self.plot_flags[\"plot_data\"]:\n        bank_lines_plotter = BankLinesPlotter(\n            self.gui, self.plot_flags, config_file, self.simulation_data\n        )\n        bank_lines_plotter.plot(\n            center_line_arr,\n            self.search_lines.size,\n            bank,\n            station_bounds,\n            bank_areas,\n        )\n\n    log_text(\"end_banklines\")\n    timed_logger(\"-- stop analysis --\")\n</code></pre>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines.detect_bank_lines","title":"<code>detect_bank_lines(simulation_data: BaseSimulationData, critical_water_depth: float, config_file: ConfigFile) -&gt; gpd.GeoSeries</code>  <code>staticmethod</code>","text":"<p>Detect all possible bank line segments based on simulation data.</p> <p>Use a critical water depth critical_water_depth as a water depth threshold for dry/wet boundary.</p> <p>Parameters:</p> Name Type Description Default <code>simulation_data</code> <code>BaseSimulationData</code> <p>Simulation data: mesh, bed levels, water levels, velocities, etc.</p> required <code>critical_water_depth</code> <code>float</code> <p>Critical water depth for determining the banks.</p> required <p>Returns:</p> Type Description <code>GeoSeries</code> <p>geopandas.GeoSeries: The collection of all detected bank segments in the remaining model area.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n&gt;&gt;&gt; river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\nN...e\n&gt;&gt;&gt; simulation_data, critical_water_depth = river_data.simulation_data()\nN...e\n&gt;&gt;&gt; BankLines.detect_bank_lines(simulation_data, critical_water_depth, config_file)\nP...\n0    MULTILINESTRING ((207927.151 391960.747, 20792...\ndtype: geometry\n</code></pre> Source code in <code>src/dfastbe/bank_lines/bank_lines.py</code> <pre><code>@staticmethod\ndef detect_bank_lines(\n    simulation_data: BaseSimulationData,\n    critical_water_depth: float,\n    config_file: ConfigFile,\n) -&gt; gpd.GeoSeries:\n    \"\"\"Detect all possible bank line segments based on simulation data.\n\n    Use a critical water depth critical_water_depth as a water depth threshold for dry/wet boundary.\n\n    Args:\n        simulation_data (BaseSimulationData):\n            Simulation data: mesh, bed levels, water levels, velocities, etc.\n        critical_water_depth (float):\n            Critical water depth for determining the banks.\n\n    Returns:\n        geopandas.GeoSeries:\n            The collection of all detected bank segments in the remaining model area.\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n        &gt;&gt;&gt; river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\n        N...e\n        &gt;&gt;&gt; simulation_data, critical_water_depth = river_data.simulation_data()\n        N...e\n        &gt;&gt;&gt; BankLines.detect_bank_lines(simulation_data, critical_water_depth, config_file)\n        P...\n        0    MULTILINESTRING ((207927.151 391960.747, 20792...\n        dtype: geometry\n\n        ```\n    \"\"\"\n    h_node = BankLines._calculate_water_depth(simulation_data)\n\n    wet_node = h_node &gt; critical_water_depth\n    num_wet_arr = wet_node.sum(axis=1)\n\n    lines = BankLines._generate_bank_lines(\n        simulation_data, wet_node, num_wet_arr, h_node, critical_water_depth\n    )\n    multi_line = union_all(lines)\n    merged_line = line_merge(multi_line)\n\n    return gpd.GeoSeries(merged_line, crs=config_file.crs)\n</code></pre>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines.mask","title":"<code>mask(banklines: GeoSeries, bank_area: Polygon) -&gt; MultiLineString</code>  <code>staticmethod</code>","text":"<p>Clip the bank line segments to the area of interest.</p> <p>Parameters:</p> Name Type Description Default <code>banklines</code> <code>GeoSeries</code> <p>Unordered set of bank line segments.</p> required <code>bank_area</code> <code>Polygon</code> <p>A search area corresponding to one of the bank search lines.</p> required <p>Returns:</p> Name Type Description <code>MultiLineString</code> <code>MultiLineString</code> <p>Un-ordered set of bank line segments, clipped to bank area.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n&gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n&gt;&gt;&gt; river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\nN...e\n&gt;&gt;&gt; bank_lines = BankLines(config_file)\nN...e\n&gt;&gt;&gt; simulation_data, critical_water_depth = river_data.simulation_data()\nN...e\n&gt;&gt;&gt; banklines = bank_lines.detect_bank_lines(simulation_data, critical_water_depth, config_file)\nP...)\n&gt;&gt;&gt; bank_area = bank_lines.search_lines.to_polygons()[0]\n&gt;&gt;&gt; bank_lines.mask(banklines, bank_area)\n&lt;MULTILINESTRING ((207830.389 392063.658, 2078...&gt;\n</code></pre> Source code in <code>src/dfastbe/bank_lines/bank_lines.py</code> <pre><code>@staticmethod\ndef mask(banklines: GeoSeries, bank_area: Polygon) -&gt; MultiLineString:\n    \"\"\"\n    Clip the bank line segments to the area of interest.\n\n    Args:\n        banklines (GeoSeries):\n            Unordered set of bank line segments.\n        bank_area (Polygon):\n            A search area corresponding to one of the bank search lines.\n\n    Returns:\n        MultiLineString: Un-ordered set of bank line segments, clipped to bank area.\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n        &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n        &gt;&gt;&gt; river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\n        N...e\n        &gt;&gt;&gt; bank_lines = BankLines(config_file)\n        N...e\n        &gt;&gt;&gt; simulation_data, critical_water_depth = river_data.simulation_data()\n        N...e\n        &gt;&gt;&gt; banklines = bank_lines.detect_bank_lines(simulation_data, critical_water_depth, config_file)\n        P...)\n        &gt;&gt;&gt; bank_area = bank_lines.search_lines.to_polygons()[0]\n        &gt;&gt;&gt; bank_lines.mask(banklines, bank_area)\n        &lt;MULTILINESTRING ((207830.389 392063.658, 2078...&gt;\n\n        ```\n    \"\"\"\n    # intersection returns one MultiLineString object\n    masked_bank_lines = banklines.intersection(bank_area)[0]\n\n    return masked_bank_lines\n</code></pre>"},{"location":"api/bank_lines.html#dfastbe.bank_lines.bank_lines.BankLines.save","title":"<code>save(bank: List[LineString], banklines: GeoSeries, masked_bank_lines: List[MultiLineString], bank_areas: List[Polygon], config_file: ConfigFile)</code>","text":"<p>Save results to files.</p> <p>Parameters:</p> Name Type Description Default <code>bank</code> <code>List[LineString]</code> <p>List of bank lines.</p> required <code>banklines</code> <code>GeoSeries</code> <p>Un-ordered set of bank line segments.</p> required <code>masked_bank_lines</code> <code>List[MultiLineString]</code> <p>Un-ordered set of bank line segments, clipped to bank area.</p> required <code>bank_areas</code> <code>List[Polygon]</code> <p>A search area corresponding to one of the bank search lines.</p> required <code>config_file</code> <code>ConfigFile</code> <p>Configuration file object.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n&gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")  # doctest: +ELLIPSIS\n&gt;&gt;&gt; bank_lines = BankLines(config_file)\nN...e\n&gt;&gt;&gt; bank = [LineString([(0, 0), (1, 1)])]\n&gt;&gt;&gt; banklines = gpd.GeoSeries([LineString([(0, 0), (1, 1)])])\n&gt;&gt;&gt; masked_bank_lines = [MultiLineString([LineString([(0, 0), (1, 1)])])]\n&gt;&gt;&gt; bank_areas = [Polygon([(0, 0), (1, 1), (1, 0)])]\n&gt;&gt;&gt; bank_lines.save(bank, banklines, masked_bank_lines, bank_areas, config_file)\nNo message found for save_banklines\n</code></pre> Source code in <code>src/dfastbe/bank_lines/bank_lines.py</code> <pre><code>def save(\n    self,\n    bank: List[LineString],\n    banklines: GeoSeries,\n    masked_bank_lines: List[MultiLineString],\n    bank_areas: List[Polygon],\n    config_file: ConfigFile,\n):\n    \"\"\"Save results to files.\n\n    Args:\n        bank (List[LineString]):\n            List of bank lines.\n        banklines (GeoSeries):\n            Un-ordered set of bank line segments.\n        masked_bank_lines (List[MultiLineString]):\n            Un-ordered set of bank line segments, clipped to bank area.\n        bank_areas (List[Polygon]):\n            A search area corresponding to one of the bank search lines.\n        config_file (ConfigFile):\n            Configuration file object.\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n        &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")  # doctest: +ELLIPSIS\n        &gt;&gt;&gt; bank_lines = BankLines(config_file)\n        N...e\n        &gt;&gt;&gt; bank = [LineString([(0, 0), (1, 1)])]\n        &gt;&gt;&gt; banklines = gpd.GeoSeries([LineString([(0, 0), (1, 1)])])\n        &gt;&gt;&gt; masked_bank_lines = [MultiLineString([LineString([(0, 0), (1, 1)])])]\n        &gt;&gt;&gt; bank_areas = [Polygon([(0, 0), (1, 1), (1, 0)])]\n        &gt;&gt;&gt; bank_lines.save(bank, banklines, masked_bank_lines, bank_areas, config_file)\n        No message found for save_banklines\n\n        ```\n    \"\"\"\n    bank_name = self.config_file.get_str(\"General\", \"BankFile\", \"bankfile\")\n    bank_file = self.bank_output_dir / f\"{bank_name}.shp\"\n    log_text(\"save_banklines\", data={\"file\": bank_file})\n    gpd.GeoSeries(bank, crs=config_file.crs).to_file(bank_file)\n\n    gpd.GeoSeries(masked_bank_lines, crs=config_file.crs).to_file(\n        self.bank_output_dir / f\"{BANKLINE_FRAGMENTS_PER_BANK_AREA_FILE}{EXTENSION}\"\n    )\n    banklines.to_file(\n        self.bank_output_dir / f\"{RAW_DETECTED_BANKLINE_FRAGMENTS_FILE}{EXTENSION}\"\n    )\n    gpd.GeoSeries(bank_areas, crs=config_file.crs).to_file(\n        self.bank_output_dir / f\"{BANK_AREAS_FILE}{EXTENSION}\"\n    )\n</code></pre>"},{"location":"api/bank_lines_data_models.html","title":"bank_lines_data_models","text":""},{"location":"api/bank_lines_data_models.html#bank-lines-data-models","title":"Bank Lines data models","text":""},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models","title":"<code>dfastbe.bank_lines.data_models</code>","text":""},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models.BankLinesRiverData","title":"<code>BankLinesRiverData</code>","text":"<p>               Bases: <code>BaseRiverData</code></p> Source code in <code>src/dfastbe/bank_lines/data_models.py</code> <pre><code>class BankLinesRiverData(BaseRiverData):\n\n    @property\n    def search_lines(self) -&gt; SearchLines:\n        \"\"\"Get search lines for bank lines.\n\n        Returns:\n            SearchLines:\n                Search lines for bank lines.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n            &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n            &gt;&gt;&gt; bank_lines_river_data = BankLinesRiverData(config_file)\n            No message found for read_chainage\n            No message found for clip_chainage\n            &gt;&gt;&gt; search_lines = bank_lines_river_data.search_lines\n            No message found for read_search_line\n            No message found for read_search_line\n            &gt;&gt;&gt; len(search_lines.values)\n            2\n\n            ```\n        \"\"\"\n        search_lines = SearchLines(self.config_file.get_search_lines(), self.river_center_line)\n        search_lines.d_lines = self.config_file.get_bank_search_distances(search_lines.size)\n        return search_lines\n\n    def _get_bank_lines_simulation_data(self) -&gt; Tuple[BaseSimulationData, float]:\n        \"\"\"read simulation data and drying flooding threshold dh0\n\n        Returns:\n            Tuple[BaseSimulationData, float]:\n                simulation data and critical water depth (h0).\n        \"\"\"\n        sim_file = self.config_file.get_sim_file(\"Detect\", \"\")\n        log_text(\"read_simdata\", data={\"file\": sim_file})\n        simulation_data = BaseSimulationData.read(sim_file)\n        # increase critical water depth h0 by flooding threshold dh0\n        # get critical water depth used for defining bank line (default = 0.0 m)\n        critical_water_depth = self.config_file.get_float(\n            \"Detect\", \"WaterDepth\", default=0\n        )\n        h0 = critical_water_depth + simulation_data.dry_wet_threshold\n        return simulation_data, h0\n\n    def simulation_data(self) -&gt; Tuple[BaseSimulationData, float]:\n        \"\"\"Get simulation data and critical water depth and clip to river center line.\n\n        Returns:\n            Tuple[BaseSimulationData, float]:\n                simulation data and critical water depth (h0).\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n            &gt;&gt;&gt; from unittest.mock import patch\n            &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n            &gt;&gt;&gt; bank_lines_river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\n            N...e\n            &gt;&gt;&gt; simulation_data, h0 = bank_lines_river_data.simulation_data()\n            N...e\n            &gt;&gt;&gt; h0\n            0.1\n\n            ```\n        \"\"\"\n        simulation_data, h0 = self._get_bank_lines_simulation_data()\n        # clip simulation data to boundaries ...\n        log_text(\"clip_data\")\n        simulation_data.clip(self.river_center_line.values, self.search_lines.max_distance)\n\n        return simulation_data, h0\n</code></pre>"},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models.BankLinesRiverData.search_lines","title":"<code>search_lines: SearchLines</code>  <code>property</code>","text":"<p>Get search lines for bank lines.</p> <p>Returns:</p> Name Type Description <code>SearchLines</code> <code>SearchLines</code> <p>Search lines for bank lines.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n&gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n&gt;&gt;&gt; bank_lines_river_data = BankLinesRiverData(config_file)\nNo message found for read_chainage\nNo message found for clip_chainage\n&gt;&gt;&gt; search_lines = bank_lines_river_data.search_lines\nNo message found for read_search_line\nNo message found for read_search_line\n&gt;&gt;&gt; len(search_lines.values)\n2\n</code></pre>"},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models.BankLinesRiverData.simulation_data","title":"<code>simulation_data() -&gt; Tuple[BaseSimulationData, float]</code>","text":"<p>Get simulation data and critical water depth and clip to river center line.</p> <p>Returns:</p> Type Description <code>Tuple[BaseSimulationData, float]</code> <p>Tuple[BaseSimulationData, float]: simulation data and critical water depth (h0).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n&gt;&gt;&gt; from unittest.mock import patch\n&gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n&gt;&gt;&gt; bank_lines_river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\nN...e\n&gt;&gt;&gt; simulation_data, h0 = bank_lines_river_data.simulation_data()\nN...e\n&gt;&gt;&gt; h0\n0.1\n</code></pre> Source code in <code>src/dfastbe/bank_lines/data_models.py</code> <pre><code>def simulation_data(self) -&gt; Tuple[BaseSimulationData, float]:\n    \"\"\"Get simulation data and critical water depth and clip to river center line.\n\n    Returns:\n        Tuple[BaseSimulationData, float]:\n            simulation data and critical water depth (h0).\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; from dfastbe.io.config import ConfigFile\n        &gt;&gt;&gt; from unittest.mock import patch\n        &gt;&gt;&gt; config_file = ConfigFile.read(\"tests/data/bank_lines/meuse_manual.cfg\")\n        &gt;&gt;&gt; bank_lines_river_data = BankLinesRiverData(config_file)  # doctest: +ELLIPSIS\n        N...e\n        &gt;&gt;&gt; simulation_data, h0 = bank_lines_river_data.simulation_data()\n        N...e\n        &gt;&gt;&gt; h0\n        0.1\n\n        ```\n    \"\"\"\n    simulation_data, h0 = self._get_bank_lines_simulation_data()\n    # clip simulation data to boundaries ...\n    log_text(\"clip_data\")\n    simulation_data.clip(self.river_center_line.values, self.search_lines.max_distance)\n\n    return simulation_data, h0\n</code></pre>"},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models.SearchLines","title":"<code>SearchLines</code>","text":"Source code in <code>src/dfastbe/bank_lines/data_models.py</code> <pre><code>class SearchLines:\n\n    def __init__(self, lines: List[LineString], mask: LineGeometry = None):\n        \"\"\"Search lines initialization.\n\n        Args:\n            lines (List[LineString]):\n                List of search lines.\n            mask (LineGeometry, optional):\n                Center line for masking the search lines. Defaults to None.\n        \"\"\"\n        if mask is None:\n            self.values = lines\n            self.max_distance = None\n        else:\n            self.values, self.max_distance = self.mask(lines, mask.values)\n\n        self.size = len(lines)\n\n    @property\n    def d_lines(self) -&gt; List[float]:\n        if hasattr(self, \"_d_lines\"):\n            return self._d_lines\n        else:\n            raise ValueError(\"The d_lines property has not been set yet.\")\n\n    @d_lines.setter\n    def d_lines(self, value: List[float]):\n        self._d_lines = value\n\n    @staticmethod\n    def mask(\n        search_lines: List[LineString],\n        river_center_line: LineString,\n        max_river_width: float = MAX_RIVER_WIDTH,\n    ) -&gt; Tuple[List[LineString], float]:\n        \"\"\"\n        Clip the list of lines to the envelope of a certain size surrounding a reference line.\n\n        Args:\n            search_lines (List[LineString]):\n                List of lines to be clipped.\n            river_center_line (LineString):\n                Reference line to which the search lines are clipped.\n            max_river_width: float\n                Maximum distance away from river_profile.\n\n        Returns:\n            Tuple[List[LineString], float]:\n                - List of clipped search lines.\n                - Maximum distance from any point within line to reference line.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; from shapely.geometry import LineString\n            &gt;&gt;&gt; search_lines = [LineString([(0, 0), (1, 1)]), LineString([(2, 2), (3, 3)])]\n            &gt;&gt;&gt; river_center_line = LineString([(0, 0), (2, 2)])\n            &gt;&gt;&gt; search_lines_clipped, max_distance = SearchLines.mask(search_lines, river_center_line)\n            &gt;&gt;&gt; max_distance\n            2.0\n\n            ```\n        \"\"\"\n        num = len(search_lines)\n        profile_buffer = river_center_line.buffer(max_river_width, cap_style=2)\n\n        # The algorithm uses simplified geometries for determining the distance between lines for speed.\n        # Stay accurate to within about 1 m\n        profile_simplified = river_center_line.simplify(1)\n\n        max_distance = 0\n        for ind in range(num):\n            # Clip the bank search lines to the reach of interest (indicated by the reference line).\n            search_lines[ind] = search_lines[ind].intersection(profile_buffer)\n\n            # If the bank search line breaks into multiple parts, select the part closest to the reference line.\n            if search_lines[ind].geom_type == \"MultiLineString\":\n                search_lines[ind] = SearchLines._select_closest_part(\n                    search_lines[ind], profile_simplified, max_river_width\n                )\n\n            # Determine the maximum distance from a point on this line to the reference line.\n            line_simplified = search_lines[ind].simplify(1)\n            max_distance = max(\n                [Point(c).distance(profile_simplified) for c in line_simplified.coords]\n            )\n\n            # Increase the value of max_distance by 2 to account for error introduced by using simplified lines.\n            max_distance = max(max_distance, max_distance + 2)\n\n        return search_lines, max_distance\n\n    @staticmethod\n    def _select_closest_part(\n            search_lines_segments: MultiLineString,\n            reference_line: LineString,\n            max_river_width: float,\n    ) -&gt; LineString:\n        \"\"\"Select the closest part of a MultiLineString to the reference line.\n\n        Args:\n            search_lines_segments (MultiLineString):\n                The MultiLineString containing multiple line segments to evaluate.\n            reference_line (LineString):\n                The reference line to calculate distances.\n            max_river_width (float):\n                Maximum allowable distance.\n\n        Returns:\n            LineString: The closest part of the MultiLineString.\n        \"\"\"\n        closest_part = search_lines_segments.geoms[0]\n        min_distance = max_river_width\n\n        for part in search_lines_segments.geoms:\n            simplified_part = part.simplify(1)\n            distance = simplified_part.distance(reference_line)\n            if distance &lt; min_distance:\n                min_distance = distance\n                closest_part = part\n\n        return closest_part\n\n    def to_polygons(self) -&gt; List[Polygon]:\n        \"\"\"\n        Construct a series of polygons surrounding the bank search lines.\n\n        Returns:\n            bank_areas:\n                Array containing the areas of interest surrounding the bank search lines.\n\n        Examples:\n            ```python\n            &gt;&gt;&gt; search_lines = [LineString([(0, 0), (1, 1)]), LineString([(2, 2), (3, 3)])]\n            &gt;&gt;&gt; search_lines_clipped = SearchLines(search_lines)\n            &gt;&gt;&gt; search_lines_clipped.d_lines = [10, 20]\n            &gt;&gt;&gt; bank_areas = search_lines_clipped.to_polygons()\n            &gt;&gt;&gt; len(bank_areas)\n            2\n\n            ```\n        \"\"\"\n        bank_areas = [\n            self.values[b].buffer(distance, cap_style=2)\n            for b, distance in enumerate(self.d_lines)\n        ]\n        return bank_areas\n</code></pre>"},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models.SearchLines.__init__","title":"<code>__init__(lines: List[LineString], mask: LineGeometry = None)</code>","text":"<p>Search lines initialization.</p> <p>Parameters:</p> Name Type Description Default <code>lines</code> <code>List[LineString]</code> <p>List of search lines.</p> required <code>mask</code> <code>LineGeometry</code> <p>Center line for masking the search lines. Defaults to None.</p> <code>None</code> Source code in <code>src/dfastbe/bank_lines/data_models.py</code> <pre><code>def __init__(self, lines: List[LineString], mask: LineGeometry = None):\n    \"\"\"Search lines initialization.\n\n    Args:\n        lines (List[LineString]):\n            List of search lines.\n        mask (LineGeometry, optional):\n            Center line for masking the search lines. Defaults to None.\n    \"\"\"\n    if mask is None:\n        self.values = lines\n        self.max_distance = None\n    else:\n        self.values, self.max_distance = self.mask(lines, mask.values)\n\n    self.size = len(lines)\n</code></pre>"},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models.SearchLines.mask","title":"<code>mask(search_lines: List[LineString], river_center_line: LineString, max_river_width: float = MAX_RIVER_WIDTH) -&gt; Tuple[List[LineString], float]</code>  <code>staticmethod</code>","text":"<p>Clip the list of lines to the envelope of a certain size surrounding a reference line.</p> <p>Parameters:</p> Name Type Description Default <code>search_lines</code> <code>List[LineString]</code> <p>List of lines to be clipped.</p> required <code>river_center_line</code> <code>LineString</code> <p>Reference line to which the search lines are clipped.</p> required <code>max_river_width</code> <code>float</code> <p>float Maximum distance away from river_profile.</p> <code>MAX_RIVER_WIDTH</code> <p>Returns:</p> Type Description <code>Tuple[List[LineString], float]</code> <p>Tuple[List[LineString], float]: - List of clipped search lines. - Maximum distance from any point within line to reference line.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from shapely.geometry import LineString\n&gt;&gt;&gt; search_lines = [LineString([(0, 0), (1, 1)]), LineString([(2, 2), (3, 3)])]\n&gt;&gt;&gt; river_center_line = LineString([(0, 0), (2, 2)])\n&gt;&gt;&gt; search_lines_clipped, max_distance = SearchLines.mask(search_lines, river_center_line)\n&gt;&gt;&gt; max_distance\n2.0\n</code></pre> Source code in <code>src/dfastbe/bank_lines/data_models.py</code> <pre><code>@staticmethod\ndef mask(\n    search_lines: List[LineString],\n    river_center_line: LineString,\n    max_river_width: float = MAX_RIVER_WIDTH,\n) -&gt; Tuple[List[LineString], float]:\n    \"\"\"\n    Clip the list of lines to the envelope of a certain size surrounding a reference line.\n\n    Args:\n        search_lines (List[LineString]):\n            List of lines to be clipped.\n        river_center_line (LineString):\n            Reference line to which the search lines are clipped.\n        max_river_width: float\n            Maximum distance away from river_profile.\n\n    Returns:\n        Tuple[List[LineString], float]:\n            - List of clipped search lines.\n            - Maximum distance from any point within line to reference line.\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; from shapely.geometry import LineString\n        &gt;&gt;&gt; search_lines = [LineString([(0, 0), (1, 1)]), LineString([(2, 2), (3, 3)])]\n        &gt;&gt;&gt; river_center_line = LineString([(0, 0), (2, 2)])\n        &gt;&gt;&gt; search_lines_clipped, max_distance = SearchLines.mask(search_lines, river_center_line)\n        &gt;&gt;&gt; max_distance\n        2.0\n\n        ```\n    \"\"\"\n    num = len(search_lines)\n    profile_buffer = river_center_line.buffer(max_river_width, cap_style=2)\n\n    # The algorithm uses simplified geometries for determining the distance between lines for speed.\n    # Stay accurate to within about 1 m\n    profile_simplified = river_center_line.simplify(1)\n\n    max_distance = 0\n    for ind in range(num):\n        # Clip the bank search lines to the reach of interest (indicated by the reference line).\n        search_lines[ind] = search_lines[ind].intersection(profile_buffer)\n\n        # If the bank search line breaks into multiple parts, select the part closest to the reference line.\n        if search_lines[ind].geom_type == \"MultiLineString\":\n            search_lines[ind] = SearchLines._select_closest_part(\n                search_lines[ind], profile_simplified, max_river_width\n            )\n\n        # Determine the maximum distance from a point on this line to the reference line.\n        line_simplified = search_lines[ind].simplify(1)\n        max_distance = max(\n            [Point(c).distance(profile_simplified) for c in line_simplified.coords]\n        )\n\n        # Increase the value of max_distance by 2 to account for error introduced by using simplified lines.\n        max_distance = max(max_distance, max_distance + 2)\n\n    return search_lines, max_distance\n</code></pre>"},{"location":"api/bank_lines_data_models.html#dfastbe.bank_lines.data_models.SearchLines.to_polygons","title":"<code>to_polygons() -&gt; List[Polygon]</code>","text":"<p>Construct a series of polygons surrounding the bank search lines.</p> <p>Returns:</p> Name Type Description <code>bank_areas</code> <code>List[Polygon]</code> <p>Array containing the areas of interest surrounding the bank search lines.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; search_lines = [LineString([(0, 0), (1, 1)]), LineString([(2, 2), (3, 3)])]\n&gt;&gt;&gt; search_lines_clipped = SearchLines(search_lines)\n&gt;&gt;&gt; search_lines_clipped.d_lines = [10, 20]\n&gt;&gt;&gt; bank_areas = search_lines_clipped.to_polygons()\n&gt;&gt;&gt; len(bank_areas)\n2\n</code></pre> Source code in <code>src/dfastbe/bank_lines/data_models.py</code> <pre><code>def to_polygons(self) -&gt; List[Polygon]:\n    \"\"\"\n    Construct a series of polygons surrounding the bank search lines.\n\n    Returns:\n        bank_areas:\n            Array containing the areas of interest surrounding the bank search lines.\n\n    Examples:\n        ```python\n        &gt;&gt;&gt; search_lines = [LineString([(0, 0), (1, 1)]), LineString([(2, 2), (3, 3)])]\n        &gt;&gt;&gt; search_lines_clipped = SearchLines(search_lines)\n        &gt;&gt;&gt; search_lines_clipped.d_lines = [10, 20]\n        &gt;&gt;&gt; bank_areas = search_lines_clipped.to_polygons()\n        &gt;&gt;&gt; len(bank_areas)\n        2\n\n        ```\n    \"\"\"\n    bank_areas = [\n        self.values[b].buffer(distance, cap_style=2)\n        for b, distance in enumerate(self.d_lines)\n    ]\n    return bank_areas\n</code></pre>"},{"location":"api/cmd.html","title":"cmd","text":""},{"location":"api/cmd.html#cmd_1","title":"cmd","text":""},{"location":"api/cmd.html#dfastbe.cmd","title":"<code>dfastbe.cmd</code>","text":"<p>Copyright (C) 2020 Stichting Deltares.</p> <p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation version 2.1.</p> <p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.</p> <p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, see http://www.gnu.org/licenses/.</p> <p>contact: delft3d.support@deltares.nl Stichting Deltares P.O. Box 177 2600 MH Delft, The Netherlands</p> <p>All indications and logos of, and references to, \"Delft3D\" and \"Deltares\" are registered trademarks of Stichting Deltares, and remain the property of Stichting Deltares. All rights reserved.</p> <p>INFORMATION This file is part of D-FAST Bank Erosion: https://github.com/Deltares/D-FAST_Bank_Erosion</p>"},{"location":"api/cmd.html#dfastbe.cmd.run","title":"<code>run(language: str = 'UK', run_mode: str = 'GUI', configfile: str = 'dfastbe.cfg') -&gt; None</code>","text":"<p>Initializes the language file and starts the chosen run mode.</p> <p>This function loads the appropriate language file and executes one of the available modes: 'BANKLINES', 'BANKEROSION', or 'GUI'. The default configuration file is <code>dfastbe.cfg</code>.</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>str</code> <p>Display language code. Acceptable values are 'NL' (Dutch) or 'UK' (English). Defaults to 'UK'.</p> <code>'UK'</code> <code>run_mode</code> <code>str</code> <p>Mode in which the program should run. Available options:</p> <ul> <li>'BANKLINES': Runs the bank lines processing.</li> <li>'BANKEROSION': Runs the bank erosion processing.</li> <li>'GUI': Launches the graphical user interface.</li> </ul> <p>Defaults to 'GUI'.</p> <code>'GUI'</code> <code>configfile</code> <code>str</code> <p>Path to the configuration file. Defaults to 'dfastbe.cfg'.</p> <code>'dfastbe.cfg'</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If an invalid <code>run_mode</code> is provided. The valid options are 'BANKLINES', 'BANKEROSION', or 'GUI'.</p> Example <p>Running the program with Dutch language and bank erosion mode:</p> <pre><code>run(language=\"NL\", run_mode=\"BANKEROSION\", configfile=\"custom_config.cfg\")\n</code></pre> <p>Running the program in default mode (GUI) with the English language:</p> <pre><code>run()\n</code></pre> Source code in <code>src/dfastbe/cmd.py</code> <pre><code>def run(\n    language: str = \"UK\",\n    run_mode: str = \"GUI\",\n    configfile: str = \"dfastbe.cfg\",\n) -&gt; None:\n    \"\"\"\n    Initializes the language file and starts the chosen run mode.\n\n    This function loads the appropriate language file and executes one of the\n    available modes: 'BANKLINES', 'BANKEROSION', or 'GUI'. The default configuration\n    file is `dfastbe.cfg`.\n\n    Args:\n        language (str, optional):\n            Display language code. Acceptable values are 'NL' (Dutch) or 'UK' (English).\n            Defaults to 'UK'.\n        run_mode (str, optional):\n            Mode in which the program should run. Available options:\n\n            - 'BANKLINES': Runs the bank lines processing.\n            - 'BANKEROSION': Runs the bank erosion processing.\n            - 'GUI': Launches the graphical user interface.\n\n            Defaults to 'GUI'.\n        configfile (str, optional):\n            Path to the configuration file. Defaults to 'dfastbe.cfg'.\n\n    Raises:\n        Exception: If an invalid `run_mode` is provided. The valid options are\n            'BANKLINES', 'BANKEROSION', or 'GUI'.\n\n    Example:\n        Running the program with Dutch language and bank erosion mode:\n\n        ```python\n        run(language=\"NL\", run_mode=\"BANKEROSION\", configfile=\"custom_config.cfg\")\n        ```\n\n        Running the program in default mode (GUI) with the English language:\n\n        ```python\n        run()\n        ```\n    \"\"\"\n    language = language.upper()\n    load_program_texts( LOG_DATA_DIR / f\"messages.{language}.ini\")\n    run_mode = run_mode.upper()\n\n    if run_mode == \"GUI\":\n        main(configfile)\n    else:\n        config_file = ConfigFile.read(configfile)\n\n        if run_mode == \"BANKLINES\":\n            bank_lines = BankLines(config_file)\n            bank_lines.detect()\n        elif run_mode == \"BANKEROSION\":\n            erosion = Erosion(config_file)\n            erosion.run()\n        else:\n            raise ValueError(f\"Invalid run mode {run_mode} specified. Should read 'BANKLINES', 'BANKEROSION' or 'GUI'.\")\n</code></pre>"},{"location":"api/io.html","title":"IO","text":""},{"location":"api/io.html#io_1","title":"IO","text":""},{"location":"api/io.html#dfastbe.io","title":"<code>dfastbe.io</code>","text":""},{"location":"api/kernel.html","title":"kernel","text":""},{"location":"api/kernel.html#kernel_1","title":"kernel","text":""},{"location":"api/kernel.html#dfastbe.kernel","title":"<code>dfastbe.kernel</code>","text":"<p>Copyright (C) 2020 Stichting Deltares.</p> <p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation version 2.1.</p> <p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.</p> <p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, see http://www.gnu.org/licenses/.</p> <p>contact: delft3d.support@deltares.nl Stichting Deltares P.O. Box 177 2600 MH Delft, The Netherlands</p> <p>All indications and logos of, and references to, \"Delft3D\" and \"Deltares\" are registered trademarks of Stichting Deltares, and remain the property of Stichting Deltares. All rights reserved.</p> <p>INFORMATION This file is part of D-FAST Bank Erosion: https://github.com/Deltares/D-FAST_Bank_Erosion</p>"},{"location":"api/kernel.html#dfastbe.kernel.get_zoom_extends","title":"<code>get_zoom_extends(km_min: float, km_max: float, zoom_km_step: float, bank_crds: List[np.ndarray], bank_km: List[np.ndarray]) -&gt; tuple[list[tuple[float, float]], list[tuple[float, float, float, float]]]</code>","text":"<p>Zoom.</p> <p>Parameters:</p> Name Type Description Default <code>km_min</code> <code>float</code> <p>Minimum value for the chainage range of interest.</p> required <code>km_max</code> <code>float</code> <p>Maximum value for the chainage range of interest.</p> required <code>zoom_km_step</code> <code>float</code> <p>Preferred chainage length of zoom box.</p> required <code>bank_crds</code> <code>List[ndarray]</code> <p>List of N x 2 np arrays of coordinates per bank.</p> required <code>bank_km</code> <code>List[ndarray]</code> <p>List of N np arrays of chainage values per bank.</p> required <p>Returns:</p> Name Type Description <code>station_zoom</code> <code>List[Tuple[float, float]]</code> <p>Zoom ranges for plots with chainage along x-axis.</p> <code>coords_zoom</code> <code>List[Tuple[float, float, float, float]]</code> <p>Zoom ranges for xy-plots.</p> Source code in <code>src/dfastbe/kernel.py</code> <pre><code>def get_zoom_extends(\n    km_min: float,\n    km_max: float,\n    zoom_km_step: float,\n    bank_crds: List[np.ndarray],\n    bank_km: List[np.ndarray],\n) -&gt; tuple[list[tuple[float, float]], list[tuple[float, float, float, float]]]:\n    \"\"\"Zoom.\n\n    Args:\n        km_min (float):\n            Minimum value for the chainage range of interest.\n        km_max (float):\n            Maximum value for the chainage range of interest.\n        zoom_km_step (float):\n            Preferred chainage length of zoom box.\n        bank_crds (List[np.ndarray]):\n            List of N x 2 np arrays of coordinates per bank.\n        bank_km (List[np.ndarray]):\n            List of N np arrays of chainage values per bank.\n\n    Returns:\n        station_zoom (List[Tuple[float, float]]):\n            Zoom ranges for plots with chainage along x-axis.\n        coords_zoom (List[Tuple[float, float, float, float]]):\n            Zoom ranges for xy-plots.\n    \"\"\"\n\n    zoom_km_bin = (km_min, km_max, zoom_km_step)\n    zoom_km_bnd = get_km_bins(zoom_km_bin, station_type=\"all\", adjust=True)\n    eps = 0.1 * zoom_km_step\n\n    station_zoom: List[Tuple[float, float]] = []\n    coords_zoom: List[Tuple[float, float, float, float]] = []\n    inf = float('inf')\n    for i in range(len(zoom_km_bnd) - 1):\n        km_min = zoom_km_bnd[i] - eps\n        km_max = zoom_km_bnd[i + 1] + eps\n        station_zoom.append((km_min, km_max))\n\n        x_min = inf\n        x_max = -inf\n        y_min = inf\n        y_max = -inf\n        for ib in range(len(bank_km)):\n            ind = (bank_km[ib] &gt;= km_min) &amp; (bank_km[ib] &lt;= km_max)\n            range_crds = bank_crds[ib][ind, :]\n            x = range_crds[:, 0]\n            y = range_crds[:, 1]\n            if len(x) &gt; 0:\n                x_min = min(x_min, min(x))\n                x_max = max(x_max, max(x))\n                y_min = min(y_min, min(y))\n                y_max = max(y_max, max(y))\n        coords_zoom.append((x_min, x_max, y_min, y_max))\n\n    return station_zoom, coords_zoom\n</code></pre>"},{"location":"api/plotting.html","title":"plotting","text":""},{"location":"api/plotting.html#plotting_1","title":"plotting","text":""},{"location":"api/plotting.html#dfastbe.plotting","title":"<code>dfastbe.plotting</code>","text":"<p>Copyright (C) 2020 Stichting Deltares.</p> <p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation version 2.1.</p> <p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.</p> <p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, see http://www.gnu.org/licenses/.</p> <p>contact: delft3d.support@deltares.nl Stichting Deltares P.O. Box 177 2600 MH Delft, The Netherlands</p> <p>All indications and logos of, and references to, \"Delft3D\" and \"Deltares\" are registered trademarks of Stichting Deltares, and remain the property of Stichting Deltares. All rights reserved.</p> <p>INFORMATION This file is part of D-FAST Bank Erosion: https://github.com/Deltares/D-FAST_Bank_Erosion</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot","title":"<code>BasePlot</code>","text":"Source code in <code>src/dfastbe/plotting.py</code> <pre><code>class BasePlot:\n\n    def savefig(self, fig: Figure, filename: Union[str, Path]) -&gt; None:\n        \"\"\"\n        Save a single figure to file.\n\n        Arguments\n        ---------\n        fig : matplotlib.figure.Figure\n            Figure to a be saved.\n        filename : str\n            Name of the file to be written.\n        \"\"\"\n        print(\"saving figure {file}\".format(file=filename))\n        matplotlib.pyplot.show(block=False)\n        fig.savefig(filename, dpi=300)\n\n    def setsize(self, fig: Figure) -&gt; None:\n        \"\"\"\n        Set the size of a figure.\n\n        Currently the size is hardcoded, but functionality may be extended in the\n        future.\n\n        Arguments\n        ---------\n        fig : matplotlib.figure.Figure\n            Figure to a be saved.\n        \"\"\"\n        # the size of an a3 is (16.5, 11.75)\n        # the size of an a3 is (16.5, 11.75)\n        fig.set_size_inches(11.75, 8.25)  # a4\n\n    def set_bbox(\n        self,\n        ax: Axes,\n        bbox: Tuple[float, float, float, float],\n        scale: float = 1000,\n    ) -&gt; None:\n        \"\"\"\n        Specify the bounding limits of an axes object.\n\n        Arguments\n        ---------\n        ax : matplotlib.axes.Axes\n            Axes object to be adjusted.\n        bbox : Tuple[float, float, float, float]\n            Tuple containing boundary limits (xmin, ymin, xmax, ymax); unit m.\n        scale: float\n            Indicates whether the axes are in m (1) or km (1000).\n        \"\"\"\n        ax.set_xlim(xmin=bbox[0] / scale, xmax=bbox[2] / scale)\n        ax.set_ylim(ymin=bbox[1] / scale, ymax=bbox[3] / scale)\n\n    def chainage_markers(\n        self,\n        xykm: np.ndarray,\n        ax: Axes,\n        ndec: int = 1,\n        scale: float = 1000,\n    ) -&gt; None:\n        \"\"\"\n        Add markers indicating the river chainage to a plot.\n\n        Arguments\n        ---------\n        xykm : np.ndarray\n            Array containing the x, y, and chainage; unit m for x and y, km for chainage.\n        ax : matplotlib.axes.Axes\n            Axes object in which to add the markers.\n        ndec : int\n            Number of decimals used for marks.\n        scale: float\n            Indicates whether the axes are in m (1) or km (1000).\n        \"\"\"\n        step = 10 ** (-ndec)\n        labelstr = \" {:.\" + str(ndec) + \"f}\"\n        km_rescaled = xykm[:, 2] / step\n        mask = np.isclose(np.round(km_rescaled), km_rescaled)\n        ax.plot(\n            xykm[mask, 0] / scale,\n            xykm[mask, 1] / scale,\n            linestyle=\"None\",\n            marker=\"+\",\n            color=\"k\",\n        )\n        for i in np.nonzero(mask)[0]:\n            ax.text(\n                xykm[i, 0] / scale,\n                xykm[i, 1] / scale,\n                labelstr.format(xykm[i, 2]),\n                fontsize=\"x-small\",\n                clip_on=True,\n            )\n\n    def plot_mesh(\n        self,\n        ax: Axes,\n        xe: np.ndarray,\n        ye: np.ndarray,\n        scale: float = 1000,\n    ) -&gt; None:\n        \"\"\"\n        Add a mesh to a plot.\n\n        Arguments\n        ---------\n        ax : matplotlib.axes.Axes\n            Axes object in which to add the mesh.\n        xe : np.ndarray\n            M x 2 array of begin/end x-coordinates of mesh edges.\n        ye : np.ndarray\n            M x 2 array of begin/end y-coordinates of mesh edges.\n        scale : float\n            Indicates whether the axes are in m (1) or km (1000).\n        \"\"\"\n        xe1 = xe[:, (0, 1, 1)] / scale\n        xe1[:, 2] = np.nan\n        xev = xe1.reshape((xe1.size,))\n\n        ye1 = ye[:, (0, 1, 1)] / scale\n        ye1[:, 2] = np.nan\n        yev = ye1.reshape((ye1.size,))\n\n        # to avoid OverflowError: In draw_path: Exceeded cell block limit\n        # plot the data in chunks ...\n        for i in range(0, len(xev), 3000):\n            ax.plot(\n                xev[i : i + 3000],\n                yev[i : i + 3000],\n                color=(0.5, 0.5, 0.5),\n                linewidth=0.25,\n            )\n\n    def plot_mesh_patches(\n        self,\n        ax: Axes,\n        simulation_data: BaseSimulationData,\n        minval: Optional[float] = None,\n        maxval: Optional[float] = None,\n        scale: float = 1000,\n    ) -&gt; matplotlib.collections.PolyCollection:\n        \"\"\"\n        Add a collection of patches to the plot one for every face of the mesh.\n\n        Arguments\n        ---------\n        ax : matplotlib.axes.Axes\n            Axes object in which to add the mesh.\n        minval : Optional[float]\n            Lower limit for the color scale.\n        maxval : Optional[float]\n            Upper limit for the color scale.\n        scale : float\n            Indicates whether the axes are in m (1) or km (1000).\n\n        Returns\n        -------\n        p : matplotlib.collections.PolyCollection\n            Patches object.\n        \"\"\"\n        tfn_list = []\n        tval_list = []\n        for n in range(3, max(simulation_data.n_nodes) + 1):\n            mask = simulation_data.n_nodes &gt;= n\n            fn_masked = simulation_data.face_node[mask, :]\n            tfn_list.append(fn_masked[:, (0, n - 2, n - 1)])\n            tval_list.append(simulation_data.water_depth_face[mask])\n        tfn = np.concatenate(tfn_list, axis=0)\n        tval = np.concatenate(tval_list, axis=0)\n        # cmap = matplotlib.pyplot.get_cmap('Spectral')\n        if minval is None:\n            minval = np.min(tval)\n        if maxval is None:\n            maxval = np.max(tval)\n        p = ax.tripcolor(\n            simulation_data.x_node / scale,\n            simulation_data.y_node / scale,\n            tfn,\n            facecolors=tval,\n            cmap=\"Spectral\",\n            vmin=minval,\n            vmax=maxval,\n        )\n        return p\n\n    def get_colors(self, cmap_name: str, n: int) -&gt; List[Tuple[float, float, float]]:\n        \"\"\"\n        Obtain N colors from the specified colormap.\n\n        Arguments\n        ---------\n        cmap_name : str\n            Name of the color map.\n        n : int\n            Number of colors to be returned.\n\n        Returns\n        -------\n        clrcyc : List[Tuple[float, float, float]]\n            List of colour tuplets.\n        \"\"\"\n        cmap = matplotlib.cm.get_cmap(cmap_name)\n        clrs = [cmap(i / (n - 1)) for i in range(n)]\n        return clrs\n\n    def zoom_x_and_save(\n        self,\n        fig: Figure,\n        ax: Axes,\n        figbase: Path,\n        plot_ext: str,\n        xzoom: List[Tuple[float, float]],\n    ) -&gt; None:\n        \"\"\"\n        Zoom in on subregions of the x-axis and save the figure.\n\n        Arguments\n        ---------\n        fig : matplotlib.figure.Figure\n            Figure to be processed.\n        ax : matplotlib.axes.Axes\n            Axes to be processed.\n        fig_base : str\n            Base name of the figure to be saved.\n        plot_ext : str\n            File extension of the figure to be saved.\n        xzoom : List[list[float,float]]\n            Values at which to split the x-axis.\n        \"\"\"\n        xmin, xmax = ax.get_xlim()\n        for ix, zoom in enumerate(xzoom):\n            ax.set_xlim(xmin=zoom[0], xmax=zoom[1])\n            figfile = figbase.with_name(f\"{figbase.stem}.sub{str(ix + 1)}{plot_ext}\")\n            self.savefig(fig, figfile)\n        ax.set_xlim(xmin=xmin, xmax=xmax)\n\n    def zoom_xy_and_save(\n        self,\n        fig: Figure,\n        ax: Axes,\n        figbase: Path,\n        plot_ext: str,\n        xyzoom: List[Tuple[float, float, float, float]],\n        scale: float = 1000,\n    ) -&gt; None:\n        \"\"\"\n        Zoom in on subregions in x,y-space and save the figure.\n\n        Arguments\n        ---------\n        fig : matplotlib.figure.Figure\n            Figure to be processed.\n        ax : matplotlib.axes.Axes\n            Axes to be processed.\n        fig_base : str\n            Base name of the figure to be saved.\n        plot_ext : str\n            File extension of the figure to be saved.\n        xyzoom : List[List[float, float, float, float]]\n            List of xmin, xmax, ymin, ymax values to zoom into.\n        scale: float\n            Indicates whether the axes are in m (1) or km (1000).\n        \"\"\"\n        xmin, xmax = ax.get_xlim()\n        ymin, ymax = ax.get_ylim()\n\n        dx_zoom = 0\n        xy_ratio = (ymax - ymin) / (xmax - xmin)\n        for zoom in xyzoom:\n            xmin0 = zoom[0]\n            xmax0 = zoom[1]\n            ymin0 = zoom[2]\n            ymax0 = zoom[3]\n            dx = xmax0 - xmin0\n            dy = ymax0 - ymin0\n            if dy &lt; xy_ratio * dx:\n                # x range limiting\n                dx_zoom = max(dx_zoom, dx)\n            else:\n                # y range limiting\n                dx_zoom = max(dx_zoom, dy / xy_ratio)\n        dy_zoom = dx_zoom * xy_ratio\n\n        for ix, zoom in enumerate(xyzoom):\n            x0 = (zoom[0] + zoom[1]) / 2\n            y0 = (zoom[2] + zoom[3]) / 2\n            ax.set_xlim(\n                xmin=(x0 - dx_zoom / 2) / scale, xmax=(x0 + dx_zoom / 2) / scale\n            )\n            ax.set_ylim(\n                ymin=(y0 - dy_zoom / 2) / scale, ymax=(y0 + dy_zoom / 2) / scale\n            )\n            figfile = figbase.with_name(f\"{figbase.stem}.sub{str(ix + 1)}{plot_ext}\")\n            self.savefig(fig, figfile)\n\n        ax.set_xlim(xmin=xmin, xmax=xmax)\n        ax.set_ylim(ymin=ymin, ymax=ymax)\n\n    def get_bbox(\n        self, coords: np.ndarray, buffer: float = 0.1\n    ) -&gt; Tuple[float, float, float, float]:\n        \"\"\"\n        Derive the bounding box from a line.\n        Args:\n            coords (np.ndarray):\n                An N x M array containing x- and y-coordinates as first two M entries\n            buffer : float\n                Buffer fraction surrounding the tight bounding box\n        Returns:\n            bbox (Tuple[float, float, float, float]):\n                Tuple bounding box consisting of [min x, min y, max x, max y)\n        \"\"\"\n        x = coords[:, 0]\n        y = coords[:, 1]\n        x_min = x.min()\n        y_min = y.min()\n        x_max = x.max()\n        y_max = y.max()\n        d = buffer * max(x_max - x_min, y_max - y_min)\n        bbox = (x_min - d, y_min - d, x_max + d, y_max + d)\n\n        return bbox\n\n    def set_axes_properties(\n        self,\n        ax: Axes,\n        chainage_txt: str,\n        ylabel_txt: str,\n        grid: bool,\n        title_txt: str,\n        handles: Optional[List[Any]] = None,\n        labels: Optional[List[str]] = None,\n    ) -&gt; None:\n        \"\"\"\n        Set the properties of the axes.\n\n        Args:\n            ax (Axes): The axes object to set properties for.\n            chainage_txt (str): Label for the horizontal chainage axes.\n            ylabel_txt (str): Label for the vertical axes.\n            title_txt (str): Title for the plot.\n        \"\"\"\n        ax.set_xlabel(chainage_txt)\n        ax.set_ylabel(ylabel_txt)\n        ax.grid(grid)\n        ax.set_title(title_txt)\n        if handles and labels:\n            ax.legend(handles, labels, loc=\"upper right\")\n        else:\n            ax.legend(loc=\"upper right\")\n\n    def save_plot(\n        self,\n        fig: Figure,\n        ax: Axes,\n        figure_index: int,\n        plot_name: str,\n        zoom_coords: Optional[List[Tuple[float, float, float, float]]],\n        plot_flags: Dict[str, Any],\n        zoom_xy: bool,\n    ) -&gt; int:\n        \"\"\"Save the plot to a file.\"\"\"\n        figure_index += 1\n        fig_base = Path(plot_flags['fig_dir']) / f\"{figure_index}_{plot_name}\"\n        if plot_flags[\"save_plot_zoomed\"] and zoom_xy:\n            self.zoom_xy_and_save(\n                fig, ax, fig_base, plot_flags[\"plot_ext\"], zoom_coords\n            )\n        elif plot_flags[\"save_plot_zoomed\"]:\n            self.zoom_x_and_save(fig, ax, fig_base, plot_flags[\"plot_ext\"], zoom_coords)\n        fig_path = fig_base.with_suffix(plot_flags[\"plot_ext\"])\n        self.savefig(fig, fig_path)\n        return figure_index\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.chainage_markers","title":"<code>chainage_markers(xykm: np.ndarray, ax: Axes, ndec: int = 1, scale: float = 1000) -&gt; None</code>","text":"<p>Add markers indicating the river chainage to a plot.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.chainage_markers--arguments","title":"Arguments","text":"<p>xykm : np.ndarray     Array containing the x, y, and chainage; unit m for x and y, km for chainage. ax : matplotlib.axes.Axes     Axes object in which to add the markers. ndec : int     Number of decimals used for marks. scale: float     Indicates whether the axes are in m (1) or km (1000).</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def chainage_markers(\n    self,\n    xykm: np.ndarray,\n    ax: Axes,\n    ndec: int = 1,\n    scale: float = 1000,\n) -&gt; None:\n    \"\"\"\n    Add markers indicating the river chainage to a plot.\n\n    Arguments\n    ---------\n    xykm : np.ndarray\n        Array containing the x, y, and chainage; unit m for x and y, km for chainage.\n    ax : matplotlib.axes.Axes\n        Axes object in which to add the markers.\n    ndec : int\n        Number of decimals used for marks.\n    scale: float\n        Indicates whether the axes are in m (1) or km (1000).\n    \"\"\"\n    step = 10 ** (-ndec)\n    labelstr = \" {:.\" + str(ndec) + \"f}\"\n    km_rescaled = xykm[:, 2] / step\n    mask = np.isclose(np.round(km_rescaled), km_rescaled)\n    ax.plot(\n        xykm[mask, 0] / scale,\n        xykm[mask, 1] / scale,\n        linestyle=\"None\",\n        marker=\"+\",\n        color=\"k\",\n    )\n    for i in np.nonzero(mask)[0]:\n        ax.text(\n            xykm[i, 0] / scale,\n            xykm[i, 1] / scale,\n            labelstr.format(xykm[i, 2]),\n            fontsize=\"x-small\",\n            clip_on=True,\n        )\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.get_bbox","title":"<code>get_bbox(coords: np.ndarray, buffer: float = 0.1) -&gt; Tuple[float, float, float, float]</code>","text":"<p>Derive the bounding box from a line. Args:     coords (np.ndarray):         An N x M array containing x- and y-coordinates as first two M entries     buffer : float         Buffer fraction surrounding the tight bounding box Returns:     bbox (Tuple[float, float, float, float]):         Tuple bounding box consisting of [min x, min y, max x, max y)</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def get_bbox(\n    self, coords: np.ndarray, buffer: float = 0.1\n) -&gt; Tuple[float, float, float, float]:\n    \"\"\"\n    Derive the bounding box from a line.\n    Args:\n        coords (np.ndarray):\n            An N x M array containing x- and y-coordinates as first two M entries\n        buffer : float\n            Buffer fraction surrounding the tight bounding box\n    Returns:\n        bbox (Tuple[float, float, float, float]):\n            Tuple bounding box consisting of [min x, min y, max x, max y)\n    \"\"\"\n    x = coords[:, 0]\n    y = coords[:, 1]\n    x_min = x.min()\n    y_min = y.min()\n    x_max = x.max()\n    y_max = y.max()\n    d = buffer * max(x_max - x_min, y_max - y_min)\n    bbox = (x_min - d, y_min - d, x_max + d, y_max + d)\n\n    return bbox\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.get_colors","title":"<code>get_colors(cmap_name: str, n: int) -&gt; List[Tuple[float, float, float]]</code>","text":"<p>Obtain N colors from the specified colormap.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.get_colors--arguments","title":"Arguments","text":"<p>cmap_name : str     Name of the color map. n : int     Number of colors to be returned.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.get_colors--returns","title":"Returns","text":"<p>clrcyc : List[Tuple[float, float, float]]     List of colour tuplets.</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def get_colors(self, cmap_name: str, n: int) -&gt; List[Tuple[float, float, float]]:\n    \"\"\"\n    Obtain N colors from the specified colormap.\n\n    Arguments\n    ---------\n    cmap_name : str\n        Name of the color map.\n    n : int\n        Number of colors to be returned.\n\n    Returns\n    -------\n    clrcyc : List[Tuple[float, float, float]]\n        List of colour tuplets.\n    \"\"\"\n    cmap = matplotlib.cm.get_cmap(cmap_name)\n    clrs = [cmap(i / (n - 1)) for i in range(n)]\n    return clrs\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.plot_mesh","title":"<code>plot_mesh(ax: Axes, xe: np.ndarray, ye: np.ndarray, scale: float = 1000) -&gt; None</code>","text":"<p>Add a mesh to a plot.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.plot_mesh--arguments","title":"Arguments","text":"<p>ax : matplotlib.axes.Axes     Axes object in which to add the mesh. xe : np.ndarray     M x 2 array of begin/end x-coordinates of mesh edges. ye : np.ndarray     M x 2 array of begin/end y-coordinates of mesh edges. scale : float     Indicates whether the axes are in m (1) or km (1000).</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def plot_mesh(\n    self,\n    ax: Axes,\n    xe: np.ndarray,\n    ye: np.ndarray,\n    scale: float = 1000,\n) -&gt; None:\n    \"\"\"\n    Add a mesh to a plot.\n\n    Arguments\n    ---------\n    ax : matplotlib.axes.Axes\n        Axes object in which to add the mesh.\n    xe : np.ndarray\n        M x 2 array of begin/end x-coordinates of mesh edges.\n    ye : np.ndarray\n        M x 2 array of begin/end y-coordinates of mesh edges.\n    scale : float\n        Indicates whether the axes are in m (1) or km (1000).\n    \"\"\"\n    xe1 = xe[:, (0, 1, 1)] / scale\n    xe1[:, 2] = np.nan\n    xev = xe1.reshape((xe1.size,))\n\n    ye1 = ye[:, (0, 1, 1)] / scale\n    ye1[:, 2] = np.nan\n    yev = ye1.reshape((ye1.size,))\n\n    # to avoid OverflowError: In draw_path: Exceeded cell block limit\n    # plot the data in chunks ...\n    for i in range(0, len(xev), 3000):\n        ax.plot(\n            xev[i : i + 3000],\n            yev[i : i + 3000],\n            color=(0.5, 0.5, 0.5),\n            linewidth=0.25,\n        )\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.plot_mesh_patches","title":"<code>plot_mesh_patches(ax: Axes, simulation_data: BaseSimulationData, minval: Optional[float] = None, maxval: Optional[float] = None, scale: float = 1000) -&gt; matplotlib.collections.PolyCollection</code>","text":"<p>Add a collection of patches to the plot one for every face of the mesh.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.plot_mesh_patches--arguments","title":"Arguments","text":"<p>ax : matplotlib.axes.Axes     Axes object in which to add the mesh. minval : Optional[float]     Lower limit for the color scale. maxval : Optional[float]     Upper limit for the color scale. scale : float     Indicates whether the axes are in m (1) or km (1000).</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.plot_mesh_patches--returns","title":"Returns","text":"<p>p : matplotlib.collections.PolyCollection     Patches object.</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def plot_mesh_patches(\n    self,\n    ax: Axes,\n    simulation_data: BaseSimulationData,\n    minval: Optional[float] = None,\n    maxval: Optional[float] = None,\n    scale: float = 1000,\n) -&gt; matplotlib.collections.PolyCollection:\n    \"\"\"\n    Add a collection of patches to the plot one for every face of the mesh.\n\n    Arguments\n    ---------\n    ax : matplotlib.axes.Axes\n        Axes object in which to add the mesh.\n    minval : Optional[float]\n        Lower limit for the color scale.\n    maxval : Optional[float]\n        Upper limit for the color scale.\n    scale : float\n        Indicates whether the axes are in m (1) or km (1000).\n\n    Returns\n    -------\n    p : matplotlib.collections.PolyCollection\n        Patches object.\n    \"\"\"\n    tfn_list = []\n    tval_list = []\n    for n in range(3, max(simulation_data.n_nodes) + 1):\n        mask = simulation_data.n_nodes &gt;= n\n        fn_masked = simulation_data.face_node[mask, :]\n        tfn_list.append(fn_masked[:, (0, n - 2, n - 1)])\n        tval_list.append(simulation_data.water_depth_face[mask])\n    tfn = np.concatenate(tfn_list, axis=0)\n    tval = np.concatenate(tval_list, axis=0)\n    # cmap = matplotlib.pyplot.get_cmap('Spectral')\n    if minval is None:\n        minval = np.min(tval)\n    if maxval is None:\n        maxval = np.max(tval)\n    p = ax.tripcolor(\n        simulation_data.x_node / scale,\n        simulation_data.y_node / scale,\n        tfn,\n        facecolors=tval,\n        cmap=\"Spectral\",\n        vmin=minval,\n        vmax=maxval,\n    )\n    return p\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.save_plot","title":"<code>save_plot(fig: Figure, ax: Axes, figure_index: int, plot_name: str, zoom_coords: Optional[List[Tuple[float, float, float, float]]], plot_flags: Dict[str, Any], zoom_xy: bool) -&gt; int</code>","text":"<p>Save the plot to a file.</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def save_plot(\n    self,\n    fig: Figure,\n    ax: Axes,\n    figure_index: int,\n    plot_name: str,\n    zoom_coords: Optional[List[Tuple[float, float, float, float]]],\n    plot_flags: Dict[str, Any],\n    zoom_xy: bool,\n) -&gt; int:\n    \"\"\"Save the plot to a file.\"\"\"\n    figure_index += 1\n    fig_base = Path(plot_flags['fig_dir']) / f\"{figure_index}_{plot_name}\"\n    if plot_flags[\"save_plot_zoomed\"] and zoom_xy:\n        self.zoom_xy_and_save(\n            fig, ax, fig_base, plot_flags[\"plot_ext\"], zoom_coords\n        )\n    elif plot_flags[\"save_plot_zoomed\"]:\n        self.zoom_x_and_save(fig, ax, fig_base, plot_flags[\"plot_ext\"], zoom_coords)\n    fig_path = fig_base.with_suffix(plot_flags[\"plot_ext\"])\n    self.savefig(fig, fig_path)\n    return figure_index\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.savefig","title":"<code>savefig(fig: Figure, filename: Union[str, Path]) -&gt; None</code>","text":"<p>Save a single figure to file.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.savefig--arguments","title":"Arguments","text":"<p>fig : matplotlib.figure.Figure     Figure to a be saved. filename : str     Name of the file to be written.</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def savefig(self, fig: Figure, filename: Union[str, Path]) -&gt; None:\n    \"\"\"\n    Save a single figure to file.\n\n    Arguments\n    ---------\n    fig : matplotlib.figure.Figure\n        Figure to a be saved.\n    filename : str\n        Name of the file to be written.\n    \"\"\"\n    print(\"saving figure {file}\".format(file=filename))\n    matplotlib.pyplot.show(block=False)\n    fig.savefig(filename, dpi=300)\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.set_axes_properties","title":"<code>set_axes_properties(ax: Axes, chainage_txt: str, ylabel_txt: str, grid: bool, title_txt: str, handles: Optional[List[Any]] = None, labels: Optional[List[str]] = None) -&gt; None</code>","text":"<p>Set the properties of the axes.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The axes object to set properties for.</p> required <code>chainage_txt</code> <code>str</code> <p>Label for the horizontal chainage axes.</p> required <code>ylabel_txt</code> <code>str</code> <p>Label for the vertical axes.</p> required <code>title_txt</code> <code>str</code> <p>Title for the plot.</p> required Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def set_axes_properties(\n    self,\n    ax: Axes,\n    chainage_txt: str,\n    ylabel_txt: str,\n    grid: bool,\n    title_txt: str,\n    handles: Optional[List[Any]] = None,\n    labels: Optional[List[str]] = None,\n) -&gt; None:\n    \"\"\"\n    Set the properties of the axes.\n\n    Args:\n        ax (Axes): The axes object to set properties for.\n        chainage_txt (str): Label for the horizontal chainage axes.\n        ylabel_txt (str): Label for the vertical axes.\n        title_txt (str): Title for the plot.\n    \"\"\"\n    ax.set_xlabel(chainage_txt)\n    ax.set_ylabel(ylabel_txt)\n    ax.grid(grid)\n    ax.set_title(title_txt)\n    if handles and labels:\n        ax.legend(handles, labels, loc=\"upper right\")\n    else:\n        ax.legend(loc=\"upper right\")\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.set_bbox","title":"<code>set_bbox(ax: Axes, bbox: Tuple[float, float, float, float], scale: float = 1000) -&gt; None</code>","text":"<p>Specify the bounding limits of an axes object.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.set_bbox--arguments","title":"Arguments","text":"<p>ax : matplotlib.axes.Axes     Axes object to be adjusted. bbox : Tuple[float, float, float, float]     Tuple containing boundary limits (xmin, ymin, xmax, ymax); unit m. scale: float     Indicates whether the axes are in m (1) or km (1000).</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def set_bbox(\n    self,\n    ax: Axes,\n    bbox: Tuple[float, float, float, float],\n    scale: float = 1000,\n) -&gt; None:\n    \"\"\"\n    Specify the bounding limits of an axes object.\n\n    Arguments\n    ---------\n    ax : matplotlib.axes.Axes\n        Axes object to be adjusted.\n    bbox : Tuple[float, float, float, float]\n        Tuple containing boundary limits (xmin, ymin, xmax, ymax); unit m.\n    scale: float\n        Indicates whether the axes are in m (1) or km (1000).\n    \"\"\"\n    ax.set_xlim(xmin=bbox[0] / scale, xmax=bbox[2] / scale)\n    ax.set_ylim(ymin=bbox[1] / scale, ymax=bbox[3] / scale)\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.setsize","title":"<code>setsize(fig: Figure) -&gt; None</code>","text":"<p>Set the size of a figure.</p> <p>Currently the size is hardcoded, but functionality may be extended in the future.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.setsize--arguments","title":"Arguments","text":"<p>fig : matplotlib.figure.Figure     Figure to a be saved.</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def setsize(self, fig: Figure) -&gt; None:\n    \"\"\"\n    Set the size of a figure.\n\n    Currently the size is hardcoded, but functionality may be extended in the\n    future.\n\n    Arguments\n    ---------\n    fig : matplotlib.figure.Figure\n        Figure to a be saved.\n    \"\"\"\n    # the size of an a3 is (16.5, 11.75)\n    # the size of an a3 is (16.5, 11.75)\n    fig.set_size_inches(11.75, 8.25)  # a4\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.zoom_x_and_save","title":"<code>zoom_x_and_save(fig: Figure, ax: Axes, figbase: Path, plot_ext: str, xzoom: List[Tuple[float, float]]) -&gt; None</code>","text":"<p>Zoom in on subregions of the x-axis and save the figure.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.zoom_x_and_save--arguments","title":"Arguments","text":"<p>fig : matplotlib.figure.Figure     Figure to be processed. ax : matplotlib.axes.Axes     Axes to be processed. fig_base : str     Base name of the figure to be saved. plot_ext : str     File extension of the figure to be saved. xzoom : List[list[float,float]]     Values at which to split the x-axis.</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def zoom_x_and_save(\n    self,\n    fig: Figure,\n    ax: Axes,\n    figbase: Path,\n    plot_ext: str,\n    xzoom: List[Tuple[float, float]],\n) -&gt; None:\n    \"\"\"\n    Zoom in on subregions of the x-axis and save the figure.\n\n    Arguments\n    ---------\n    fig : matplotlib.figure.Figure\n        Figure to be processed.\n    ax : matplotlib.axes.Axes\n        Axes to be processed.\n    fig_base : str\n        Base name of the figure to be saved.\n    plot_ext : str\n        File extension of the figure to be saved.\n    xzoom : List[list[float,float]]\n        Values at which to split the x-axis.\n    \"\"\"\n    xmin, xmax = ax.get_xlim()\n    for ix, zoom in enumerate(xzoom):\n        ax.set_xlim(xmin=zoom[0], xmax=zoom[1])\n        figfile = figbase.with_name(f\"{figbase.stem}.sub{str(ix + 1)}{plot_ext}\")\n        self.savefig(fig, figfile)\n    ax.set_xlim(xmin=xmin, xmax=xmax)\n</code></pre>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.zoom_xy_and_save","title":"<code>zoom_xy_and_save(fig: Figure, ax: Axes, figbase: Path, plot_ext: str, xyzoom: List[Tuple[float, float, float, float]], scale: float = 1000) -&gt; None</code>","text":"<p>Zoom in on subregions in x,y-space and save the figure.</p>"},{"location":"api/plotting.html#dfastbe.plotting.BasePlot.zoom_xy_and_save--arguments","title":"Arguments","text":"<p>fig : matplotlib.figure.Figure     Figure to be processed. ax : matplotlib.axes.Axes     Axes to be processed. fig_base : str     Base name of the figure to be saved. plot_ext : str     File extension of the figure to be saved. xyzoom : List[List[float, float, float, float]]     List of xmin, xmax, ymin, ymax values to zoom into. scale: float     Indicates whether the axes are in m (1) or km (1000).</p> Source code in <code>src/dfastbe/plotting.py</code> <pre><code>def zoom_xy_and_save(\n    self,\n    fig: Figure,\n    ax: Axes,\n    figbase: Path,\n    plot_ext: str,\n    xyzoom: List[Tuple[float, float, float, float]],\n    scale: float = 1000,\n) -&gt; None:\n    \"\"\"\n    Zoom in on subregions in x,y-space and save the figure.\n\n    Arguments\n    ---------\n    fig : matplotlib.figure.Figure\n        Figure to be processed.\n    ax : matplotlib.axes.Axes\n        Axes to be processed.\n    fig_base : str\n        Base name of the figure to be saved.\n    plot_ext : str\n        File extension of the figure to be saved.\n    xyzoom : List[List[float, float, float, float]]\n        List of xmin, xmax, ymin, ymax values to zoom into.\n    scale: float\n        Indicates whether the axes are in m (1) or km (1000).\n    \"\"\"\n    xmin, xmax = ax.get_xlim()\n    ymin, ymax = ax.get_ylim()\n\n    dx_zoom = 0\n    xy_ratio = (ymax - ymin) / (xmax - xmin)\n    for zoom in xyzoom:\n        xmin0 = zoom[0]\n        xmax0 = zoom[1]\n        ymin0 = zoom[2]\n        ymax0 = zoom[3]\n        dx = xmax0 - xmin0\n        dy = ymax0 - ymin0\n        if dy &lt; xy_ratio * dx:\n            # x range limiting\n            dx_zoom = max(dx_zoom, dx)\n        else:\n            # y range limiting\n            dx_zoom = max(dx_zoom, dy / xy_ratio)\n    dy_zoom = dx_zoom * xy_ratio\n\n    for ix, zoom in enumerate(xyzoom):\n        x0 = (zoom[0] + zoom[1]) / 2\n        y0 = (zoom[2] + zoom[3]) / 2\n        ax.set_xlim(\n            xmin=(x0 - dx_zoom / 2) / scale, xmax=(x0 + dx_zoom / 2) / scale\n        )\n        ax.set_ylim(\n            ymin=(y0 - dy_zoom / 2) / scale, ymax=(y0 + dy_zoom / 2) / scale\n        )\n        figfile = figbase.with_name(f\"{figbase.stem}.sub{str(ix + 1)}{plot_ext}\")\n        self.savefig(fig, figfile)\n\n    ax.set_xlim(xmin=xmin, xmax=xmax)\n    ax.set_ylim(ymin=ymin, ymax=ymax)\n</code></pre>"},{"location":"architecture-design/main-components.html","title":"D-FAST Bank Erosion Architecture and Design","text":""},{"location":"architecture-design/main-components.html#repository-structure","title":"repository structure","text":"<pre><code>D-FAST_Bank_Erosion/\n\u251c\u2500\u2500\u2500.github\n\u2502   \u251c\u2500\u2500\u2500ISSUE_TEMPLATE\n\u2502   \u2514\u2500\u2500\u2500workflows\n\u251c\u2500\u2500\u2500docs\n\u2502   \u251c\u2500\u2500\u2500end-user-docs\n\u2502   \u2502   \u251c\u2500\u2500\u2500chapters\n\u2502   \u2502   \u251c\u2500\u2500\u2500cover\n\u2502   \u2502   \u2514\u2500\u2500\u2500figures\n\u2502   \u2514\u2500\u2500\u2500mkdocs\n\u2502       \u251c\u2500\u2500\u2500api\n\u2502       \u251c\u2500\u2500\u2500gui\n\u2502       \u2514\u2500\u2500\u2500guides\n\u251c\u2500\u2500\u2500examples\n\u2502   \u2514\u2500\u2500\u2500data\n\u251c\u2500\u2500\u2500src\n\u2502   \u2514\u2500\u2500\u2500dfastbe\n\u2502       \u2502   add.png\n\u2502       \u2502   bank_erosion.py\n\u2502       \u2502   bank_lines.py\n\u2502       \u2502   cmd.py\n\u2502       \u2502   D-FASTBE.png\n\u2502       \u2502   edit.png\n\u2502       \u2502   gui.py\n\u2502       \u2502   io.py\n\u2502       \u2502   io.py~\n\u2502       \u2502   kernel.py\n\u2502       \u2502   messages.NL.ini\n\u2502       \u2502   messages.UK.ini\n\u2502       \u2502   open.png\n\u2502       \u2502   plotting.py\n\u2502       \u2502   remove.png\n\u2502       \u2502   src.pyproj\n\u2502       \u2502   support.py\n\u2502       \u2502   utils.py\n\u2502       \u2502   __init__.py\n\u2502       \u2514\u2500\u2500\u2500__main__.py\n\u251c\u2500\u2500\u2500tests\n\u251c\u2500\u2500\u2500tests-dist\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 license.md\n</code></pre>"},{"location":"architecture-design/main-components.html#workflow-and-how-modules-interact","title":"Workflow and how modules interact:","text":"<pre><code>flowchart TD\n    subgraph CLI\n        main[\"__main__.py\"]\n    end\n\n    subgraph GUI\n        gui[\"gui.py\"]\n    end\n\n    subgraph Core\n        cmd[\"cmd.py\"]\n        bank_erosion[\"bank_erosion.py\"]\n        bank_lines[\"bank_lines.py\"]\n        kernel[\"kernel.py\"]\n    end\n\n    subgraph Data\n        io[\"io.py\"]\n        support[\"support.py\"]\n        utils[\"utils.py\"]\n    end\n\n    subgraph Plotting\n        plotting[\"plotting.py\"]\n    end\n\n    main --&gt; cmd\n    cmd --&gt;|parses config| io\n    cmd --&gt;|calculate erosion| bank_erosion\n    cmd --&gt;|starts analysis/Detect banks| bank_lines\n    gui --&gt; cmd\n    gui --&gt; bank_erosion\n    gui --&gt; io\n    bank_erosion --&gt; kernel\n    bank_erosion --&gt; io\n    bank_erosion --&gt; support\n    bank_erosion --&gt; plotting\n    bank_erosion --&gt; utils\n\n    kernel --&gt; support\n    kernel --&gt; utils\n\n    bank_lines --&gt; support\n    bank_lines --&gt; utils\n    bank_lines --&gt; io\n    bank_lines --&gt; plotting\n    bank_lines --&gt; kernel\n    bank_lines --&gt; utils\n\n    plotting --&gt; io\n    plotting --&gt; support\n    plotting --&gt; utils\n</code></pre> <pre><code>graph TD\n    subgraph Presentation_Layer\n        GUI[gui.py]\n        CLI[cmd.py &amp; __main__.py]\n    end\n\n    subgraph Application_Layer\n        AppLogic[bank_erosion.py]\n    end\n\n    subgraph Domain_Logic_Layer\n        Kernel[kernel.py]\n        BankDetection[bank_lines.py]\n    end\n\n    subgraph Data_Access_Layer\n        IO[io.py]\n        Support[support.py]\n        Utils[utils.py]\n    end\n\n    subgraph Config_Layer\n        ConfigManager[\"ConfigFile / RiverData\"]\n    end\n\n    CLI --&gt; AppLogic\n    GUI --&gt; AppLogic\n\n    AppLogic --&gt; Kernel\n    AppLogic --&gt; BankDetection\n    AppLogic --&gt; IO\n    AppLogic --&gt; Utils\n    AppLogic --&gt; Support\n    AppLogic --&gt; ConfigManager\n\n    Kernel --&gt; Support\n    BankDetection --&gt; Support\n    BankDetection --&gt; Utils\n    IO --&gt; ConfigManager</code></pre>"},{"location":"gui/gui.html","title":"gui","text":""},{"location":"gui/gui.html#gui_1","title":"gui","text":""},{"location":"gui/gui.html#dfastbe.gui.gui","title":"<code>dfastbe.gui.gui</code>","text":"<p>Copyright (C) 2020 Stichting Deltares.</p> <p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation version 2.1.</p> <p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.</p> <p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, see http://www.gnu.org/licenses/.</p> <p>contact: delft3d.support@deltares.nl Stichting Deltares P.O. Box 177 2600 MH Delft, The Netherlands</p> <p>All indications and logos of, and references to, \"Delft3D\" and \"Deltares\" are registered trademarks of Stichting Deltares, and remain the property of Stichting Deltares. All rights reserved.</p> <p>INFORMATION This file is part of D-FAST Bank Erosion: https://github.com/Deltares/D-FAST_Bank_Erosion</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.activate_dialog","title":"<code>activate_dialog() -&gt; None</code>","text":"<p>Activate the user interface and run the program.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.activate_dialog--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def activate_dialog() -&gt; None:\n    \"\"\"\n    Activate the user interface and run the program.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    app = dialog[\"application\"]\n    win = dialog[\"window\"]\n    win.show()\n    sys.exit(app.exec_())\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addAnItem","title":"<code>addAnItem(key: str) -&gt; None</code>","text":"<p>Implements the actions for the add item button.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addAnItem--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addAnItem(key: str) -&gt; None:\n    \"\"\"\n    Implements the actions for the add item button.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    \"\"\"\n    nItems = dialog[key].invisibleRootItem().childCount()\n    i = nItems + 1\n    istr = str(i)\n    if key == \"searchLines\":\n        fileName, dist = editASearchLine(key, istr)\n        c1 = QtWidgets.QTreeWidgetItem(dialog[\"searchLines\"], [istr, fileName, dist])\n    elif key == \"discharges\":\n        prob = str(1 / (nItems + 1))\n        fileName, prob = editADischarge(key, istr, prob=prob)\n        c1 = QtWidgets.QTreeWidgetItem(dialog[\"discharges\"], [istr, fileName, prob])\n        addTabForLevel(istr)\n        dialog[\"refLevel\"].validator().setTop(i)\n    dialog[key + \"Edit\"].setEnabled(True)\n    dialog[key + \"Remove\"].setEnabled(True)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addBankTab","title":"<code>addBankTab(tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow) -&gt; None</code>","text":"<p>Create the tab for the general bank properties.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addBankTab--arguments","title":"Arguments","text":"<p>tabs : PyQt5.QtWidgets.QTabWidget     Tabs object to which the tab should be added. win : PyQt5.QtWidgets.QMainWindow     The window object in which the tab item is located.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addBankTab(\n    tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow\n) -&gt; None:\n    \"\"\"\n    Create the tab for the general bank properties.\n\n    Arguments\n    ---------\n    tabs : PyQt5.QtWidgets.QTabWidget\n        Tabs object to which the tab should be added.\n    win : PyQt5.QtWidgets.QMainWindow\n        The window object in which the tab item is located.\n    \"\"\"\n    eParamsWidget = QtWidgets.QWidget()\n    eParamsLayout = QtWidgets.QGridLayout(eParamsWidget)\n    tabs.addTab(eParamsWidget, \"Bank Parameters\")\n\n    strength = QtWidgets.QLabel(\"Strength Parameter\")\n    eParamsLayout.addWidget(strength, 0, 0)\n    strengthPar = QtWidgets.QComboBox()\n    strengthPar.addItems((\"Bank Type\", \"Critical Shear Stress\"))\n    strengthPar.currentIndexChanged.connect(bankStrengthSwitch)\n    dialog[\"strengthPar\"] = strengthPar\n    eParamsLayout.addWidget(strengthPar, 0, 1, 1, 2)\n\n    generalParLayout(\n        eParamsLayout,\n        1,\n        \"bankType\",\n        \"Bank Type\",\n        selectList=[\n            \"0 (Beschermde oeverlijn)\",\n            \"1 (Begroeide oeverlijn)\",\n            \"2 (Goede klei)\",\n            \"3 (Matig / slechte klei)\",\n            \"4 (Zand)\",\n        ],\n    )\n    generalParLayout(eParamsLayout, 3, \"bankShear\", \"Critical Shear Stress [N/m2]\")\n    bankStrengthSwitch()\n    generalParLayout(eParamsLayout, 4, \"bankProtect\", \"Protection [m]\")\n    generalParLayout(eParamsLayout, 5, \"bankSlope\", \"Slope [-]\")\n    generalParLayout(eParamsLayout, 6, \"bankReed\", \"Reed [-]\")\n\n    addFilter(eParamsLayout, 7, \"velFilter\", \"Velocity Filter [km]\")\n    addFilter(eParamsLayout, 8, \"bedFilter\", \"Bank Elevation Filter [km]\")\n\n    stretch = QtWidgets.QSpacerItem(10, 10, 13, 7)\n    eParamsLayout.addItem(stretch, 9, 0)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addCheckBox","title":"<code>addCheckBox(formLayout: PyQt5.QtWidgets.QFormLayout, key: str, labelString: str, isChecked: bool = False) -&gt; None</code>","text":"<p>Add a line of with checkbox control to a form layout.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addCheckBox--arguments","title":"Arguments","text":"<p>formLayout : PyQt5.QtWidgets.QFormLayout     Form layout object in which to position the edit controls. key : str     Short name of the parameter. labelString : str     String describing the parameter to be displayed as label. isChecked : bool     Initial state of the check box.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addCheckBox(\n    formLayout: PyQt5.QtWidgets.QFormLayout,\n    key: str,\n    labelString: str,\n    isChecked: bool = False,\n) -&gt; None:\n    \"\"\"\n    Add a line of with checkbox control to a form layout.\n\n    Arguments\n    ---------\n    formLayout : PyQt5.QtWidgets.QFormLayout\n        Form layout object in which to position the edit controls.\n    key : str\n        Short name of the parameter.\n    labelString : str\n        String describing the parameter to be displayed as label.\n    isChecked : bool\n        Initial state of the check box.\n    \"\"\"\n    checkBox = QtWidgets.QCheckBox(\"\")\n    checkBox.setChecked(isChecked)\n    dialog[key + \"Edit\"] = checkBox\n\n    checkTxt = QtWidgets.QLabel(labelString)\n    dialog[key] = checkTxt\n    formLayout.addRow(checkTxt, checkBox)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addDetectTab","title":"<code>addDetectTab(tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow, app: PyQt5.QtWidgets.QApplication) -&gt; None</code>","text":"<p>Create the tab for the bank line detection settings.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addDetectTab--arguments","title":"Arguments","text":"<p>tabs : PyQt5.QtWidgets.QTabWidget     Tabs object to which the tab should be added. win : PyQt5.QtWidgets.QMainWindow     The window object in which the tab item is located. app : PyQt5.QtWidgets.QApplication     The application object to which the window belongs, needed for font information.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addDetectTab(\n    tabs: PyQt5.QtWidgets.QTabWidget,\n    win: PyQt5.QtWidgets.QMainWindow,\n    app: PyQt5.QtWidgets.QApplication,\n) -&gt; None:\n    \"\"\"\n    Create the tab for the bank line detection settings.\n\n    Arguments\n    ---------\n    tabs : PyQt5.QtWidgets.QTabWidget\n        Tabs object to which the tab should be added.\n    win : PyQt5.QtWidgets.QMainWindow\n        The window object in which the tab item is located.\n    app : PyQt5.QtWidgets.QApplication\n        The application object to which the window belongs, needed for font information.\n    \"\"\"\n    detectWidget = QtWidgets.QWidget()\n    detectLayout = QtWidgets.QFormLayout(detectWidget)\n    tabs.addTab(detectWidget, \"Detection\")\n\n    addOpenFileRow(detectLayout, \"simFile\", \"Simulation File\")\n\n    waterDepth = QtWidgets.QLineEdit(win)\n    waterDepth.setValidator(validator(\"positive_real\"))\n    dialog[\"waterDepth\"] = waterDepth\n    detectLayout.addRow(\"Water Depth [m]\", waterDepth)\n\n    searchLines = QtWidgets.QTreeWidget(win)\n    searchLines.setHeaderLabels([\"Index\", \"FileName\", \"Search Distance [m]\"])\n    searchLines.setFont(app.font())\n    searchLines.setColumnWidth(0, 50)\n    searchLines.setColumnWidth(1, 200)\n    # c1 = QtWidgets.QTreeWidgetItem(searchLines, [\"0\", \"test\\\\filename\", \"50\"])\n\n    slLayout = addRemoveEditLayout(searchLines, \"searchLines\")\n    detectLayout.addRow(\"Search Lines\", slLayout)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addErosionTab","title":"<code>addErosionTab(tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow, app: PyQt5.QtWidgets.QApplication) -&gt; None</code>","text":"<p>Create the tab for the main bank erosion settings.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addErosionTab--arguments","title":"Arguments","text":"<p>tabs : PyQt5.QtWidgets.QTabWidget     Tabs object to which the tab should be added. win : PyQt5.QtWidgets.QMainWindow     The window object in which the tab item is located. app : PyQt5.QtWidgets.QApplication     The application object to which the window belongs, needed for font information.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addErosionTab(\n    tabs: PyQt5.QtWidgets.QTabWidget,\n    win: PyQt5.QtWidgets.QMainWindow,\n    app: PyQt5.QtWidgets.QApplication,\n) -&gt; None:\n    \"\"\"\n    Create the tab for the main bank erosion settings.\n\n    Arguments\n    ---------\n    tabs : PyQt5.QtWidgets.QTabWidget\n        Tabs object to which the tab should be added.\n    win : PyQt5.QtWidgets.QMainWindow\n        The window object in which the tab item is located.\n    app : PyQt5.QtWidgets.QApplication\n        The application object to which the window belongs, needed for font information.\n    \"\"\"\n    erosionWidget = QtWidgets.QWidget()\n    erosionLayout = QtWidgets.QFormLayout(erosionWidget)\n    tabs.addTab(erosionWidget, \"Erosion\")\n\n    tErosion = QtWidgets.QLineEdit(win)\n    tErosion.setValidator(validator(\"positive_real\"))\n    dialog[\"tErosion\"] = tErosion\n    erosionLayout.addRow(\"Simulation Time [yr]\", tErosion)\n\n    addOpenFileRow(erosionLayout, \"riverAxis\", \"River Axis File\")\n\n    addOpenFileRow(erosionLayout, \"fairway\", \"Fairway File\")\n\n    discharges = QtWidgets.QTreeWidget(win)\n    discharges.setHeaderLabels([\"Level\", \"FileName\", \"Probability [-]\"])\n    discharges.setFont(app.font())\n    discharges.setColumnWidth(0, 50)\n    discharges.setColumnWidth(1, 250)\n    # c1 = QtWidgets.QTreeWidgetItem(discharges, [\"0\", \"test\\\\filename\", \"0.5\"])\n\n    disLayout = addRemoveEditLayout(discharges, \"discharges\")\n    erosionLayout.addRow(\"Discharges\", disLayout)\n\n    refLevel = QtWidgets.QLineEdit(win)\n    refLevel.setValidator(PyQt5.QtGui.QIntValidator(1, 1))\n    dialog[\"refLevel\"] = refLevel\n    erosionLayout.addRow(\"Reference Case\", refLevel)\n\n    chainageOutStep = QtWidgets.QLineEdit(win)\n    chainageOutStep.setValidator(validator(\"positive_real\"))\n    dialog[\"chainageOutStep\"] = chainageOutStep\n    erosionLayout.addRow(\"Chainage Output Step [km]\", chainageOutStep)\n\n    addOpenFileRow(erosionLayout, \"outDir\", \"Output Directory\")\n\n    newBankFile = QtWidgets.QLineEdit(win)\n    dialog[\"newBankFile\"] = newBankFile\n    erosionLayout.addRow(\"New Bank File Name\", newBankFile)\n\n    newEqBankFile = QtWidgets.QLineEdit(win)\n    dialog[\"newEqBankFile\"] = newEqBankFile\n    erosionLayout.addRow(\"New Eq Bank File Name\", newEqBankFile)\n\n    eroVol = QtWidgets.QLineEdit(win)\n    dialog[\"eroVol\"] = eroVol\n    erosionLayout.addRow(\"EroVol File Name\", eroVol)\n\n    eroVolEqui = QtWidgets.QLineEdit(win)\n    dialog[\"eroVolEqui\"] = eroVolEqui\n    erosionLayout.addRow(\"EroVolEqui File Name\", eroVolEqui)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addFilter","title":"<code>addFilter(gridLayout: PyQt5.QtWidgets.QGridLayout, row: int, key: str, labelString: str) -&gt; None</code>","text":"<p>Add a line of controls for a filter</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addFilter--arguments","title":"Arguments","text":"<p>gridLayout : PyQt5.QtWidgets.QGridLayout     Grid layout object in which to position the edit controls. row : int     Grid row number to be used for this parameter. key : str     Short name of the parameter. labelString : str     String describing the parameter to be displayed as label.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addFilter(\n    gridLayout: PyQt5.QtWidgets.QGridLayout, row: int, key: str, labelString: str\n) -&gt; None:\n    \"\"\"\n    Add a line of controls for a filter\n\n    Arguments\n    ---------\n    gridLayout : PyQt5.QtWidgets.QGridLayout\n        Grid layout object in which to position the edit controls.\n    row : int\n        Grid row number to be used for this parameter.\n    key : str\n        Short name of the parameter.\n    labelString : str\n        String describing the parameter to be displayed as label.\n    \"\"\"\n\n    widthEdit = QtWidgets.QLineEdit(\"0.3\")\n    widthEdit.setValidator(validator(\"positive_real\"))\n    gridLayout.addWidget(widthEdit, row, 2)\n    dialog[key + \"Width\"] = widthEdit\n\n    useFilter = QtWidgets.QCheckBox(\"\")\n    useFilter.setChecked(False)\n    useFilter.stateChanged.connect(partial(updateFilter, key))\n    gridLayout.addWidget(useFilter, row, 1)\n    dialog[key + \"Active\"] = useFilter\n\n    filterTxt = QtWidgets.QLabel(labelString)\n    gridLayout.addWidget(filterTxt, row, 0)\n    dialog[key + \"Txt\"] = filterTxt\n\n    updateFilter(key)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addGeneralTab","title":"<code>addGeneralTab(tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow) -&gt; None</code>","text":"<p>Create the tab for the general settings.</p> <p>These settings are used by both the bank line detection and the bank erosion analysis.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addGeneralTab--arguments","title":"Arguments","text":"<p>tabs : PyQt5.QtWidgets.QTabWidget     Tabs object to which the tab should be added. win : PyQt5.QtWidgets.QMainWindow     Windows in which the tab item is located.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addGeneralTab(\n    tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow\n) -&gt; None:\n    \"\"\"\n    Create the tab for the general settings.\n\n    These settings are used by both the bank line detection and the bank\n    erosion analysis.\n\n    Arguments\n    ---------\n    tabs : PyQt5.QtWidgets.QTabWidget\n        Tabs object to which the tab should be added.\n    win : PyQt5.QtWidgets.QMainWindow\n        Windows in which the tab item is located.\n    \"\"\"\n    generalWidget = QtWidgets.QWidget()\n    generalLayout = QtWidgets.QFormLayout(generalWidget)\n    tabs.addTab(generalWidget, \"General\")\n\n    addOpenFileRow(generalLayout, \"chainFile\", \"Chain File\")\n\n    chainRange = QtWidgets.QWidget()\n    gridly = QtWidgets.QGridLayout(chainRange)\n    gridly.setContentsMargins(0, 0, 0, 0)\n\n    gridly.addWidget(QtWidgets.QLabel(\"From [km]\", win), 0, 0)\n    startRange = QtWidgets.QLineEdit(win)\n    dialog[\"startRange\"] = startRange\n    gridly.addWidget(startRange, 0, 1)\n    gridly.addWidget(QtWidgets.QLabel(\"To [km]\", win), 0, 2)\n    endRange = QtWidgets.QLineEdit(win)\n    dialog[\"endRange\"] = endRange\n    gridly.addWidget(endRange, 0, 3)\n\n    generalLayout.addRow(\"Study Range\", chainRange)\n\n    addOpenFileRow(generalLayout, \"bankDir\", \"Bank Directory\")\n\n    bankFileName = QtWidgets.QLineEdit(win)\n    dialog[\"bankFileName\"] = bankFileName\n    generalLayout.addRow(\"Bank File Name\", bankFileName)\n\n    addCheckBox(generalLayout, \"makePlots\", \"Create Figures\", True)\n    dialog[\"makePlotsEdit\"].stateChanged.connect(updatePlotting)\n\n    addCheckBox(generalLayout, \"savePlots\", \"Save Figures\", True)\n    dialog[\"savePlotsEdit\"].stateChanged.connect(updatePlotting)\n\n    zoomPlots = QtWidgets.QWidget()\n    gridly = QtWidgets.QGridLayout(zoomPlots)\n    gridly.setContentsMargins(0, 0, 0, 0)\n\n    saveZoomPlotsEdit = QtWidgets.QCheckBox(\"\", win)\n    saveZoomPlotsEdit.stateChanged.connect(updatePlotting)\n    saveZoomPlotsEdit.setChecked(False)\n    gridly.addWidget(saveZoomPlotsEdit, 0, 0)\n    dialog[\"saveZoomPlotsEdit\"] = saveZoomPlotsEdit\n\n    zoomPlotsRangeTxt = QtWidgets.QLabel(\"Zoom Range [km]\", win)\n    zoomPlotsRangeTxt.setEnabled(False)\n    gridly.addWidget(zoomPlotsRangeTxt, 0, 1)\n    dialog[\"zoomPlotsRangeTxt\"] = zoomPlotsRangeTxt\n\n    zoomPlotsRangeEdit = QtWidgets.QLineEdit(\"1.0\",win)\n    zoomPlotsRangeEdit.setValidator(validator(\"positive_real\"))\n    zoomPlotsRangeEdit.setEnabled(False)\n    gridly.addWidget(zoomPlotsRangeEdit, 0, 2)\n    dialog[\"zoomPlotsRangeEdit\"] = zoomPlotsRangeEdit\n\n    saveZoomPlots = QtWidgets.QLabel(\"Save Zoomed Figures\", win)\n    generalLayout.addRow(saveZoomPlots, zoomPlots)\n    dialog[\"saveZoomPlots\"] = saveZoomPlots\n\n    addOpenFileRow(generalLayout, \"figureDir\", \"Figure Directory\")\n    addCheckBox(generalLayout, \"closePlots\", \"Close Figures\")\n    addCheckBox(generalLayout, \"debugOutput\", \"Debug Output\")\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addOpenFileRow","title":"<code>addOpenFileRow(formLayout: PyQt5.QtWidgets.QFormLayout, key: str, labelString: str) -&gt; None</code>","text":"<p>Add a line of controls for selecting a file or folder in a form layout.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addOpenFileRow--arguments","title":"Arguments","text":"<p>formLayout : PyQt5.QtWidgets.QFormLayout     Form layout object in which to position the edit controls. key : str     Short name of the parameter. labelString : str     String describing the parameter to be displayed as label.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addOpenFileRow(\n    formLayout: PyQt5.QtWidgets.QFormLayout, key: str, labelString: str\n) -&gt; None:\n    \"\"\"\n    Add a line of controls for selecting a file or folder in a form layout.\n\n    Arguments\n    ---------\n    formLayout : PyQt5.QtWidgets.QFormLayout\n        Form layout object in which to position the edit controls.\n    key : str\n        Short name of the parameter.\n    labelString : str\n        String describing the parameter to be displayed as label.\n    \"\"\"\n    Label = QtWidgets.QLabel(labelString)\n    dialog[key] = Label\n    fLayout = openFileLayout(key + \"Edit\")\n    formLayout.addRow(Label, fLayout)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addRemoveEditLayout","title":"<code>addRemoveEditLayout(mainWidget: PyQt5.QtWidgets.QWidget, key: str) -&gt; PyQt5.QtWidgets.QWidget</code>","text":"<p>Create a standard layout with list control and add, edit and remove buttons.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addRemoveEditLayout--arguments","title":"Arguments","text":"<p>mainWidget : PyQt5.QtWidgets.QWidget     Main object on which the add, edit and remove buttons should operate. key : str     Short name of the parameter.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addRemoveEditLayout--returns","title":"Returns","text":"<p>parent : PyQt5.QtWidgets.QWidget     Parent QtWidget that contains the add, edit and remove buttons.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addRemoveEditLayout(\n    mainWidget: PyQt5.QtWidgets.QWidget, key: str\n) -&gt; PyQt5.QtWidgets.QWidget:\n    \"\"\"\n    Create a standard layout with list control and add, edit and remove buttons.\n\n    Arguments\n    ---------\n    mainWidget : PyQt5.QtWidgets.QWidget\n        Main object on which the add, edit and remove buttons should operate.\n    key : str\n        Short name of the parameter.\n\n    Returns\n    -------\n    parent : PyQt5.QtWidgets.QWidget\n        Parent QtWidget that contains the add, edit and remove buttons.\n    \"\"\"\n    parent = QtWidgets.QWidget()\n    gridly = QtWidgets.QGridLayout(parent)\n    gridly.setContentsMargins(0, 0, 0, 0)\n\n    dialog[key] = mainWidget\n    gridly.addWidget(mainWidget, 0, 0)\n\n    buttonBar = QtWidgets.QWidget()\n    buttonBarLayout = QtWidgets.QBoxLayout(QtWidgets.QBoxLayout.TopToBottom, buttonBar)\n    buttonBarLayout.setContentsMargins(0, 0, 0, 0)\n    gridly.addWidget(buttonBar, 0, 1)\n\n    addBtn = QtWidgets.QPushButton(getIcon(f\"{ICONS_DIR}/add.png\"), \"\")\n    addBtn.clicked.connect(partial(addAnItem, key))\n    dialog[key + \"Add\"] = addBtn\n    buttonBarLayout.addWidget(addBtn)\n\n    editBtn = QtWidgets.QPushButton(getIcon(f\"{ICONS_DIR}/edit.png\"), \"\")\n    editBtn.clicked.connect(partial(editAnItem, key))\n    editBtn.setEnabled(False)\n    dialog[key + \"Edit\"] = editBtn\n    buttonBarLayout.addWidget(editBtn)\n\n    delBtn = QtWidgets.QPushButton(getIcon(f\"{ICONS_DIR}/remove.png\"), \"\")\n    delBtn.clicked.connect(partial(removeAnItem, key))\n    delBtn.setEnabled(False)\n    dialog[key + \"Remove\"] = delBtn\n    buttonBarLayout.addWidget(delBtn)\n\n    stretch = QtWidgets.QSpacerItem(10, 10, 13, 7)\n    buttonBarLayout.addItem(stretch)\n\n    return parent\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addShippingTab","title":"<code>addShippingTab(tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow) -&gt; None</code>","text":"<p>Create the tab for the general shipping settings.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addShippingTab--arguments","title":"Arguments","text":"<p>tabs : PyQt5.QtWidgets.QTabWidget     Tabs object to which the tab should be added. win : PyQt5.QtWidgets.QMainWindow     The window object in which the tab item is located.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addShippingTab(\n    tabs: PyQt5.QtWidgets.QTabWidget, win: PyQt5.QtWidgets.QMainWindow\n) -&gt; None:\n    \"\"\"\n    Create the tab for the general shipping settings.\n\n    Arguments\n    ---------\n    tabs : PyQt5.QtWidgets.QTabWidget\n        Tabs object to which the tab should be added.\n    win : PyQt5.QtWidgets.QMainWindow\n        The window object in which the tab item is located.\n    \"\"\"\n    eParamsWidget = QtWidgets.QWidget()\n    eParamsLayout = QtWidgets.QGridLayout(eParamsWidget)\n    tabs.addTab(eParamsWidget, \"Shipping Parameters\")\n\n    generalParLayout(eParamsLayout, 0, \"shipType\", \"Ship Type\", selectList=shipTypes())\n    generalParLayout(eParamsLayout, 2, \"shipVeloc\", \"Velocity [m/s]\")\n    generalParLayout(eParamsLayout, 3, \"nShips\", \"# Ships [1/yr]\")\n    generalParLayout(eParamsLayout, 4, \"shipNWaves\", \"# Waves [1/ship]\")\n    generalParLayout(eParamsLayout, 5, \"shipDraught\", \"Draught [m]\")\n    generalParLayout(eParamsLayout, 6, \"wavePar0\", \"Wave0 [m]\")\n    generalParLayout(eParamsLayout, 7, \"wavePar1\", \"Wave1 [m]\")\n\n    stretch = QtWidgets.QSpacerItem(10, 10, 13, 7)\n    eParamsLayout.addItem(stretch, 8, 0)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.addTabForLevel","title":"<code>addTabForLevel(istr: str) -&gt; None</code>","text":"<p>Create the tab for the settings associated with simulation i.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addTabForLevel--arguments","title":"Arguments","text":"<p>istr : str     String representation of the simulation number.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.addTabForLevel--arguments_1","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def addTabForLevel(istr: str) -&gt; None:\n    \"\"\"\n    Create the tab for the settings associated with simulation i.\n\n    Arguments\n    ---------\n    istr : str\n        String representation of the simulation number.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    newWidget = QtWidgets.QWidget()\n    newLayout = QtWidgets.QGridLayout(newWidget)\n    dialog[\"tabs\"].addTab(newWidget, \"Level \" + istr)\n\n    optionalParLayout(\n        newLayout, 0, istr + \"_shipType\", \"Ship Type\", selectList=shipTypes()\n    )\n    optionalParLayout(newLayout, 2, istr + \"_shipVeloc\", \"Velocity [m/s]\")\n    optionalParLayout(newLayout, 3, istr + \"_nShips\", \"# Ships [1/yr]\")\n    optionalParLayout(newLayout, 4, istr + \"_shipNWaves\", \"# Waves [1/ship]\")\n    optionalParLayout(newLayout, 5, istr + \"_shipDraught\", \"Draught [m]\")\n    optionalParLayout(newLayout, 6, istr + \"_bankSlope\", \"Slope [-]\")\n    optionalParLayout(newLayout, 7, istr + \"_bankReed\", \"Reed [-]\")\n\n    Label = QtWidgets.QLabel(\"EroVol File Name\")\n    dialog[istr + \"_eroVol\"] = Label\n    newLayout.addWidget(Label, 8, 0)\n    Edit = QtWidgets.QLineEdit()\n    dialog[istr + \"_eroVolEdit\"] = Edit\n    newLayout.addWidget(Edit, 8, 2)\n\n    stretch = QtWidgets.QSpacerItem(10, 10, 13, 7)\n    newLayout.addItem(stretch, 9, 0)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.bankStrengthSwitch","title":"<code>bankStrengthSwitch() -&gt; None</code>","text":"<p>Implements the dialog settings depending on the bank strength specification method.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.bankStrengthSwitch--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def bankStrengthSwitch() -&gt; None:\n    \"\"\"\n    Implements the dialog settings depending on the bank strength specification method.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    type = dialog[\"strengthPar\"].currentText()\n    if type == \"Bank Type\":\n        dialog[\"bankType\"].setEnabled(True)\n        dialog[\"bankTypeType\"].setEnabled(True)\n        typeUpdatePar(\"bankType\")\n        dialog[\"bankShear\"].setEnabled(False)\n        dialog[\"bankShearType\"].setEnabled(False)\n        dialog[\"bankShearEdit\"].setText(\"\")\n        dialog[\"bankShearEdit\"].setEnabled(False)\n        dialog[\"bankShearEditFile\"].setEnabled(False)\n    elif type == \"Critical Shear Stress\":\n        dialog[\"bankShear\"].setEnabled(True)\n        dialog[\"bankShearType\"].setEnabled(True)\n        dialog[\"bankShearEdit\"].setEnabled(True)\n        typeUpdatePar(\"bankShear\")\n        dialog[\"bankType\"].setEnabled(False)\n        dialog[\"bankTypeType\"].setEnabled(False)\n        dialog[\"bankTypeSelect\"].setEnabled(False)\n        dialog[\"bankTypeEdit\"].setText(\"\")\n        dialog[\"bankTypeEdit\"].setEnabled(False)\n        dialog[\"bankTypeEditFile\"].setEnabled(False)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.close_dialog","title":"<code>close_dialog() -&gt; None</code>","text":"<p>Close the dialog and program.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.close_dialog--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def close_dialog() -&gt; None:\n    \"\"\"\n    Close the dialog and program.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    matplotlib.pyplot.close(\"all\")\n    dialog[\"window\"].close()\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.close_edit","title":"<code>close_edit(hDialog: PyQt5.QtWidgets.QDialog) -&gt; None</code>","text":"<p>Generic close function for edit dialogs.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.close_edit--arguments","title":"Arguments","text":"<p>hDialog : PyQt5.QtWidgets.QDialog     Dialog object to be closed.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def close_edit(hDialog: PyQt5.QtWidgets.QDialog) -&gt; None:\n    \"\"\"\n    Generic close function for edit dialogs.\n\n    Arguments\n    ---------\n    hDialog : PyQt5.QtWidgets.QDialog\n        Dialog object to be closed.\n    \"\"\"\n    hDialog.close()\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.createMenus","title":"<code>createMenus(menubar: PyQt5.QtWidgets.QMenuBar) -&gt; None</code>","text":"<p>Add the menus to the menubar.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.createMenus--arguments","title":"Arguments","text":"<p>menubar : PyQt5.QtWidgets.QMenuBar     Menubar to which menus should be added.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def createMenus(menubar: PyQt5.QtWidgets.QMenuBar) -&gt; None:\n    \"\"\"\n    Add the menus to the menubar.\n\n    Arguments\n    ---------\n    menubar : PyQt5.QtWidgets.QMenuBar\n        Menubar to which menus should be added.\n    \"\"\"\n    menu = menubar.addMenu(gui_text(\"File\"))\n    item = menu.addAction(gui_text(\"Load\"))\n    item.triggered.connect(menu_load_configuration)\n    item = menu.addAction(gui_text(\"Save\"))\n    item.triggered.connect(menu_save_configuration)\n    menu.addSeparator()\n    item = menu.addAction(gui_text(\"Close\"))\n    item.triggered.connect(close_dialog)\n\n    menu = menubar.addMenu(gui_text(\"Help\"))\n    item = menu.addAction(gui_text(\"Manual\"))\n    item.triggered.connect(menu_open_manual)\n    menu.addSeparator()\n    item = menu.addAction(gui_text(\"Version\"))\n    item.triggered.connect(menu_about_self)\n    item = menu.addAction(gui_text(\"AboutQt\"))\n    item.triggered.connect(menu_about_qt)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.create_dialog","title":"<code>create_dialog() -&gt; None</code>","text":"<p>Construct the D-FAST Bank Erosion user interface.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.create_dialog--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def create_dialog() -&gt; None:\n    \"\"\"\n    Construct the D-FAST Bank Erosion user interface.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    global dialog\n    dialog = {}\n\n    app = QtWidgets.QApplication(sys.argv)\n    app.setStyle(\"fusion\")\n    dialog[\"application\"] = app\n\n    win = QtWidgets.QMainWindow()\n    win.setGeometry(200, 200, 600, 300)\n    win.setWindowTitle(\"D-FAST Bank Erosion\")\n    dialog[\"window\"] = win\n\n    menubar = win.menuBar()\n    createMenus(menubar)\n\n    centralWidget = QtWidgets.QWidget()\n    layout = QtWidgets.QBoxLayout(2, centralWidget)\n    win.setCentralWidget(centralWidget)\n\n    tabs = QtWidgets.QTabWidget(win)\n    dialog[\"tabs\"] = tabs\n    layout.addWidget(tabs)\n\n    buttonBar = QtWidgets.QWidget(win)\n    buttonBarLayout = QtWidgets.QBoxLayout(QtWidgets.QBoxLayout.LeftToRight, buttonBar)\n    buttonBarLayout.setContentsMargins(0, 0, 0, 0)\n    layout.addWidget(buttonBar)\n\n    detect = QtWidgets.QPushButton(gui_text(\"action_detect\"), win)\n    detect.clicked.connect(run_detection)\n    buttonBarLayout.addWidget(detect)\n\n    erode = QtWidgets.QPushButton(gui_text(\"action_erode\"), win)\n    erode.clicked.connect(run_erosion)\n    buttonBarLayout.addWidget(erode)\n\n    done = QtWidgets.QPushButton(gui_text(\"action_close\"), win)\n    done.clicked.connect(close_dialog)\n    buttonBarLayout.addWidget(done)\n\n    addGeneralTab(tabs, win)\n    addDetectTab(tabs, win, app)\n    addErosionTab(tabs, win, app)\n    addShippingTab(tabs, win)\n    addBankTab(tabs, win)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.editADischarge","title":"<code>editADischarge(key: str, istr: str, fileName: str = '', prob: str = '')</code>","text":"<p>Create an edit dialog for simulation file and weighing.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.editADischarge--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter. istr : str     String representation of the simulation in the list. fileName : str     Name of the simulation file. prob : str     String representation of the weight for this simulation.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def editADischarge(key: str, istr: str, fileName: str = \"\", prob: str = \"\"):\n    \"\"\"\n    Create an edit dialog for simulation file and weighing.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    istr : str\n        String representation of the simulation in the list.\n    fileName : str\n        Name of the simulation file.\n    prob : str\n        String representation of the weight for this simulation.\n    \"\"\"\n    editDialog = QtWidgets.QDialog()\n    setDialogSize(editDialog, 600, 100)\n    editDialog.setWindowFlags(\n        PyQt5.QtCore.Qt.WindowTitleHint | PyQt5.QtCore.Qt.WindowSystemMenuHint\n    )\n    editDialog.setWindowTitle(\"Edit Discharge\")\n    editLayout = QtWidgets.QFormLayout(editDialog)\n\n    label = QtWidgets.QLabel(istr)\n    editLayout.addRow(\"Level Nr\", label)\n\n    addOpenFileRow(editLayout, \"editDischarge\", \"Simulation File\")\n    dialog[\"editDischargeEdit\"].setText(fileName)\n\n    probability = QtWidgets.QLineEdit()\n    probability.setText(prob)\n    probability.setValidator(validator(\"positive_real\"))\n    editLayout.addRow(\"Probability [-]\", probability)\n\n    done = QtWidgets.QPushButton(\"Done\")\n    done.clicked.connect(partial(close_edit, editDialog))\n    # edit_SearchDistance.setValidator(validator(\"positive_real\"))\n    editLayout.addRow(\" \", done)\n\n    editDialog.exec()\n\n    fileName = dialog[\"editDischargeEdit\"].text()\n    prob = probability.text()\n    return fileName, prob\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.editASearchLine","title":"<code>editASearchLine(key: str, istr: str, fileName: str = '', dist: str = '50') -&gt; Tuple[str, str]</code>","text":"<p>Create an edit dialog for the search lines list.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.editASearchLine--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter. istr : str     String representation of the search line in the list. fileName : str     Name of the search line file. dist : str     String representation of the search distance.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.editASearchLine--returns","title":"Returns","text":"<p>fileName1 : str     Updated name of the search line file. dist1 : str     Updated string representation of the search distance.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def editASearchLine(\n    key: str, istr: str, fileName: str = \"\", dist: str = \"50\"\n) -&gt; Tuple[str, str]:\n    \"\"\"\n    Create an edit dialog for the search lines list.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    istr : str\n        String representation of the search line in the list.\n    fileName : str\n        Name of the search line file.\n    dist : str\n        String representation of the search distance.\n\n    Returns\n    -------\n    fileName1 : str\n        Updated name of the search line file.\n    dist1 : str\n        Updated string representation of the search distance.\n    \"\"\"\n    editDialog = QtWidgets.QDialog()\n    setDialogSize(editDialog, 600, 100)\n    editDialog.setWindowFlags(\n        PyQt5.QtCore.Qt.WindowTitleHint | PyQt5.QtCore.Qt.WindowSystemMenuHint\n    )\n    editDialog.setWindowTitle(\"Edit Search Line\")\n    editLayout = QtWidgets.QFormLayout(editDialog)\n\n    label = QtWidgets.QLabel(istr)\n    editLayout.addRow(\"Search Line Nr\", label)\n\n    addOpenFileRow(editLayout, \"editSearchLine\", \"Search Line File\")\n    dialog[\"editSearchLineEdit\"].setText(fileName)\n\n    searchDistance = QtWidgets.QLineEdit()\n    searchDistance.setText(dist)\n    searchDistance.setValidator(validator(\"positive_real\"))\n    editLayout.addRow(\"Search Distance [m]\", searchDistance)\n\n    done = QtWidgets.QPushButton(\"Done\")\n    done.clicked.connect(partial(close_edit, editDialog))\n    # edit_SearchDistance.setValidator(validator(\"positive_real\"))\n    editLayout.addRow(\" \", done)\n\n    editDialog.exec()\n\n    fileName = dialog[\"editSearchLineEdit\"].text()\n    dist = searchDistance.text()\n    return fileName, dist\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.editAnItem","title":"<code>editAnItem(key: str) -&gt; None</code>","text":"<p>Implements the actions for the edit item button.</p> <p>Dialog implemented in separate routines.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.editAnItem--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def editAnItem(key: str) -&gt; None:\n    \"\"\"\n    Implements the actions for the edit item button.\n\n    Dialog implemented in separate routines.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    \"\"\"\n    selected = dialog[key].selectedItems()\n    root = dialog[key].invisibleRootItem()\n    if len(selected) &gt; 0:\n        istr = selected[0].text(0)\n        if key == \"searchLines\":\n            fileName = selected[0].text(1)\n            dist = selected[0].text(2)\n            fileName, dist = editASearchLine(key, istr, fileName=fileName, dist=dist)\n            selected[0].setText(1, fileName)\n            selected[0].setText(2, dist)\n        elif key == \"discharges\":\n            fileName = selected[0].text(1)\n            prob = selected[0].text(2)\n            fileName, prob = editADischarge(key, istr, fileName=fileName, prob=prob)\n            selected[0].setText(1, fileName)\n            selected[0].setText(2, prob)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.generalParLayout","title":"<code>generalParLayout(gridLayout: PyQt5.QtWidgets.QGridLayout, row: int, key: str, labelString: str, selectList: Optional[List[str]] = None) -&gt; None</code>","text":"<p>Add a line of controls for editing a general parameter.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.generalParLayout--arguments","title":"Arguments","text":"<p>gridLayout : PyQt5.QtWidgets.QGridLayout     Grid layout object in which to position the edit controls. row : int     Grid row number to be used for this parameter. key : str     Short name of the parameter. labelString : str     String describing the parameter to be displayed as label. selectList : Optional[List[str]]     In case the parameter can only have a limited number of values: a list     of strings describing the options.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def generalParLayout(\n    gridLayout: PyQt5.QtWidgets.QGridLayout,\n    row: int,\n    key: str,\n    labelString: str,\n    selectList: Optional[List[str]] = None,\n) -&gt; None:\n    \"\"\"\n    Add a line of controls for editing a general parameter.\n\n    Arguments\n    ---------\n    gridLayout : PyQt5.QtWidgets.QGridLayout\n        Grid layout object in which to position the edit controls.\n    row : int\n        Grid row number to be used for this parameter.\n    key : str\n        Short name of the parameter.\n    labelString : str\n        String describing the parameter to be displayed as label.\n    selectList : Optional[List[str]]\n        In case the parameter can only have a limited number of values: a list\n        of strings describing the options.\n    \"\"\"\n    Label = QtWidgets.QLabel(labelString)\n    dialog[key] = Label\n    gridLayout.addWidget(Label, row, 0)\n\n    paramTypes = (\"Constant\", \"Variable\")\n    Type = QtWidgets.QComboBox()\n    Type.addItems(paramTypes)\n    Type.currentIndexChanged.connect(partial(typeUpdatePar, key))\n    dialog[key + \"Type\"] = Type\n    gridLayout.addWidget(Type, row, 1)\n\n    if selectList is None:\n        fLayout = openFileLayout(key + \"Edit\", enabled=False)\n        gridLayout.addWidget(fLayout, row, 2)\n    else:\n        Select = QtWidgets.QComboBox()\n        Select.addItems(selectList)\n        dialog[key + \"Select\"] = Select\n        gridLayout.addWidget(Select, row, 2)\n\n        fLayout = openFileLayout(key + \"Edit\", enabled=False)\n        dialog[key + \"Edit\"].setEnabled(False)\n        gridLayout.addWidget(fLayout, row + 1, 2)\n\n    typeUpdatePar(key)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.getIcon","title":"<code>getIcon(filename: str) -&gt; PyQt5.QtGui.QIcon</code>","text":"<p>Opens the icon file relative to the location of the program.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.getIcon--arguments","title":"Arguments","text":"<p>filename : str     Name of the icon file.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def getIcon(filename: str) -&gt; PyQt5.QtGui.QIcon:\n    \"\"\"\n    Opens the icon file relative to the location of the program.\n\n    Arguments\n    ---------\n    filename : str\n        Name of the icon file.\n    \"\"\"\n    progloc = str(pathlib.Path(__file__).parent.absolute())\n    return PyQt5.QtGui.QIcon(progloc + os.path.sep + filename)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.get_configuration","title":"<code>get_configuration() -&gt; configparser.ConfigParser</code>","text":"<p>Extract a configuration from the GUI.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.get_configuration--arguments","title":"Arguments","text":"<p>None</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.get_configuration--returns","title":"Returns","text":"<p>config : configparser.ConfigParser     Configuration for the D-FAST Bank Erosion analysis.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def get_configuration() -&gt; configparser.ConfigParser:\n    \"\"\"\n    Extract a configuration from the GUI.\n\n    Arguments\n    ---------\n    None\n\n    Returns\n    -------\n    config : configparser.ConfigParser\n        Configuration for the D-FAST Bank Erosion analysis.\n    \"\"\"\n    config = configparser.ConfigParser()\n    config.optionxform = str  # case sensitive configuration\n\n    config.add_section(\"General\")\n    config[\"General\"][\"Version\"] = \"1.0\"\n    config[\"General\"][\"RiverKM\"] = dialog[\"chainFileEdit\"].text()\n    config[\"General\"][\"Boundaries\"] = (\n        dialog[\"startRange\"].text() + \":\" + dialog[\"endRange\"].text()\n    )\n    config[\"General\"][\"BankDir\"] = dialog[\"bankDirEdit\"].text()\n    config[\"General\"][\"BankFile\"] = dialog[\"bankFileName\"].text()\n    config[\"General\"][\"Plotting\"] = str(dialog[\"makePlotsEdit\"].isChecked())\n    config[\"General\"][\"SavePlots\"] = str(dialog[\"savePlotsEdit\"].isChecked())\n    config[\"General\"][\"SaveZoomPlots\"] = str(dialog[\"saveZoomPlotsEdit\"].isChecked())\n    config[\"General\"][\"ZoomStepKM\"] = dialog[\"zoomPlotsRangeEdit\"].text()\n    config[\"General\"][\"FigureDir\"] = dialog[\"figureDirEdit\"].text()\n    config[\"General\"][\"ClosePlots\"] = str(dialog[\"closePlotsEdit\"].isChecked())\n    config[\"General\"][\"DebugOutput\"] = str(dialog[\"debugOutputEdit\"].isChecked())\n\n    config.add_section(\"Detect\")\n    config[\"Detect\"][\"SimFile\"] = dialog[\"simFileEdit\"].text()\n    config[\"Detect\"][\"WaterDepth\"] = dialog[\"waterDepth\"].text()\n    nbank = dialog[\"searchLines\"].topLevelItemCount()\n    config[\"Detect\"][\"NBank\"] = str(nbank)\n    dlines = \"[ \"\n    for i in range(nbank):\n        istr = str(i + 1)\n        config[\"Detect\"][\"Line\" + istr] = dialog[\"searchLines\"].topLevelItem(i).text(1)\n        dlines += dialog[\"searchLines\"].topLevelItem(i).text(2) + \", \"\n    dlines = dlines[:-2] + \" ]\"\n    config[\"Detect\"][\"DLines\"] = dlines\n\n    config.add_section(\"Erosion\")\n    config[\"Erosion\"][\"TErosion\"] = dialog[\"tErosion\"].text()\n    config[\"Erosion\"][\"RiverAxis\"] = dialog[\"riverAxisEdit\"].text()\n    config[\"Erosion\"][\"Fairway\"] = dialog[\"fairwayEdit\"].text()\n    config[\"Erosion\"][\"OutputInterval\"] = dialog[\"chainageOutStep\"].text()\n    config[\"Erosion\"][\"OutputDir\"] = dialog[\"outDirEdit\"].text()\n    config[\"Erosion\"][\"BankNew\"] = dialog[\"newBankFile\"].text()\n    config[\"Erosion\"][\"BankEq\"] = dialog[\"newEqBankFile\"].text()\n    config[\"Erosion\"][\"EroVol\"] = dialog[\"eroVol\"].text()\n    config[\"Erosion\"][\"EroVolEqui\"] = dialog[\"eroVolEqui\"].text()\n\n    if dialog[\"shipTypeType\"].currentText() == \"Constant\":\n        config[\"Erosion\"][\"ShipType\"] = str(\n            dialog[\"shipTypeSelect\"].currentIndex() + 1\n        )  # index 0 -&gt; shipType 1\n    else:\n        config[\"Erosion\"][\"ShipType\"] = dialog[\"shipTypeEdit\"].text()\n    config[\"Erosion\"][\"VShip\"] = dialog[\"shipVelocEdit\"].text()\n    config[\"Erosion\"][\"NShip\"] = dialog[\"nShipsEdit\"].text()\n    config[\"Erosion\"][\"NWaves\"] = dialog[\"shipNWavesEdit\"].text()\n    config[\"Erosion\"][\"Draught\"] = dialog[\"shipDraughtEdit\"].text()\n    config[\"Erosion\"][\"Wave0\"] = dialog[\"wavePar0Edit\"].text()\n    config[\"Erosion\"][\"Wave1\"] = dialog[\"wavePar1Edit\"].text()\n\n    if dialog[\"strengthPar\"].currentText() == \"Bank Type\":\n        config[\"Erosion\"][\"Classes\"] = \"true\"\n        if dialog[\"bankTypeType\"].currentText() == \"Constant\":\n            config[\"Erosion\"][\"BankType\"] = dialog[\"bankTypeSelect\"].currentIndex()\n        else:\n            config[\"Erosion\"][\"BankType\"] = dialog[\"bankTypeEdit\"].text()\n    else:\n        config[\"Erosion\"][\"Classes\"] = \"false\"\n        config[\"Erosion\"][\"BankType\"] = dialog[\"bankShearEdit\"].text()\n    config[\"Erosion\"][\"ProtectionLevel\"] = dialog[\"bankProtectEdit\"].text()\n    config[\"Erosion\"][\"Slope\"] = dialog[\"bankSlopeEdit\"].text()\n    config[\"Erosion\"][\"Reed\"] = dialog[\"bankReedEdit\"].text()\n\n    if dialog[\"velFilterActive\"].isChecked():\n        config[\"Erosion\"][\"VelFilterDist\"] = dialog[\"velFilterWidth\"].text()\n    if dialog[\"bedFilterActive\"].isChecked():\n        config[\"Erosion\"][\"BedFilterDist\"] = dialog[\"bedFilterWidth\"].text()\n\n    nlevel = dialog[\"discharges\"].topLevelItemCount()\n    config[\"Erosion\"][\"NLevel\"] = str(nlevel)\n    config[\"Erosion\"][\"RefLevel\"] = dialog[\"refLevel\"].text()\n    for i in range(nlevel):\n        istr = str(i + 1)\n        config[\"Erosion\"][\"SimFile\" + istr] = (\n            dialog[\"discharges\"].topLevelItem(i).text(1)\n        )\n        config[\"Erosion\"][\"PDischarge\" + istr] = (\n            dialog[\"discharges\"].topLevelItem(i).text(2)\n        )\n        if dialog[istr + \"_shipTypeType\"].currentText() != \"Use Default\":\n            if dialog[istr + \"_shipTypeType\"].currentText() == \"Constant\":\n                config[\"Erosion\"][\"ShipType\" + istr] = (\n                    dialog[istr + \"_shipTypeSelect\"].currentIndex() + 1\n                )  # index 0 -&gt; shipType 1\n            else:\n                config[\"Erosion\"][\"ShipType\" + istr] = dialog[\n                    istr + \"_shipTypeEdit\"\n                ].text()\n        if dialog[istr + \"_shipVelocType\"].currentText() != \"Use Default\":\n            config[\"Erosion\"][\"VShip\" + istr] = dialog[istr + \"_shipVelocEdit\"].text()\n        if dialog[istr + \"_nShipsType\"].currentText() != \"Use Default\":\n            config[\"Erosion\"][\"NShip\" + istr] = dialog[istr + \"_nShipsEdit\"].text()\n        if dialog[istr + \"_shipNWavesType\"].currentText() != \"Use Default\":\n            config[\"Erosion\"][\"NWaves\" + istr] = dialog[istr + \"_shipNWavesEdit\"].text()\n        if dialog[istr + \"_shipDraughtType\"].currentText() != \"Use Default\":\n            config[\"Erosion\"][\"Draught\" + istr] = dialog[\n                istr + \"_shipDraughtEdit\"\n            ].text()\n        if dialog[istr + \"_bankSlopeType\"].currentText() != \"Use Default\":\n            config[\"Erosion\"][\"Slope\" + istr] = dialog[istr + \"_bankSlopeEdit\"].text()\n        if dialog[istr + \"_bankReedType\"].currentText() != \"Use Default\":\n            config[\"Erosion\"][\"Reed\" + istr] = dialog[istr + \"_bankReedEdit\"].text()\n        if dialog[istr + \"_eroVolEdit\"].text() != \"\":\n            config[\"Erosion\"][\"EroVol\" + istr] = dialog[istr + \"_eroVolEdit\"].text()\n    return config\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.gui_text","title":"<code>gui_text(key: str, prefix: str = 'gui_', dict: Dict[str, Any] = {})</code>","text":"<p>Query the global dictionary of texts for a single string in the GUI.</p> <p>This routine concatenates the prefix and the key to query the global dictionary of texts. It selects the first line of the text obtained and expands and placeholders in the string using the optional dictionary provided.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.gui_text--arguments","title":"Arguments","text":"<p>key : str     The key string used to query the dictionary (extended with prefix). prefix : str     The prefix used in combination with the key (default \"gui_\"). dict : Dict[str, Any]     A dictionary used for placeholder expansions (default empty).</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.gui_text--returns","title":"Returns","text":"<pre><code>The first line of the text in the dictionary expanded with the keys.\n</code></pre> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def gui_text(key: str, prefix: str = \"gui_\", dict: Dict[str, Any] = {}):\n    \"\"\"\n    Query the global dictionary of texts for a single string in the GUI.\n\n    This routine concatenates the prefix and the key to query the global\n    dictionary of texts. It selects the first line of the text obtained and\n    expands and placeholders in the string using the optional dictionary\n    provided.\n\n    Arguments\n    ---------\n    key : str\n        The key string used to query the dictionary (extended with prefix).\n    prefix : str\n        The prefix used in combination with the key (default \"gui_\").\n    dict : Dict[str, Any]\n        A dictionary used for placeholder expansions (default empty).\n\n    Returns\n    -------\n        The first line of the text in the dictionary expanded with the keys.\n    \"\"\"\n    cstr = get_text(prefix + key)\n    str = cstr[0].format(**dict)\n    return str\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.load_configuration","title":"<code>load_configuration(filename: str) -&gt; None</code>","text":"<p>Open a configuration file and update the GUI accordingly.</p> <p>This routines opens the specified configuration file and updates the GUI to reflect it contents.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.load_configuration--arguments","title":"Arguments","text":"<p>filename : str     Name of the configuration file to be opened.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def load_configuration(filename: str) -&gt; None:\n    \"\"\"\n    Open a configuration file and update the GUI accordingly.\n\n    This routines opens the specified configuration file and updates the GUI\n    to reflect it contents.\n\n    Arguments\n    ---------\n    filename : str\n        Name of the configuration file to be opened.\n    \"\"\"\n    if not os.path.exists(filename):\n        if filename != \"dfastbe.cfg\":\n            showError(\"The file '{}' does not exist!\".format(filename))\n        return\n    absfilename = absolute_path(os.getcwd(), filename)\n    rootdir = os.path.dirname(absfilename)\n    config_file = ConfigFile.read(absfilename)\n\n    config_file.path = absfilename\n\n    try:\n        version = config_file.version\n    except KeyError:\n        showError(\"No version information in the file!\")\n        return\n\n    config = config_file.config\n    if version == \"1.0\":\n        section = config[\"General\"]\n        dialog[\"chainFileEdit\"].setText(section[\"RiverKM\"])\n        studyRange = config_file.get_range(\"General\", \"Boundaries\")\n        dialog[\"startRange\"].setText(str(studyRange[0]))\n        dialog[\"endRange\"].setText(str(studyRange[1]))\n        dialog[\"bankDirEdit\"].setText(section[\"BankDir\"])\n        bankFile = config_file.get_str(\"General\", \"BankFile\", default=\"bankfile\")\n        dialog[\"bankFileName\"].setText(bankFile)\n        flag = config_file.get_bool(\"General\", \"Plotting\", default=True)\n        dialog[\"makePlotsEdit\"].setChecked(flag)\n        flag = config_file.get_bool(\"General\", \"SavePlots\", default=True)\n        dialog[\"savePlotsEdit\"].setChecked(flag)\n        flag = config_file.get_bool(\"General\", \"SaveZoomPlots\", default=False)\n        dialog[\"saveZoomPlotsEdit\"].setChecked(flag)\n        zoomStepKM = config_file.get_float(\"General\", \"ZoomStepKM\", default=1.0)\n        dialog[\"zoomPlotsRangeEdit\"].setText(str(zoomStepKM))\n        figDir = config_file.get_str(\n            \"General\",\n            \"FigureDir\",\n            default=absolute_path(rootdir, \"figures\"),\n        )\n        dialog[\"figureDirEdit\"].setText(figDir)\n        flag = config_file.get_bool(\"General\", \"ClosePlots\", default=False)\n        dialog[\"closePlotsEdit\"].setChecked(flag)\n        flag = config_file.get_bool(\"General\", \"DebugOutput\", default=False)\n        dialog[\"debugOutputEdit\"].setChecked(flag)\n\n        section = config[\"Detect\"]\n        dialog[\"simFileEdit\"].setText(section[\"SimFile\"])\n        waterDepth = config_file.get_float(\"Detect\", \"WaterDepth\", default=0.0)\n        dialog[\"waterDepth\"].setText(str(waterDepth))\n        NBank = config_file.get_int(\"Detect\", \"NBank\", default=0, positive=True)\n        DLines = config_file.get_bank_search_distances(NBank)\n        dialog[\"searchLines\"].invisibleRootItem().takeChildren()\n        for i in range(NBank):\n            istr = str(i + 1)\n            fileName = config_file.get_str(\"Detect\", \"Line\" + istr)\n            c1 = QtWidgets.QTreeWidgetItem(\n                dialog[\"searchLines\"], [istr, fileName, str(DLines[i])]\n            )\n        if NBank &gt; 0:\n            dialog[\"searchLinesEdit\"].setEnabled(True)\n            dialog[\"searchLinesRemove\"].setEnabled(True)\n\n        section = config[\"Erosion\"]\n        dialog[\"tErosion\"].setText(section[\"TErosion\"])\n        dialog[\"riverAxisEdit\"].setText(section[\"RiverAxis\"])\n        dialog[\"fairwayEdit\"].setText(section[\"Fairway\"])\n        dialog[\"chainageOutStep\"].setText(section[\"OutputInterval\"])\n        dialog[\"outDirEdit\"].setText(section[\"OutputDir\"])\n        bankNew = config_file.get_str(\"Erosion\", \"BankNew\", default=\"banknew\")\n        dialog[\"newBankFile\"].setText(bankNew)\n        bankEq = config_file.get_str(\"Erosion\", \"BankEq\", default=\"bankeq\")\n        dialog[\"newEqBankFile\"].setText(bankEq)\n        txt = config_file.get_str(\"Erosion\", \"EroVol\", default=\"erovol_standard.evo\")\n        dialog[\"eroVol\"].setText(txt)\n        txt = config_file.get_str(\"Erosion\", \"EroVolEqui\", default=\"erovol_eq.evo\")\n        dialog[\"eroVolEqui\"].setText(txt)\n\n        NLevel = config_file.get_int(\"Erosion\", \"NLevel\", default=0, positive=True)\n        dialog[\"discharges\"].invisibleRootItem().takeChildren()\n        for i in range(NLevel):\n            istr = str(i + 1)\n            fileName = config_file.get_str(\"Erosion\", \"SimFile\" + istr)\n            prob = config_file.get_str(\"Erosion\", \"PDischarge\" + istr)\n            c1 = QtWidgets.QTreeWidgetItem(dialog[\"discharges\"], [istr, fileName, prob])\n        if NLevel &gt; 0:\n            dialog[\"dischargesEdit\"].setEnabled(True)\n            dialog[\"dischargesRemove\"].setEnabled(True)\n        dialog[\"refLevel\"].validator().setTop(NLevel)\n        dialog[\"refLevel\"].setText(section[\"RefLevel\"])\n\n        setParam(\"shipType\", config, \"Erosion\", \"ShipType\")\n        setParam(\"shipVeloc\", config, \"Erosion\", \"VShip\")\n        setParam(\"nShips\", config, \"Erosion\", \"NShip\")\n        setParam(\"shipNWaves\", config, \"Erosion\", \"NWave\", \"5\")\n        setParam(\"shipDraught\", config, \"Erosion\", \"Draught\")\n        setParam(\"wavePar0\", config, \"Erosion\", \"Wave0\", \"200.0\")\n        wave0 = config_file.get_str(\"Erosion\", \"Wave0\", \"200.0\")\n        setParam(\"wavePar1\", config_file.config, \"Erosion\", \"Wave1\", wave0)\n\n        useBankType = config_file.get_bool(\"Erosion\", \"Classes\", default=True)\n        dialog[\"bankType\"].setEnabled(useBankType)\n        dialog[\"bankTypeType\"].setEnabled(useBankType)\n        dialog[\"bankTypeEdit\"].setEnabled(useBankType)\n        dialog[\"bankTypeEditFile\"].setEnabled(useBankType)\n        dialog[\"bankShear\"].setEnabled(not useBankType)\n        dialog[\"bankShearType\"].setEnabled(not useBankType)\n        dialog[\"bankShearEdit\"].setEnabled(not useBankType)\n        dialog[\"bankShearEditFile\"].setEnabled(not useBankType)\n        if useBankType:\n            dialog[\"strengthPar\"].setCurrentText(\"Bank Type\")\n            bankStrengthSwitch()\n            setParam(\"bankType\", config_file.config, \"Erosion\", \"BankType\")\n        else:\n            dialog[\"strengthPar\"].setCurrentText(\"Critical Shear Stress\")\n            bankStrengthSwitch()\n            setParam(\"bankShear\", config, \"Erosion\", \"BankType\")\n        setParam(\"bankProtect\", config, \"Erosion\", \"ProtectionLevel\", \"-1000\")\n        setParam(\"bankSlope\", config, \"Erosion\", \"Slope\", \"20.0\")\n        setParam(\"bankReed\", config, \"Erosion\", \"Reed\", \"0.0\")\n\n        setFilter(\"velFilter\", config, \"Erosion\", \"VelFilterDist\")\n        setFilter(\"bedFilter\", config, \"Erosion\", \"BedFilterDist\")\n\n        tabs = dialog[\"tabs\"]\n        for i in range(tabs.count() - 1, 4, -1):\n            tabs.removeTab(i)\n\n        for i in range(NLevel):\n            istr = str(i + 1)\n            addTabForLevel(istr)\n            setOptParam(istr + \"_shipType\", config, \"Erosion\", \"ShipType\" + istr)\n            setOptParam(istr + \"_shipVeloc\", config, \"Erosion\", \"VShip\" + istr)\n            setOptParam(istr + \"_nShips\", config, \"Erosion\", \"NShip\" + istr)\n            setOptParam(istr + \"_shipNWaves\", config, \"Erosion\", \"NWave\" + istr)\n            setOptParam(istr + \"_shipDraught\", config, \"Erosion\", \"Draught\" + istr)\n            setOptParam(istr + \"_bankSlope\", config, \"Erosion\", \"Slope\" + istr)\n            setOptParam(istr + \"_bankReed\", config, \"Erosion\", \"Reed\" + istr)\n            txt = config_file.get_str(\"Erosion\", \"EroVol\" + istr, default=\"\")\n            dialog[istr + \"_eroVolEdit\"].setText(txt)\n\n    else:\n        showError(\"Unsupported version number {} in the file!\".format(version))\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.main","title":"<code>main(config: Optional[str] = None) -&gt; None</code>","text":"<p>Start the user interface using default settings or optional configuration.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.main--arguments","title":"Arguments","text":"<p>config : Optional[str]     Optional name of configuration file.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def main(config: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Start the user interface using default settings or optional configuration.\n\n    Arguments\n    ---------\n    config : Optional[str]\n        Optional name of configuration file.\n    \"\"\"\n    create_dialog()\n    if not config is None:\n        load_configuration(config)\n\n    activate_dialog()\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_about_qt","title":"<code>menu_about_qt()</code>","text":"<p>Show the about dialog for Qt.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_about_qt--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def menu_about_qt():\n    \"\"\"\n    Show the about dialog for Qt.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    QtWidgets.QApplication.aboutQt()\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_about_self","title":"<code>menu_about_self()</code>","text":"<p>Show the about dialog for D-FAST Bank Erosion.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_about_self--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def menu_about_self():\n    \"\"\"\n    Show the about dialog for D-FAST Bank Erosion.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    msg = QtWidgets.QMessageBox()\n    msg.setIcon(QtWidgets.QMessageBox.Information)\n    msg.setText(f\"D-FAST Bank Erosion {__version__}\")\n    msg.setInformativeText(\"Copyright (c) 2020 Deltares.\")\n    msg.setDetailedText(gui_text(\"license\"))\n    msg.setWindowTitle(gui_text(\"about\"))\n    msg.setStandardButtons(QtWidgets.QMessageBox.Ok)\n    msg.setStyleSheet(\"QDialogButtonBox{min-width: 400px;}\")\n    msg.exec_()\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_load_configuration","title":"<code>menu_load_configuration() -&gt; None</code>","text":"<p>Select and load a configuration file.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_load_configuration--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def menu_load_configuration() -&gt; None:\n    \"\"\"\n    Select and load a configuration file.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    fil = QtWidgets.QFileDialog.getOpenFileName(\n        caption=\"Select Configuration File\", filter=\"Config Files (*.cfg)\"\n    )\n    filename = fil[0]\n    if filename != \"\":\n        load_configuration(filename)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_open_manual","title":"<code>menu_open_manual()</code>","text":"<p>Open the user manual.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def menu_open_manual():\n    \"\"\"Open the user manual.\"\"\"\n    filename = str(r_dir / USER_MANUAL_FILE_NAME)\n    subprocess.Popen(filename, shell=True)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_save_configuration","title":"<code>menu_save_configuration() -&gt; None</code>","text":"<p>Ask for a configuration file name and save GUI selection to that file.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.menu_save_configuration--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def menu_save_configuration() -&gt; None:\n    \"\"\"\n    Ask for a configuration file name and save GUI selection to that file.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    fil = QtWidgets.QFileDialog.getSaveFileName(\n        caption=\"Save Configuration As\", filter=\"Config Files (*.cfg)\"\n    )\n    filename = fil[0]\n    if filename != \"\":\n        config = get_configuration()\n        rootdir = os.path.dirname(filename)\n        config_file = ConfigFile(config)\n        config_file.relative_to(rootdir)\n        config.write(filename)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.openFileLayout","title":"<code>openFileLayout(key, enabled=True) -&gt; PyQt5.QtWidgets.QWidget</code>","text":"<p>Create a standard layout with a file or folder edit field and selection button.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.openFileLayout--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter. enabled : bool     Flag indicating whether the file selection button should be enabed by default.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.openFileLayout--returns","title":"Returns","text":"<p>parent : PyQt5.QtWidgets.QWidget     Parent QtWidget that contains the edit field and selection button.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def openFileLayout(key, enabled=True) -&gt; PyQt5.QtWidgets.QWidget:\n    \"\"\"\n    Create a standard layout with a file or folder edit field and selection button.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    enabled : bool\n        Flag indicating whether the file selection button should be enabed by default.\n\n    Returns\n    ------\n    parent : PyQt5.QtWidgets.QWidget\n        Parent QtWidget that contains the edit field and selection button.\n    \"\"\"\n    parent = QtWidgets.QWidget()\n    gridly = QtWidgets.QGridLayout(parent)\n    gridly.setContentsMargins(0, 0, 0, 0)\n\n    myWidget = QtWidgets.QLineEdit()\n    dialog[key] = myWidget\n    gridly.addWidget(myWidget, 0, 0)\n\n    openFile = QtWidgets.QPushButton(getIcon(f\"{ICONS_DIR}/open.png\"), \"\")\n    openFile.clicked.connect(partial(selectFile, key))\n    openFile.setEnabled(enabled)\n    dialog[key + \"File\"] = openFile\n    gridly.addWidget(openFile, 0, 2)\n\n    return parent\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.optionalParLayout","title":"<code>optionalParLayout(gridLayout: PyQt5.QtWidgets.QGridLayout, row: int, key, labelString, selectList=None) -&gt; None</code>","text":"<p>Add a line of controls for editing an optional parameter.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.optionalParLayout--arguments","title":"Arguments","text":"<p>gridLayout : PyQt5.QtWidgets.QGridLayout     Grid layout object in which to position the edit controls. row : int     Grid row number to be used for this parameter. key : str     Short name of the parameter. labelString : str     String describing the parameter to be displayed as label. selectList : Optional[List[str]]     In case the parameter can only have a limited number of values: a list     of strings describing the options.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def optionalParLayout(\n    gridLayout: PyQt5.QtWidgets.QGridLayout, row: int, key, labelString, selectList=None\n) -&gt; None:\n    \"\"\"\n    Add a line of controls for editing an optional parameter.\n\n    Arguments\n    ---------\n    gridLayout : PyQt5.QtWidgets.QGridLayout\n        Grid layout object in which to position the edit controls.\n    row : int\n        Grid row number to be used for this parameter.\n    key : str\n        Short name of the parameter.\n    labelString : str\n        String describing the parameter to be displayed as label.\n    selectList : Optional[List[str]]\n        In case the parameter can only have a limited number of values: a list\n        of strings describing the options.\n    \"\"\"\n    Label = QtWidgets.QLabel(labelString)\n    dialog[key + \"Label\"] = Label\n    gridLayout.addWidget(Label, row, 0)\n\n    paramTypes = (\"Use Default\", \"Constant\", \"Variable\")\n    Type = QtWidgets.QComboBox()\n    Type.addItems(paramTypes)\n    Type.currentIndexChanged.connect(partial(typeUpdatePar, key))\n    dialog[key + \"Type\"] = Type\n    gridLayout.addWidget(Type, row, 1)\n\n    if selectList is None:\n        fLayout = openFileLayout(key + \"Edit\", enabled=False)\n        dialog[key + \"Edit\"].setEnabled(False)\n        gridLayout.addWidget(fLayout, row, 2)\n    else:\n        Select = QtWidgets.QComboBox()\n        Select.addItems(selectList)\n        Select.setEnabled(False)\n        dialog[key + \"Select\"] = Select\n        gridLayout.addWidget(Select, row, 2)\n\n        fLayout = openFileLayout(key + \"Edit\", enabled=False)\n        dialog[key + \"Edit\"].setEnabled(False)\n        gridLayout.addWidget(fLayout, row + 1, 2)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.removeAnItem","title":"<code>removeAnItem(key: str) -&gt; None</code>","text":"<p>Implements the actions for the remove item button.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.removeAnItem--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def removeAnItem(key: str) -&gt; None:\n    \"\"\"\n    Implements the actions for the remove item button.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    \"\"\"\n    selected = dialog[key].selectedItems()\n    root = dialog[key].invisibleRootItem()\n    if len(selected) &gt; 0:\n        istr = selected[0].text(0)\n        root.removeChild(selected[0])\n        i = int(istr) - 1\n        for j in range(i, root.childCount()):\n            root.child(j).setText(0, str(j + 1))\n    else:\n        istr = \"\"\n    if root.childCount() == 0:\n        dialog[key + \"Edit\"].setEnabled(False)\n        dialog[key + \"Remove\"].setEnabled(False)\n    if istr == \"\":\n        pass\n    elif key == \"searchLines\":\n        pass\n    elif key == \"discharges\":\n        tabs = dialog[\"tabs\"]\n        dialog[\"refLevel\"].validator().setTop(root.childCount())\n        dj = 0\n        for j in range(tabs.count()):\n            if dj &gt; 0:\n                tabs.setTabText(j - 1, \"Level \" + str(j + dj))\n                updateTabKeys(j + dj + 1)\n            elif tabs.tabText(j) == \"Level \" + istr:\n                tabs.removeTab(j)\n                dj = i - j\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.run_detection","title":"<code>run_detection() -&gt; None</code>","text":"<p>Run the bank line detection based on settings in the GUI.</p> <p>Use a dummy configuration name in the current work directory to create relative paths.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.run_detection--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def run_detection() -&gt; None:\n    \"\"\"\n    Run the bank line detection based on settings in the GUI.\n\n    Use a dummy configuration name in the current work directory to create\n    relative paths.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    config = get_configuration()\n    rootdir = os.getcwd()\n    config_file = ConfigFile(config)\n    config_file.root_dir = rootdir\n    config_file.relative_to(rootdir)\n    dialog[\"application\"].setOverrideCursor(QtCore.Qt.WaitCursor)\n    matplotlib.pyplot.close(\"all\")\n    # should maybe use a separate thread for this ...\n    msg = \"\"\n    try:\n        bank_line = BankLines(config_file, gui=True)\n        bank_line.detect()\n    except Exception as Ex:\n        msg = str(Ex)\n    dialog[\"application\"].restoreOverrideCursor()\n    if msg != \"\":\n        print(msg)\n        showError(msg)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.run_erosion","title":"<code>run_erosion() -&gt; None</code>","text":"<p>Run the D-FAST Bank Erosion analysis based on settings in the GUI.</p> <p>Use a dummy configuration name in the current work directory to create relative paths.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def run_erosion() -&gt; None:\n    \"\"\"\n    Run the D-FAST Bank Erosion analysis based on settings in the GUI.\n\n    Use a dummy configuration name in the current work directory to create\n    relative paths.\n    \"\"\"\n    config = get_configuration()\n    rootdir = os.getcwd()\n    config_file = ConfigFile(config)\n    config_file.root_dir = rootdir\n    config_file.relative_to(rootdir)\n    dialog[\"application\"].setOverrideCursor(QtCore.Qt.WaitCursor)\n    matplotlib.pyplot.close(\"all\")\n    erosion = Erosion(config_file, gui=True)\n    erosion.run()\n    dialog[\"application\"].restoreOverrideCursor()\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.selectFile","title":"<code>selectFile(key: str) -&gt; None</code>","text":"<p>Select a file or directory via a selection dialog.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.selectFile--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def selectFile(key: str) -&gt; None:\n    \"\"\"\n    Select a file or directory via a selection dialog.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    \"\"\"\n    dnm: str\n    if not dialog[key + \"File\"].hasFocus():\n        # in the add/edit dialogs, the selectFile is triggered when the user presses enter in one of the lineEdit boxes ...\n        # don't trigger the actual selectFile\n        fil = \"\"\n    elif key == \"simFileEdit\":\n        fil, fltr = QtWidgets.QFileDialog.getOpenFileName(\n            caption=\"Select D-Flow FM Map File\", filter=\"D-Flow FM Map Files (*map.nc)\"\n        )\n        # getOpenFileName returns a tuple van file name and active file filter.\n    elif key == \"chainFileEdit\":\n        fil, fltr = QtWidgets.QFileDialog.getOpenFileName(\n            caption=\"Select Chainage File\", filter=\"Chainage Files (*.xyc)\"\n        )\n    elif key == \"riverAxisEdit\":\n        fil, fltr = QtWidgets.QFileDialog.getOpenFileName(\n            caption=\"Select River Axis File\", filter=\"River Axis Files (*.xyc)\"\n        )\n    elif key == \"fairwayEdit\":\n        fil, fltr = QtWidgets.QFileDialog.getOpenFileName(\n            caption=\"Select Fairway File\", filter=\"Fairway Files (*.xyc)\"\n        )\n    elif key == \"editSearchLineEdit\":\n        fil, fltr = QtWidgets.QFileDialog.getOpenFileName(\n            caption=\"Select Search Line File\", filter=\"Search Line Files (*.xyc)\"\n        )\n    elif key == \"editDischargeEdit\":\n        fil, fltr = QtWidgets.QFileDialog.getOpenFileName(\n            caption=\"Select Simulation File\", filter=\"Simulation File (*map.nc)\"\n        )\n    elif key == \"bankDirEdit\":\n        fil = QtWidgets.QFileDialog.getExistingDirectory(\n            caption=\"Select Bank Directory\"\n        )\n    elif key == \"figureDirEdit\":\n        fil = QtWidgets.QFileDialog.getExistingDirectory(\n            caption=\"Select Figure Output Directory\"\n        )\n    elif key == \"outDirEdit\":\n        fil = QtWidgets.QFileDialog.getExistingDirectory(\n            caption=\"Select Output Directory\"\n        )\n    else:\n        if key[-4:] == \"Edit\":\n            rkey = key[:-4]\n            nr = \"\"\n            while rkey[0] in \"1234567890\":\n                nr = nr + rkey[0]\n                rkey = rkey[1:]\n            if rkey[0] == \"_\":\n                rkey = rkey[1:]\n            if not nr == \"\":\n                nr = \" for Level \" + nr\n            if rkey == \"bankType\":\n                ftype = \"Bank Type\"\n                ext = \".btp\"\n                oneFile = False\n            elif rkey == \"bankShear\":\n                ftype = \"Critical Shear\"\n                ext = \".btp\"\n                oneFile = False\n            elif rkey == \"bankProtect\":\n                ftype = \"Protection Level\"\n                ext = \".bpl\"\n                oneFile = False\n            elif rkey == \"bankSlope\":\n                ftype = \"Bank Slope\"\n                ext = \".slp\"\n                oneFile = False\n            elif rkey == \"bankReed\":\n                ftype = \"Reed Fraction\"\n                ext = \".rdd\"\n                oneFile = False\n            elif rkey == \"shipType\":\n                ftype = \"Ship Type\"\n                ext = \"\"\n                oneFile = True\n            elif rkey == \"shipVeloc\":\n                ftype = \"Ship Velocity\"\n                ext = \"\"\n                oneFile = True\n            elif rkey == \"nShips\":\n                ftype = \"Number of Ships\"\n                ext = \"\"\n                oneFile = True\n            elif rkey == \"shipNWaves\":\n                ftype = \"Number of Ship Waves\"\n                ext = \"\"\n                oneFile = True\n            elif rkey == \"shipDraught\":\n                ftype = \"Ship Draught\"\n                ext = \"\"\n                oneFile = True\n            elif rkey == \"wavePar0\":\n                ftype = \"Wave0\"\n                ext = \"\"\n                oneFile = True\n            elif rkey == \"wavePar1\":\n                ftype = \"Wave1\"\n                ext = \"\"\n                oneFile = True\n            else:\n                ftype = \"Parameter\"\n                ext = \"*\"\n            ftype = ftype + \" File\"\n            fil, fltr = QtWidgets.QFileDialog.getOpenFileName(\n                caption=\"Select \" + ftype + nr, filter=ftype + \" (*\" + ext + \")\"\n            )\n            if fil != \"\":\n                fil, fext = os.path.splitext(fil)\n                if fext == ext:\n                    if not oneFile:\n                        # file should end on _&lt;nr&gt;\n                        nr = \"\"\n                        while fil[-1] in \"1234567890\":\n                             nr = rkey[-1] + nr\n                             fil = fil[:-1]\n                        if nr == \"\" or fil[-1] != \"_\":\n                            print(\"Missing bank number(s) at end of file name. Reference not updated.\")\n                            fil = \"\"\n                        else:\n                            fil = fil[:-1]\n                else:\n                    if ext == \"\":\n                        print(\"Unsupported file extension {} while expecting no extension. Reference not updated.\".format(fext))\n                    else:\n                        print(\"Unsupported file extension {} while expecting {}. Reference not updated.\".format(fext,ext))\n                    fil = \"\"\n        else:\n            print(key)\n            fil = \"\"\n    if fil != \"\":\n        dialog[key].setText(fil)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.setDialogSize","title":"<code>setDialogSize(editDialog: PyQt5.QtWidgets.QDialog, width: int, height: int) -&gt; None</code>","text":"<p>Set the width and height of a dialog and position it centered relative to the main window.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.setDialogSize--arguments","title":"Arguments","text":"<p>editDialog : QtWidgets.QDialog     Dialog object to be positioned correctly. width : int     Desired width of the dialog. height : int     Desired height of the dialog.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def setDialogSize(editDialog: PyQt5.QtWidgets.QDialog, width: int, height: int) -&gt; None:\n    \"\"\"\n    Set the width and height of a dialog and position it centered relative to the main window.\n\n    Arguments\n    ---------\n    editDialog : QtWidgets.QDialog\n        Dialog object to be positioned correctly.\n    width : int\n        Desired width of the dialog.\n    height : int\n        Desired height of the dialog.\n    \"\"\"\n    parent = dialog[\"window\"]\n    x = parent.x()\n    y = parent.y()\n    pw = parent.width()\n    ph = parent.height()\n    editDialog.setGeometry(\n        x + pw / 2 - width / 2, y + ph / 2 - height / 2, width, height\n    )\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.setFilter","title":"<code>setFilter(field: str, config, group: str, key: str) -&gt; None</code>","text":"<p>Update the dialog for a filter based on configuration file.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.setFilter--arguments","title":"Arguments","text":"<p>field : str     Short name of the parameter. config : configparser.ConfigParser     Configuration for the D-FAST Bank Erosion analysis with absolute or relative paths. group : str     Name of the group in the configuration. key : str     Name of the key in the configuration group.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def setFilter(field: str, config, group: str, key: str) -&gt; None:\n    \"\"\"\n    Update the dialog for a filter based on configuration file.\n\n    Arguments\n    ---------\n    field : str\n        Short name of the parameter.\n    config : configparser.ConfigParser\n        Configuration for the D-FAST Bank Erosion analysis with absolute or relative paths.\n    group : str\n        Name of the group in the configuration.\n    key : str\n        Name of the key in the configuration group.\n\n    \"\"\"\n    config_file = ConfigFile(config)\n    val = config_file.get_float(group, key, 0.0)\n    if val &gt; 0.0:\n        dialog[field + \"Active\"].setChecked(True)\n        dialog[field + \"Width\"].setText(str(val))\n    else:\n        dialog[field + \"Active\"].setChecked(False)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.setOptParam","title":"<code>setOptParam(field: str, config, group: str, key: str) -&gt; None</code>","text":"<p>Update the dialog for an optional parameter based on configuration file.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.setOptParam--arguments","title":"Arguments","text":"<p>field : str     Short name of the parameter. config : configparser.ConfigParser     Configuration for the D-FAST Bank Erosion analysis with absolute or relative paths. group : str     Name of the group in the configuration. key : str     Name of the key in the configuration group.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def setOptParam(field: str, config, group: str, key: str) -&gt; None:\n    \"\"\"\n    Update the dialog for an optional parameter based on configuration file.\n\n    Arguments\n    ---------\n    field : str\n        Short name of the parameter.\n    config : configparser.ConfigParser\n        Configuration for the D-FAST Bank Erosion analysis with absolute or relative paths.\n    group : str\n        Name of the group in the configuration.\n    key : str\n        Name of the key in the configuration group.\n    \"\"\"\n    config_file = ConfigFile(config)\n    str = config_file.get_str(group, key, \"\")\n    if str == \"\":\n        dialog[field + \"Type\"].setCurrentText(\"Use Default\")\n        dialog[field + \"Edit\"].setText(\"\")\n    else:\n        try:\n            val = float(str)\n            dialog[field + \"Type\"].setCurrentText(\"Constant\")\n            if field + \"Select\" in dialog.keys():\n                ival = int(val) - 1  # shipType 1 -&gt; index 0\n                dialog[field + \"Select\"].setCurrentIndex(ival)\n            else:\n                dialog[field + \"Edit\"].setText(str)\n        except:\n            dialog[field + \"Type\"].setCurrentText(\"Variable\")\n            dialog[field + \"Edit\"].setText(str)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.setParam","title":"<code>setParam(field: str, config, group: str, key: str, default: str = '??') -&gt; None</code>","text":"<p>Update the dialog for a general parameter based on configuration file.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.setParam--arguments","title":"Arguments","text":"<p>field : str     Short name of the parameter. config : configparser.ConfigParser     Configuration for the D-FAST Bank Erosion analysis with absolute or relative paths. group : str     Name of the group in the configuration. key : str     Name of the key in the configuration group. default : str     Default string if the group/key pair doesn't exist in the configuration.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def setParam(field: str, config, group: str, key: str, default: str = \"??\") -&gt; None:\n    \"\"\"\n    Update the dialog for a general parameter based on configuration file.\n\n    Arguments\n    ---------\n    field : str\n        Short name of the parameter.\n    config : configparser.ConfigParser\n        Configuration for the D-FAST Bank Erosion analysis with absolute or relative paths.\n    group : str\n        Name of the group in the configuration.\n    key : str\n        Name of the key in the configuration group.\n    default : str\n        Default string if the group/key pair doesn't exist in the configuration.\n\n    \"\"\"\n    config_file = ConfigFile(config)\n    str = config_file.get_str(group, key, default)\n\n    try:\n        val = float(str)\n        dialog[field + \"Type\"].setCurrentText(\"Constant\")\n        if field + \"Select\" in dialog.keys():\n            ival = int(val)\n            if field == \"shipType\":\n                ival = ival - 1\n            dialog[field + \"Select\"].setCurrentIndex(ival)\n        else:\n            dialog[field + \"Edit\"].setText(str)\n    except:\n        dialog[field + \"Type\"].setCurrentText(\"Variable\")\n        dialog[field + \"Edit\"].setText(str)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.shipTypes","title":"<code>shipTypes() -&gt; List[str]</code>","text":"<p>Return the tuple of ship types.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.shipTypes--arguments","title":"Arguments","text":"<p>None</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.shipTypes--returns","title":"Returns","text":"<p>types : List[str]     List of three ship types.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def shipTypes() -&gt; List[str]:\n    \"\"\"\n    Return the tuple of ship types.\n\n    Arguments\n    ---------\n    None\n\n    Returns\n    -------\n    types : List[str]\n        List of three ship types.\n    \"\"\"\n    return [\"1 (multiple barge convoy set)\", \"2 (RHK ship / motorship)\", \"3 (towboat)\"]\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.showError","title":"<code>showError(message)</code>","text":"<p>Display an error message box with specified string.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.showError--arguments","title":"Arguments","text":"<p>message : str     Text to be displayed in the message box.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def showError(message):\n    \"\"\"\n    Display an error message box with specified string.\n\n    Arguments\n    ---------\n    message : str\n        Text to be displayed in the message box.\n    \"\"\"\n    msg = QtWidgets.QMessageBox()\n    msg.setIcon(QtWidgets.QMessageBox.Critical)\n    msg.setText(message)\n    msg.setWindowTitle(\"Error\")\n    msg.setStandardButtons(QtWidgets.QMessageBox.Ok)\n    msg.exec_()\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.typeUpdatePar","title":"<code>typeUpdatePar(key: str) -&gt; None</code>","text":"<p>Implements the dialog setting switching for both general and optional parameters.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.typeUpdatePar--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def typeUpdatePar(key: str) -&gt; None:\n    \"\"\"\n    Implements the dialog setting switching for both general and optional parameters.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    \"\"\"\n    type = dialog[key + \"Type\"].currentText()\n    dialog[key + \"Edit\"].setText(\"\")\n    if type == \"Use Default\":\n        dialog[key + \"Edit\"].setValidator(None)\n        dialog[key + \"Edit\"].setEnabled(False)\n        dialog[key + \"EditFile\"].setEnabled(False)\n        if key + \"Select\" in dialog.keys():\n            dialog[key + \"Select\"].setEnabled(False)\n    elif type == \"Constant\":\n        if key + \"Select\" in dialog.keys():\n            dialog[key + \"Select\"].setEnabled(True)\n            dialog[key + \"Edit\"].setEnabled(False)\n        else:\n            if key != \"bankProtect\":\n                dialog[key + \"Edit\"].setValidator(validator(\"positive_real\"))\n            dialog[key + \"Edit\"].setEnabled(True)\n        dialog[key + \"EditFile\"].setEnabled(False)\n    elif type == \"Variable\":\n        if key + \"Select\" in dialog.keys():\n            dialog[key + \"Select\"].setEnabled(False)\n        dialog[key + \"Edit\"].setEnabled(True)\n        dialog[key + \"Edit\"].setValidator(None)\n        dialog[key + \"EditFile\"].setEnabled(True)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.updateFilter","title":"<code>updateFilter(key: str) -&gt; None</code>","text":"<p>Implements the dialog setting switching for both general and optional parameters.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.updateFilter--arguments","title":"Arguments","text":"<p>key : str     Short name of the parameter.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def updateFilter(key: str) -&gt; None:\n    \"\"\"\n    Implements the dialog setting switching for both general and optional parameters.\n\n    Arguments\n    ---------\n    key : str\n        Short name of the parameter.\n    \"\"\"\n    if dialog[key + \"Active\"].isChecked():\n        dialog[key + \"Width\"].setEnabled(True)\n    else:\n        dialog[key + \"Width\"].setEnabled(False)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.updatePlotting","title":"<code>updatePlotting() -&gt; None</code>","text":"<p>Update the plotting flags.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.updatePlotting--arguments","title":"Arguments","text":"<p>None</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def updatePlotting() -&gt; None:\n    \"\"\"\n    Update the plotting flags.\n\n    Arguments\n    ---------\n    None\n    \"\"\"\n    plotFlag = dialog[\"makePlotsEdit\"].isChecked()\n    dialog[\"savePlots\"].setEnabled(plotFlag)\n    dialog[\"savePlotsEdit\"].setEnabled(plotFlag)\n\n    saveFlag = dialog[\"savePlotsEdit\"].isChecked() and plotFlag\n    dialog[\"saveZoomPlots\"].setEnabled(saveFlag)\n    dialog[\"saveZoomPlotsEdit\"].setEnabled(saveFlag)\n\n    saveZoomFlag = dialog[\"saveZoomPlotsEdit\"].isChecked() and saveFlag\n    dialog[\"zoomPlotsRangeTxt\"].setEnabled(saveZoomFlag)\n    dialog[\"zoomPlotsRangeEdit\"].setEnabled(saveZoomFlag)\n\n    dialog[\"figureDir\"].setEnabled(saveFlag)\n    dialog[\"figureDirEdit\"].setEnabled(saveFlag)\n    dialog[\"figureDirEditFile\"].setEnabled(saveFlag)\n\n    dialog[\"closePlots\"].setEnabled(plotFlag)\n    dialog[\"closePlotsEdit\"].setEnabled(plotFlag)\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.updateTabKeys","title":"<code>updateTabKeys(i: int) -&gt; None</code>","text":"<p>Renumber tab i to tab i-1.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.updateTabKeys--arguments","title":"Arguments","text":"<p>i : str     Number of the tab to be updated.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def updateTabKeys(i: int) -&gt; None:\n    \"\"\"\n    Renumber tab i to tab i-1.\n\n    Arguments\n    ---------\n    i : str\n        Number of the tab to be updated.\n    \"\"\"\n    iStart = str(i) + \"_\"\n    newStart = str(i - 1) + \"_\"\n    N = len(iStart)\n    keys = [key for key in dialog.keys() if key[:N] == iStart]\n    for key in keys:\n        obj = dialog.pop(key)\n        if key[-4:] == \"Type\":\n            obj.currentIndexChanged.disconnect()\n            obj.currentIndexChanged.connect(\n                partial(typeUpdatePar, newStart + key[N:-4])\n            )\n        elif key[-4:] == \"File\":\n            obj.clicked.disconnect()\n            obj.clicked.connect(partial(selectFile, newStart + key[N:-4]))\n        dialog[newStart + key[N:]] = obj\n</code></pre>"},{"location":"gui/gui.html#dfastbe.gui.gui.validator","title":"<code>validator(validstr: str) -&gt; PyQt5.QtGui.QValidator</code>","text":"<p>Wrapper to easily create a validator.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.validator--arguments","title":"Arguments","text":"<p>validstr : str     Identifier for the requested validation method.</p>"},{"location":"gui/gui.html#dfastbe.gui.gui.validator--returns","title":"Returns","text":"<p>validator : PyQt5.QtGui.QValidator     Validator for the requested validation method.</p> Source code in <code>src/dfastbe/gui/gui.py</code> <pre><code>def validator(validstr: str) -&gt; PyQt5.QtGui.QValidator:\n    \"\"\"\n    Wrapper to easily create a validator.\n\n    Arguments\n    ---------\n    validstr : str\n        Identifier for the requested validation method.\n\n    Returns\n    -------\n    validator : PyQt5.QtGui.QValidator\n        Validator for the requested validation method.\n    \"\"\"\n    if validstr == \"positive_real\":\n        validator = PyQt5.QtGui.QDoubleValidator()\n        validator.setBottom(0)\n    else:\n        raise Exception(\"Unknown validator type: {}\".format(validstr))\n    return validator\n</code></pre>"},{"location":"guides/contributing.html","title":"Contributing","text":""},{"location":"guides/contributing.html#tooling","title":"Tooling","text":""},{"location":"guides/contributing.html#poetry","title":"Poetry","text":"<p>We use <code>poetry</code> to manage our package and its dependencies. More information on the separate Poetry page.</p>"},{"location":"guides/contributing.html#pytest","title":"Pytest","text":"<p>We use <code>pytest</code> to test our package. Run it with <code>poetry run pytest</code> to test your code changes locally.</p>"},{"location":"guides/contributing.html#black","title":"Black","text":"<p>We use <code>black</code> as an autoformatter. It is also run during CI and will fail if it's not formatted beforehand.</p>"},{"location":"guides/contributing.html#isort","title":"Isort","text":"<p>We use <code>isort</code> as an autoformatter.</p>"},{"location":"guides/contributing.html#commitizen","title":"Commitizen","text":"<ul> <li>We use <code>commitizen</code> to automatically bump the version number.</li> <li>If you use conventional commit messages, the <code>change-log.md</code> is generated automatically. More details below under \"Merging\".</li> </ul>"},{"location":"guides/contributing.html#development","title":"Development","text":""},{"location":"guides/contributing.html#branches","title":"Branches","text":"<p>For each issue or feature, a separate branch should be created from the main. To keep the branches organized each branch should be created with a prefix in the name: * <code>feat/</code> for new features and feature improvements; * <code>fix/</code> for bugfixes; * <code>docs/</code> for documentation; * <code>chore/</code> for tasks, tool changes, configuration work, everything not relevant for external users.</p> <p>After this prefix, preferrably add the issue number, followed by a brief title using underscores. For example: <code>feat/160_obsfile</code> or, <code>fix/197_validation_pump_stages</code>.</p>"},{"location":"guides/contributing.html#pull-requests","title":"Pull requests","text":"<p>When starting development on a branch, a pull request should be created for reviews and continous integration. In the description text area on GitHub, use a closing keyword such that this PR will be automatically linked to the issue. For example: <code>Fixes #160</code>.</p> <p>During continuous integration, the checks will be run with several Python versions on Windows, Ubuntu and MacOS. The checks consist of running the tests, checking the code formatting and running SonarCloud. We advise to use a draft pull request, to prevent the branch to be merged back before developement is finished. When the branch is ready for review, you can update the status of the pull request to \"ready for review\".</p>"},{"location":"guides/contributing.html#reviews","title":"Reviews","text":"<p>When an issue is ready for review, it should be moved to the \"Ready for review\" column on the GitHub board for visibility.</p>"},{"location":"guides/contributing.html#merging","title":"Merging","text":"<p>Merging a branch can only happen when a pull request is accepted through review. When a pull request is accepted the changes should be merged back with the \"squash and merge\" option. The merge commit message should adhere to the conventional commit guidelines. * In the first textfield of the GitHub commit form, use for example: <code>feat: Support 3D timeseries in .bc file</code>, without any PR/issue references. * In the text area of the GitHub commit form, optionally add some more description details on the commit. * In the same text area, add footer line <code>Refs: #&lt;issuenr&gt;</code>, and if needed an extra line <code>BREAKING CHANGE: explanation</code>. Don't forget a blank line between footer lines and the preceding description lines (if present).</p>"},{"location":"guides/contributing.html#coding-guidelines","title":"Coding guidelines","text":"<ul> <li>If there is code that needs to be tested, there should be tests written for it.</li> <li>If there are any additions or changes to the public API, the documentation should be updated.</li> <li>Files should be added to the appropriate folder to keep modules and objects within the correct scope.</li> </ul>"},{"location":"guides/contributing.html#releasing","title":"Releasing","text":""},{"location":"guides/contributing.html#making-a-release-on-github-and-pypi","title":"Making a release on GitHub and PyPi","text":"<p>When we are releasing D-FAST_Bank_Erosion, we want to create a release on GitHub and PyPi. This should only be done by one of the D-FAST_Bank_Erosion maintainers. To prepare for releasing, please make sure you have a clean checkout of the latest <code>main</code> branch and follow these steps:</p> <ul> <li>Go to the root level of your D-FAST_Bank_Erosion checkout location</li> <li>Open your command line in this location</li> <li>Perform the following commands:<ul> <li>If commitizen is not installed yet:  <pre><code>pip install commitizen\n</code></pre></li> <li>Prepare the Changelog before bumping the release version:  <pre><code>cz changelog --unreleased-version=\"0.3.1\" --incremental\n</code></pre>  In the above command, use the version tag instead of the raw version number (so without \"v\" in our case).  If you don't know the version tag yet, you can do a dry-run of the next step, for example via:  <pre><code>cz bump --dry-run --increment PATCH\n</code></pre></li> <li>In the updated <code>docs/mkdocs/change-log.md</code>, manually add links to GitHub PR numbers (or issue numbers) at the     end of each line, if appropriate.      It is recommended to use the macros <code>{{gh_pr(123)}}</code>, resp. <code>{{gh_issue(345)}}</code> to get automatic hyperlinks (where 123 and 345 are GitHub's PR and issue numbers, respectively).</li> <li>Use MAJOR, MINOR or PATCH to increment the version  <pre><code>cz bump --increment {MAJOR,MINOR,PATCH}\n</code></pre></li> <li>Or let commitizen detect the increment automatically  <pre><code>cz bump\n</code></pre></li> <li>Push the tags and changes to git  <pre><code>git push --tags\ngit push\n</code></pre></li> <li>Build the wheels and publish the package to PyPi  <pre><code>poetry build\npoetry publish\n</code></pre>  You will need a PyPI account and permissions for this publish step. Ask a maintainer for help if you need this.</li> </ul> </li> <li>Go to the D-FAST_Bank_Erosion GitHub page.</li> <li>Go to <code>Releases</code> and click on <code>Draft a new release</code>.</li> <li>Fill in the <code>Release title</code> field with <code>Release v&lt;VERSION&gt;</code>, with <code>&lt;VERSION&gt;</code> in the full format <code>&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;</code>, for example <code>Release v0.3.0</code>.</li> <li>Choose the appropriate version tag in the <code>Choose a tag</code> dropdown box (typically <code>&lt;VERSION&gt;</code> without \"v\" prefix).</li> <li>Click on <code>Generate release notes</code>.</li> <li>Click on <code>Publish release</code>.</li> <li>Celebrate </li> </ul>"},{"location":"guides/developer-instructions.html","title":"Developer Instructions","text":"<p>Instructions coding guidelines for contributing to this repository. How to contribute Pre-Commit Hooks: Instructions on setting up and using pre-commit hooks for this repository.</p>"},{"location":"guides/doctest.html","title":"Docstrings and Doctest","text":"<p>Proper documentation is essential for code readability and maintainability. This guide explains how to write docstrings using the Google style and test them using <code>doctest</code>.</p>"},{"location":"guides/doctest.html#1-writing-docstrings-in-google-style","title":"1. Writing Docstrings in Google Style","text":"<p>Google style docstrings are a clean and readable way to document your code. Here is a breakdown of the format:</p>"},{"location":"guides/doctest.html#example-docstring","title":"Example Docstring","text":"<pre><code>def add_numbers(a: int, b: int) -&gt; int:\n    \"\"\"\n    Add two numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        int: The sum of the two numbers.\n\n    Examples:\n        &gt;&gt;&gt; add_numbers(1, 2)\n        3\n        &gt;&gt;&gt; add_numbers(-1, 5)\n        4\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"guides/doctest.html#key-sections-of-a-google-style-docstring","title":"Key Sections of a Google Style Docstring","text":"<ol> <li>Summary: A short description of the function.</li> <li>Args: A list of all parameters with their types and descriptions.</li> <li>Returns: A description of the return value(s).</li> <li>Raises (optional): A list of exceptions the function may raise.</li> <li>Examples: Code examples demonstrating how to use the function.</li> </ol>"},{"location":"guides/doctest.html#additional-notes","title":"Additional Notes","text":"<ul> <li>Use <code>\"\"\"</code> for multi-line docstrings.</li> <li>Align descriptions for readability.</li> <li>Keep the summary concise and to the point.</li> </ul>"},{"location":"guides/doctest.html#2-testing-docstrings-with-doctest","title":"2. Testing Docstrings with Doctest","text":"<p><code>doctest</code> allows you to test the examples provided in your docstrings.</p>"},{"location":"guides/doctest.html#running-doctests","title":"Running Doctests","text":"<ol> <li>Save your code with properly formatted docstrings.</li> <li>Use the following command to run <code>doctest</code>:</li> </ol> <pre><code>python -m doctest -v your_script.py\n</code></pre> <p>The <code>-v</code> flag provides verbose output, showing which tests passed or failed.</p>"},{"location":"guides/doctest.html#example-script-with-doctest","title":"Example Script with Doctest","text":"<pre><code>def multiply_numbers(a: int, b: int) -&gt; int:\n    \"\"\"\n    Multiply two numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        int: The product of the two numbers.\n\n    Examples:\n        &gt;&gt;&gt; multiply_numbers(2, 3)\n        6\n        &gt;&gt;&gt; multiply_numbers(-1, 5)\n        -5\n        &gt;&gt;&gt; multiply_numbers(0, 10)\n        0\n    \"\"\"\n    return a * b\n</code></pre>"},{"location":"guides/doctest.html#common-commands","title":"Common Commands","text":"<ul> <li>Run all tests: Run the script with doctest as shown above.</li> <li>Check specific failures: Look at the detailed output to understand why a test failed.</li> </ul>"},{"location":"guides/doctest.html#3-debugging-and-troubleshooting","title":"3. Debugging and Troubleshooting","text":"<ol> <li>Ensure your examples in the docstring match the actual output exactly (including whitespace).</li> <li>Use the <code># doctest: +SKIP</code> directive to skip examples that should not be tested:</li> </ol> <pre><code>&gt;&gt;&gt; some_function()  # doctest: +SKIP\n</code></pre> <ol> <li>If you encounter issues with floating-point numbers, use the <code># doctest: +ELLIPSIS</code> directive to allow partial matching:</li> </ol> <pre><code>&gt;&gt;&gt; divide_numbers(1, 3)\n0.333...  # doctest: +ELLIPSIS\n</code></pre>"},{"location":"guides/doctest.html#4-best-practices","title":"4. Best Practices","text":"<ul> <li>Write examples for edge cases (e.g., zero, negative numbers, large inputs).</li> <li>Ensure all public functions, methods, and classes have docstrings.</li> <li>Regularly run <code>doctest</code> to ensure your examples remain up to date.</li> </ul>"},{"location":"guides/doctest.html#5-additional-resources","title":"5. Additional Resources","text":"<ul> <li>Google Python Style Guide: Docstrings</li> <li>Python Doctest Documentation</li> </ul> <p>By following these guidelines, you can ensure your code is both well-documented and well-tested. Thank you for contributing!</p>"},{"location":"guides/documentation.html","title":"Documentation","text":"<p>We use MKdocs for documentation. For full documentation visit mkdocs.org.</p> <p>The documentation itself is written with https://documentation.divio.com/ structure in mind, creating different categories: - Guides - Tutorials - Reference - Topics</p>"},{"location":"guides/documentation.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"guides/documentation.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"guides/poetry.html","title":"Installation using Poetry","text":"<p>You can use a Poetry-based installation if you are using D-FAST_Bank_Erosion from a local clone of the Github repository, for example if you intend to contribute to the code.</p>"},{"location":"guides/poetry.html#clone-the-github-repo","title":"Clone the GitHub repo","text":"<p>Use your own preferred way of cloning the GitHub repository of D-FAST_Bank_Erosion. In the examples below it is placed in <code>C:\\checkouts\\D-FAST_Bank_Erosion_git</code>.</p>"},{"location":"guides/poetry.html#use-poetry-to-install-d-fast_bank_erosion","title":"Use Poetry to install D-FAST_Bank_Erosion","text":"<p>We use <code>poetry</code> to manage our package and its dependencies.</p> <p>Note</p> <p>If you use <code>conda</code>, do not combine conda virtual environments with the poetry virtual environment. In other words, run the <code>poetry install</code> command from the <code>base</code> conda environment.</p> <ol> <li>Download + installation instructions for Poetry are here.</li> <li> <p>After installation of Poetry itself, now use it to install your local clone of the D-FAST_Bank_Erosion package, as follows.    Make sure Poetry is available on your <code>PATH</code> and run <code>poetry install</code> in the D-FAST_Bank_Erosion directory in your shell of choice.    This will create a virtual environment in which D-FAST_Bank_Erosion is installed and made available for use in your own scripts.    For example in an Anaconda PowerShell: <pre><code>(base) PS C:\\checkouts\\D-FAST_Bank_Erosion_git&gt; poetry install\nCreating virtualenv D-FAST_Bank_Erosion-kHkQBdtS-py3.8 in C:\\Users\\dam_ar\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\nInstalling dependencies from lock file\n\nPackage operations: 67 installs, 0 updates, 0 removals\n\n  * Installing six (1.16.0)\n[..]\nInstalling the current project: D-FAST_Bank_Erosion (0.1.5)\n(base) PS C:\\checkouts\\D-FAST_Bank_Erosion_git&gt;\n</code></pre>    If you need to use an already existing Python installation, you can activate it and run <code>poetry env use system</code> before <code>poetry install</code>.</p> </li> <li> <p>Test your installation, by running the D-FAST_Bank_Erosion pytest suite via poetry: <pre><code>(base) PS C:\\checkouts\\D-FAST_Bank_Erosion_git&gt; poetry run pytest\n===================================== test session starts ======================================\nplatform win32 -- Python 3.8.8, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\nrootdir: C:\\checkouts\\D-FAST_Bank_Erosion_git, configfile: pyproject.toml\nplugins: cov-2.12.1\ncollected 473 items / 2 deselected / 471 selected\n\ntests\\io\\dflowfm\\ini\\test_ini.py ........................................................ [  3%]\ntests\\io\\dflowfm\\test_bc.py ....                                                          [  4%]\ntests\\io\\dflowfm\\test_ext.py ........................................................     [  5%]\ntests\\io\\dflowfm\\test_fnm.py ..................                                           [ 11%]\ntests\\io\\dflowfm\\test_net.py ............                                                 [ 11%]\ntests\\io\\dflowfm\\test_parser.py .                                                         [ 12%]\ntests\\io\\dflowfm\\test_polyfile.py ........................................................[ 23%]\n....................................                                                      [ 27%]\ntests\\io\\dflowfm\\test_structure.py .......................................................[ 42%]\n.........................................................                                 [ 54%]\ntests\\io\\dimr\\test_dimr.py ...                                                            [ 56%]\ntests\\io\\rr\\meteo\\test_bui.py ...........................                                 [ 57%]\ntests\\io\\test_docker.py .                                                                 [ 70%]\ntests\\test_model.py ...............                                                       [ 78%]\ntests\\test_utils.py .......                                                               [ 91%]\n.........................................                                                 [100%]\n\n============================== 471 passed, 2 deselected in 3.50s ===============================\n(base) PS C:\\checkouts\\D-FAST_Bank_Erosion_git&gt;\n</code></pre></p> </li> <li>Start using D-FAST_Bank_Erosion. You can launch your favourite editor (for example VS Code) by first starting a poetry shell with the virtual D-FAST_Bank_Erosion environment: <pre><code>(base) PS C:\\checkouts\\D-FAST_Bank_Erosion_git&gt; poetry shell\n(base) PS C:\\checkouts\\D-FAST_Bank_Erosion_git&gt; code\n</code></pre></li> </ol>"},{"location":"guides/poetry.html#switching-between-python-versions","title":"Switching Between Python Versions","text":"<p>If you need to switch between Python versions (e.g., from Python 3.9 to Python 3.10), you can configure Poetry to use a specific Python version. Follow these steps:</p> <ol> <li> <p>Verify python version in <code>pyproject.toml</code>: The <code>pyproject.toml</code> specifies which python version is supported. Please verify that the python version you wish to use is supported. For example, the following configuration: <pre><code>[tool.poetry.dependencies]\npython = \"~3.10\"\n</code></pre> It Indicates that the project supports Python 3.10 with any minor version (e.g., 3.10.1, 3.10.2, etc.).</p> </li> <li> <p>Check Installed Python Versions: Ensure that the desired Python version (e.g., Python 3.10) is installed on your system.  You can check the available versions by running: on windows: <pre><code>python --version\n</code></pre> or on Linux: <pre><code>python3 --version \n</code></pre></p> </li> <li> <p>Set the Python Version for Poetry: Use the <code>poetry env use</code> command to specify the Python version for your project. For example: <code>poetry env use python3.10</code>. This will create a new virtual environment using Python 3.10.</p> </li> <li> <p>Verify the Python Version: After setting the Python version, verify that Poetry is using the correct version: <code>poetry run python --version</code>. The output should show Python 3.10.</p> </li> <li> <p>Reinstall Dependencies: If you switch Python versions, you may need to reinstall your dependencies. Run: <code>poetry install</code>.</p> </li> <li> <p>Test the Installation: Run the test suite to ensure everything works correctly with the new Python version:  <code>poetry run pytest</code>.</p> </li> </ol>"},{"location":"guides/pre-commit-hooks.html","title":"Pre-Commit Hooks","text":"<p>The pre-commit hooks tool is integrated into this repository to automate code quality checks, formatting, and validation before committing changes. These hooks enforce consistency and ensure that only well-validated code is committed, improving overall codebase quality.</p>"},{"location":"guides/pre-commit-hooks.html#features-of-pre-commit-hooks","title":"Features of Pre-Commit Hooks","text":"<ul> <li>Automated Validation: Validates file formats, YAML/JSON structure, and checks for large files or trailing whitespace.</li> <li>Code Formatting: Automatically formats Python code using <code>black</code> and organizes imports with <code>isort</code>.</li> <li>Static Analysis: Enforces linting rules using <code>flake8</code> and additional plugins for advanced checks.</li> <li>Security Checks: Detects private keys and merge conflicts in committed code.</li> <li>Test Integration: Runs <code>pytest</code> for code and documentation tests, ensuring no regression in functionality.</li> </ul>"},{"location":"guides/pre-commit-hooks.html#configured-hooks","title":"Configured Hooks","text":"<p>Some of the key hooks configured for this repository include: - File Formatting and Cleanup:     - Trim trailing whitespace.     - Fix file encodings.     - Validate YAML and JSON files. - Code Linting and Formatting:     - <code>black</code> for consistent Python code style.     - <code>isort</code> for sorting imports.     - <code>flake8</code> for linting. - Testing:     - Runs unit tests and checks coverage using <code>pytest</code>.     - Validates Jupyter notebooks (<code>nbval</code>).     - Ensures all Python docstrings follow conventions (<code>doctest</code>). - Git and Metadata Checks:     - Ensures commits are not directly made to protected branches (e.g., <code>main</code>).     - Verifies commit messages are well-formed.</p>"},{"location":"guides/pre-commit-hooks.html#how-to-use-pre-commit-hooks","title":"How to Use Pre-Commit Hooks","text":"<p>Pre-commit hooks are an excellent way to ensure code quality and consistency before committing changes to the repository. This guide explains how to set up and use pre-commit hooks for this repository.</p>"},{"location":"guides/pre-commit-hooks.html#1-install-pre-commit","title":"1. Install Pre-Commit","text":"<p>Before you begin, ensure you have Python installed on your system. all the necessary packages for pre-commit hooks to work are listed as a separate dependency group in the pyproject.toml <code>pre-commit</code>. Follow these steps to install pre-commit:</p> <pre><code>poetry install --with pre-commit\n</code></pre>"},{"location":"guides/pre-commit-hooks.html#2-install-git-and-clone-the-repository","title":"2. Install Git and Clone the Repository","text":"<p>Ensure that Git is installed on your system. Then, clone the repository:</p> <pre><code>git clone &lt;repository_url&gt;\ncd &lt;repository_name&gt;\n</code></pre>"},{"location":"guides/pre-commit-hooks.html#3-install-pre-commit-hooks","title":"3. Install Pre-Commit Hooks","text":"<p>To set up the pre-commit hooks defined in the repository's configuration file:</p> <pre><code>pre-commit install\n</code></pre> <p>This command installs the hooks so they run automatically every time you create a commit.</p>"},{"location":"guides/pre-commit-hooks.html#4-run-pre-commit-hooks-manually-optional","title":"4. Run Pre-Commit Hooks Manually (Optional)","text":"<p>You can also run the pre-commit hooks manually to test your changes before committing:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>This will run all the hooks against the files in the repository.</p>"},{"location":"guides/pre-commit-hooks.html#5-configure-the-pre-commit-hooks","title":"5. Configure the Pre-Commit Hooks","text":"<p>The repository includes a <code>.pre-commit-config.yaml</code> file, which defines the hooks to be executed. If you need to modify the hooks, edit this file and reinstall the hooks:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"guides/pre-commit-hooks.html#example-pre-commit-configyaml-file","title":"Example <code>.pre-commit-config.yaml</code> File","text":"<p>Here is an example configuration file for common hooks:</p> <pre><code>repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0  # Use the latest stable version\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-added-large-files\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.1.0\n    hooks:\n      - id: flake8\n</code></pre>"},{"location":"guides/pre-commit-hooks.html#6-debugging-and-troubleshooting","title":"6. Debugging and Troubleshooting","text":"<p>If you encounter issues with pre-commit hooks:</p> <ol> <li>Ensure all dependencies required by the hooks are installed.</li> <li>Use the <code>--verbose</code> flag to get detailed output:</li> </ol> <p><pre><code>pre-commit run --all-files --verbose\n</code></pre> 3. Check the official documentation for each specific hook if errors persist.</p>"},{"location":"guides/pre-commit-hooks.html#7-best-practices","title":"7. Best Practices","text":"<ul> <li>Always run the hooks manually if you suspect your changes may not comply with repository standards.</li> <li>Avoid skipping hooks unless absolutely necessary. If skipping is required, use the following command to bypass hooks:</li> </ul> <pre><code>git commit --no-verify\n</code></pre> <ul> <li>Periodically update the hooks by running:</li> </ul> <pre><code>pre-commit autoupdate\n</code></pre>"},{"location":"guides/pre-commit-hooks.html#8-uninstall-hooks","title":"8. Uninstall Hooks:","text":"<ul> <li>To remove pre-commit hooks from your repository, run:</li> </ul> <p><pre><code>pre-commit uninstall\n</code></pre>    This will remove the hooks from the repository.</p>"},{"location":"guides/pre-commit-hooks.html#9-additional-resources","title":"9. Additional Resources","text":"<ul> <li>Pre-Commit Documentation</li> <li>Available Hooks</li> </ul> <p>By following these guidelines, you'll help maintain a clean, consistent, and high-quality codebase. Thank you for contributing!</p>"},{"location":"guides/teamcity-ci.html","title":"Teamcity ci","text":""},{"location":"guides/teamcity-ci.html#description-of-files-in-the-teamcity-pipelines","title":"Description of Files in the TeamCity pipelines","text":"<p>The <code>DFastBETests</code> folder contains Kotlin DSL configuration files for defining and managing TeamCity build configurations, templates, and dependencies for the D-FAST Bank Erosion project. Below is a description of each file:</p>"},{"location":"guides/teamcity-ci.html#1-settingskts","title":"1. <code>settings.kts</code>","text":"<p>Purpose: The main entry point for the TeamCity Kotlin DSL configuration. Defines the project structure, parameters, and references to build configurations and templates.</p> <p>Key Features: - Sets the project description and version. - Includes global parameters like <code>CONDA_ENV_NAME</code> and <code>python.version</code>. - References build configurations such as <code>UnitTestsSonarCloud</code>, <code>BuildWithCommandWindow</code>, and others.</p>"},{"location":"guides/teamcity-ci.html#2-unittestssonarcloudkt","title":"2. <code>unittestssonarcloud.kt</code>","text":"<p>Purpose: Defines the build configuration for running unit tests and performing SonarCloud analysis.</p> <p>Key Features: - Runs the unit tests - Integrates with SonarCloud for code quality analysis. - Publishes commit statuses to GitHub using a personal access token.  </p>"},{"location":"guides/teamcity-ci.html#3-condatemplatekt","title":"3. <code>condatemplate.kt</code>","text":"<p>Purpose: Provides a reusable template for cleaning up the build environment.</p> <p>Key Features: - Defines the steps for setting up the conda environment and clean up of the environment.  - Can be used as a base template for other build configurations to ensure a clean workspace.</p>"},{"location":"guides/teamcity-ci.html#4-buildwithcommandwindowkt","title":"4. <code>buildwithcommandwindow.kt</code>","text":"<p>Purpose: Defines the build configuration for compiling the D-FAST Bank Erosion project providing a command window version as final result.</p> <p>Key Features: - Executes a batch script (<code>BuildDfastbe.bat</code>) to build the project. - Relies on the template (<code>CondaTemplate.kt</code>) for conda environment setup. - Includes failure conditions:     - Fails the build if an <code>AssertionError</code> is detected in the logs.     - Fails the build if the total artifact size is below a specified threshold (e.g., 100MB). - Defines dependencies:     - Depends on <code>LatexManualGeneration</code> for PDF artifacts.     - Depends on <code>UnitTestsSonarCloud</code> for unit tests and code coverage.  </p>"},{"location":"guides/teamcity-ci.html#5-buildwithoutcommandwindowkt","title":"5. <code>buildwithoutcommandwindow.kt</code>","text":"<p>Purpose: Defines the build configuration for compiling the D-FAST Bank Erosion project where the final result suppresses the command window.</p> <p>Key Features: - Executes a batch script (<code>BuildDfastbe_no_command_window.bat</code>) to build the project. - Relies on the template (<code>CondaTemplate.kt</code>) for conda environment setup.  - Includes failure conditions:     - Fails the build if an <code>AssertionError</code> is detected in the logs.     - Fails the build if the total artifact size is below a specified threshold (e.g., 100MB). - Defines dependencies:     - Depends on <code>LatexManualGeneration</code> for PDF artifacts.     - Depends on <code>UnitTestsSonarCloud</code> for unit tests and code coverage. </p>"},{"location":"guides/teamcity-ci.html#6-latexmanualgenerationkt","title":"6. <code>latexmanualgeneration.kt</code>","text":"<p>Purpose: Defines a build configuration for generating LaTeX-based documentation for the project.</p> <p>Key Features: - Runs a script to compile LaTeX files into PDF documentation. - Produces PDF artifacts that are used as dependencies to prevent other build configurations from running if the documentation generation fails (e.g., <code>BuildWithCommandWindow</code>). - Ensures that the documentation is up-to-date with the latest changes in the project.</p>"},{"location":"guides/teamcity-ci.html#7-signedreleasekt","title":"7. <code>signedrelease.kt</code>","text":"<p>Purpose: Defines a build configuration for creating signed releases of the D-FAST Bank Erosion project. This configuration combines artifacts from multiple sources, including the command window version and the suppressed command window version, and ensures that the release is properly signed and ready for distribution.</p> <p>Key Features: - Produces a signed release artifact. - Moves the CLI version of dfastbe.exe to the root directory and cleans up unnecessary folders.</p>"},{"location":"guides/teamcity-ci.html#8-signedreleasecommandkt","title":"8. <code>signedreleasecommand.kt</code>","text":"<p>Purpose: Defines a build configuration for executing the signing process of release artifacts using a command-based approach. This configuration ensures that the release artifacts are signed with the appropriate certificates and are ready for secure distribution.</p> <p>Key Features: - Produces a signed release zip archive artifact. - Collects the artifacts from the signing configuration.</p>"},{"location":"guides/teamcity-ci.html#9-testbinarieskt","title":"9. <code>TestBinaries.kt</code>","text":"<p>Purpose: Defines a build configuration for running distribution tests on the built binaries.</p> <p>Key Features: - Ensures that the distributed artifacts are functional and meet quality standards. - Runs automated tests on the final release binaries.</p>"},{"location":"guides/teamcity-ci.html#10-pomxml","title":"10. <code>pom.xml</code>","text":"<p>Purpose: Defines the Maven project configuration for the D-FAST Bank Erosion project. This file is used to manage project dependencies, build lifecycle, and plugins.</p> <p>Key Features: - Specifies project metadata such as group ID, artifact ID, and version. - Manages dependencies required for building and testing the project. - Configures Maven plugins for tasks like compiling, packaging, and testing. - Supports integration with CI/CD pipelines by automating build and deployment processes. - Ensures compatibility with Java-based tools and frameworks.</p>"},{"location":"guides/teamcity-ci.html#commit-status-publisher","title":"Commit status publisher:","text":"<p>The Commit Status Publisher is a feature used in some TeamCity configurations to report the build status of commits back to GitHub. This integration helps developers track the success or failure of builds directly within their GitHub pull requests or commit history.</p> <ul> <li>The Commit Status Publisher uses a personal access token to authenticate with GitHub. This token is required to update the commit status in GitHub.</li> <li>The token is securely stored in TeamCity as a parameter. To view or manage the list of tokens in TeamCity, navigate to Project Settings \u2192 Parameters.</li> <li>The token is accessed in the build configuration using the %parameter_name% syntax. This ensures that sensitive information, such as the token, is protected and not exposed in the build logs or configuration files.</li> </ul>"},{"location":"guides/teamcity-ci.html#triggering-builds-based-on-environment","title":"Triggering Builds Based on Environment","text":"<p>To avoid unnecessary builds in a test environment, TeamCity allows you to control triggering using a context parameter. This ensures that builds are only triggered in the appropriate environment, such as production.</p> <ol> <li>How to Enable or Disable Triggering</li> <li>Enable Triggering:   Set the context parameter environment to \"production\". This allows builds to be triggered automatically.</li> <li> <p>Disable Triggering:   Set the context parameter environment to \"test\". This prevents builds from being triggered automatically.</p> </li> <li> <p>Where to Set the Context Parameter The context parameter can be configured in Versioned Settings under Context Parameters. This allows you to manage the environment-specific behavior of your build configurations directly in the versioned settings.</p> </li> <li> <p>Benefits</p> </li> <li>Efficiency: Prevents unnecessary builds in non-production environments, saving resources.</li> <li>Flexibility: Easily switch between environments by updating the context parameter.</li> <li>Control: Ensures that builds are only triggered when appropriate, reducing noise in the CI/CD pipeline.</li> </ol>"},{"location":"guides/teamcity-ci.html#vcs-root-setup","title":"VCS Root Setup","text":"<p>To enable TeamCity to import settings from the repository and monitor changes, you need to configure a VCS Root. The VCS Root defines the connection settings to your version control system (e.g., Git) and specifies how TeamCity interacts with the repository.</p> <p>Key Configuration Steps: 1. Type of VCS - Select the type of version control system. - For this project, choose Git as the VCS type.</p> <ol> <li>VCS Root Details</li> <li>VCS Root Name: Provide a descriptive name for the VCS root (e.g., D-FAST_Bank_Erosion_Main).</li> <li> <p>VCS Root ID: This is auto-generated by TeamCity. Modify it only if necessary and with caution.</p> </li> <li> <p>General Settings</p> </li> <li>Fetch URL: Specify the Git repository URL to clone or fetch the code from (e.g., https://github.com/your-org/your-repo.git).</li> <li>Push URL: Specify the Git repository URL for pushing changes, if applicable.</li> <li>Default Branch: Define the main branch of the repository (e.g., main or master).</li> <li>Branch Specification: Configure the branches TeamCity should monitor for changes or run builds on.</li> <li>Use + to include branches (e.g., +refs/heads/* to include all branches).</li> <li>Use - to exclude branches.</li> <li>Use * as a wildcard to match branch patterns.</li> </ol> <p>Example Configuration: </p>"},{"location":"guides/teamcity-ci.html#folder-overview","title":"Folder Overview","text":"<p>The <code>DFastBETests</code> folder is structured to modularize the TeamCity build configurations and templates for the D-FAST Bank Erosion project. Each file serves a specific purpose, such as running tests, building the project, or managing dependencies, while the <code>settings.kts</code> file ties everything together into a cohesive project.</p>"},{"location":"guides/testing.html","title":"Naming conventions","text":""},{"location":"guides/testing.html#test-files","title":"Test Files","text":"<ul> <li>all test files should start with <code>test_</code>, and use snake case naming convention (i.e. <code>test_my_functionality.py</code>).</li> </ul>"},{"location":"guides/testing.html#test-functions","title":"Test Functions","text":"<ul> <li>all test functions should start with <code>test_</code>, and use snake case naming convention. <pre><code>def test_my_functionality():\n    # Test code here\n    pass\n</code></pre></li> </ul>"},{"location":"guides/testing.html#test-classes","title":"Test Classes","text":"<ul> <li>all test classes should start with <code>Test</code>, and use CamelCase naming convention. <pre><code>class TestMyFunctionality:\n    def test_my_functionality(self):\n        # Test code here\n        pass\n</code></pre></li> </ul>"},{"location":"guides/testing.html#binaries","title":"Binaries","text":""},{"location":"guides/testing.html#creating-tests-for-the-binaries","title":"Creating tests for the binaries","text":"<ul> <li>all tests that are using the binaries are located in <code>tests/test_binaries</code>.</li> <li>The binaries are being built in teamcity in the following directory <pre><code>from pathlib import Path\nrepo_root = Path(__file__).resolve().parent.parent.parent\nexe_path = repo_root / \"dfastbe.dist/dfastbe.exe\"\n</code></pre></li> <li>Use the above path to trigger the binaries in any test.</li> <li>any test in the <code>tests/test_binaries</code> directory have to be marked with the following pytest marker. <pre><code>import pytest\n@pytest.mark.binaries\ndef test_my_functionality():\n    # Test code here\n    pass\n</code></pre></li> </ul>"},{"location":"guides/testing.html#teamcity-pipelines","title":"Teamcity Pipelines","text":"<p>The team city pipelines have hard coded steps that locate the dfast built binaries, and also hard coded steps to trigger the tests. This is a work in progress. - The build step that triggers testing the binaries uses the following command <pre><code>pytest -v tests/test_binaries/ --no-cov\n</code></pre> - While the unit tests pipeline uses the <code>binaries</code> pytest marker to not run the tests that uses the binaries. - So not marking any binary test with the <code>binaries</code> marker will break the unit tests pipeline. <pre><code>pytest --junitxml=\"report.xml\" --cov=%COVERAGE_LOC% --cov-report=xml tests/ -m \"not binaries\"\n</code></pre></p>"}]}